NuGet.Packaging.ManifestMetadata.EmitRequireLicenseAcceptance.get -> bool
NuGet.Packaging.ManifestMetadata.EmitRequireLicenseAcceptance.set -> void
NuGet.Packaging.NupkgMetadataFile.Source.get -> string
NuGet.Packaging.NupkgMetadataFile.Source.set -> void
NuGet.Packaging.PackageBuilder.EmitRequireLicenseAcceptance.get -> bool
NuGet.Packaging.PackageBuilder.EmitRequireLicenseAcceptance.set -> void
static NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInDependencyGroupsWarning.get -> string
static NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInFilesWarning.get -> string
static NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInFrameworkAssemblyGroupsWarning.get -> string
static NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkInReferenceGroupsWarning.get -> string
static NuGet.Packaging.Rules.AnalysisResources.InvalidUndottedFrameworkWarning.get -> string
static NuGet.Packaging.Signing.CertificateChainUtility.GetCertificateChain(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, System.Security.Cryptography.X509Certificates.X509Certificate2Collection extraStore, NuGet.Common.ILogger logger, NuGet.Packaging.Signing.CertificateType certificateType, bool allowUntrustedRoot = false) -> NuGet.Packaging.Signing.IX509CertificateChain
virtual NuGet.Packaging.PackagesConfigWriter.Dispose(bool disposing) -> void
virtual NuGet.Packaging.Signing.KeyPairFileReader.Dispose(bool disposing) -> void
virtual NuGet.Packaging.Signing.KeyPairFileWriter.Dispose(bool disposing) -> void
virtual NuGet.Packaging.Signing.SignPackageRequest.Dispose(bool disposing) -> void
