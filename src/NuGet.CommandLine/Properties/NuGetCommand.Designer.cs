// <auto-generated />
namespace NuGet.CommandLine
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class NuGetCommand
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("NuGet.CommandLine.NuGetCommand", typeof(NuGetCommand).GetTypeInfo().Assembly);

        /// <summary>
        /// Gets or sets NuGet config values.
        /// </summary>
        internal static string ConfigCommandDesc
        {
            get { return GetString("ConfigCommandDesc"); }
        }

        /// <summary>
        /// Gets or sets NuGet config values.
        /// </summary>
        internal static string FormatConfigCommandDesc()
        {
            return GetString("ConfigCommandDesc");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples
        {
            get { return GetString("ConfigCommandExamples"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples()
        {
            return GetString("ConfigCommandExamples");
        }

        /// <summary>
        /// One on more key-value pairs to be set in config.
        /// </summary>
        internal static string ConfigCommandSetDesc
        {
            get { return GetString("ConfigCommandSetDesc"); }
        }

        /// <summary>
        /// One on more key-value pairs to be set in config.
        /// </summary>
        internal static string FormatConfigCommandSetDesc()
        {
            return GetString("ConfigCommandSetDesc");
        }

        /// <summary>
        /// Returns the config value as a path. This option is ignored when -Set is specified.
        /// </summary>
        internal static string ConfigCommandAsPathDesc
        {
            get { return GetString("ConfigCommandAsPathDesc"); }
        }

        /// <summary>
        /// Returns the config value as a path. This option is ignored when -Set is specified.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc()
        {
            return GetString("ConfigCommandAsPathDesc");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary
        {
            get { return GetString("ConfigCommandSummary"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary()
        {
            return GetString("ConfigCommandSummary");
        }

        /// <summary>
        /// Deletes a package from the server.
        /// </summary>
        internal static string DeleteCommandDescription
        {
            get { return GetString("DeleteCommandDescription"); }
        }

        /// <summary>
        /// Deletes a package from the server.
        /// </summary>
        internal static string FormatDeleteCommandDescription()
        {
            return GetString("DeleteCommandDescription");
        }

        /// <summary>
        /// Do not prompt when deleting.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription
        {
            get { return GetString("DeleteCommandNoPromptDescription"); }
        }

        /// <summary>
        /// Do not prompt when deleting.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription()
        {
            return GetString("DeleteCommandNoPromptDescription");
        }

        /// <summary>
        /// Specifies the server URL.
        /// </summary>
        internal static string DeleteCommandSourceDescription
        {
            get { return GetString("DeleteCommandSourceDescription"); }
        }

        /// <summary>
        /// Specifies the server URL.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription()
        {
            return GetString("DeleteCommandSourceDescription");
        }

        /// <summary>
        /// Specify the Id and version of the package to delete from the server.
        /// </summary>
        internal static string DeleteCommandUsageDescription
        {
            get { return GetString("DeleteCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify the Id and version of the package to delete from the server.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription()
        {
            return GetString("DeleteCommandUsageDescription");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples
        {
            get { return GetString("DeleteCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples()
        {
            return GetString("DeleteCommandUsageExamples");
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string DeleteCommandUsageSummary
        {
            get { return GetString("DeleteCommandUsageSummary"); }
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary()
        {
            return GetString("DeleteCommandUsageSummary");
        }

        /// <summary>
        /// Print detailed help for all available commands.
        /// </summary>
        internal static string HelpCommandAll
        {
            get { return GetString("HelpCommandAll"); }
        }

        /// <summary>
        /// Print detailed help for all available commands.
        /// </summary>
        internal static string FormatHelpCommandAll()
        {
            return GetString("HelpCommandAll");
        }

        /// <summary>
        /// Displays general help information and help information about other commands.
        /// </summary>
        internal static string HelpCommandDescription
        {
            get { return GetString("HelpCommandDescription"); }
        }

        /// <summary>
        /// Displays general help information and help information about other commands.
        /// </summary>
        internal static string FormatHelpCommandDescription()
        {
            return GetString("HelpCommandDescription");
        }

        /// <summary>
        /// Print detailed all help in markdown format.
        /// </summary>
        internal static string HelpCommandMarkdown
        {
            get { return GetString("HelpCommandMarkdown"); }
        }

        /// <summary>
        /// Print detailed all help in markdown format.
        /// </summary>
        internal static string FormatHelpCommandMarkdown()
        {
            return GetString("HelpCommandMarkdown");
        }

        /// <summary>
        /// Pass a command name to display help information for that command.
        /// </summary>
        internal static string HelpCommandUsageDescription
        {
            get { return GetString("HelpCommandUsageDescription"); }
        }

        /// <summary>
        /// Pass a command name to display help information for that command.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription()
        {
            return GetString("HelpCommandUsageDescription");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples
        {
            get { return GetString("HelpCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples()
        {
            return GetString("HelpCommandUsageExamples");
        }

        /// <summary>
        /// [command]
        /// </summary>
        internal static string HelpCommandUsageSummary
        {
            get { return GetString("HelpCommandUsageSummary"); }
        }

        /// <summary>
        /// [command]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary()
        {
            return GetString("HelpCommandUsageSummary");
        }

        /// <summary>
        /// Installs a package using the specified sources. If no sources are specified, all sources defined in the NuGet configuration file are used. If the configuration file specifies no sources, uses the default NuGet feed.
        /// </summary>
        internal static string InstallCommandDescription
        {
            get { return GetString("InstallCommandDescription"); }
        }

        /// <summary>
        /// Installs a package using the specified sources. If no sources are specified, all sources defined in the NuGet configuration file are used. If the configuration file specifies no sources, uses the default NuGet feed.
        /// </summary>
        internal static string FormatInstallCommandDescription()
        {
            return GetString("InstallCommandDescription");
        }

        /// <summary>
        /// If set, the destination folder will contain only the package name, not the version number
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription
        {
            get { return GetString("InstallCommandExcludeVersionDescription"); }
        }

        /// <summary>
        /// If set, the destination folder will contain only the package name, not the version number
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription()
        {
            return GetString("InstallCommandExcludeVersionDescription");
        }

        /// <summary>
        /// Disable using the machine cache as the first package source.
        /// </summary>
        internal static string CommandNoCache
        {
            get { return GetString("CommandNoCache"); }
        }

        /// <summary>
        /// Disable using the machine cache as the first package source.
        /// </summary>
        internal static string FormatCommandNoCache()
        {
            return GetString("CommandNoCache");
        }

        /// <summary>
        /// Specifies the directory in which packages will be installed. If none specified, uses the current directory.
        /// </summary>
        internal static string InstallCommandOutputDirDescription
        {
            get { return GetString("InstallCommandOutputDirDescription"); }
        }

        /// <summary>
        /// Specifies the directory in which packages will be installed. If none specified, uses the current directory.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription()
        {
            return GetString("InstallCommandOutputDirDescription");
        }

        /// <summary>
        /// Allows prerelease packages to be installed. This flag is not required when restoring packages by installing from packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease
        {
            get { return GetString("InstallCommandPrerelease"); }
        }

        /// <summary>
        /// Allows prerelease packages to be installed. This flag is not required when restoring packages by installing from packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease()
        {
            return GetString("InstallCommandPrerelease");
        }

        /// <summary>
        /// A list of packages sources to use for this command.
        /// </summary>
        internal static string CommandSourceDescription
        {
            get { return GetString("CommandSourceDescription"); }
        }

        /// <summary>
        /// A list of packages sources to use for this command.
        /// </summary>
        internal static string FormatCommandSourceDescription()
        {
            return GetString("CommandSourceDescription");
        }

        /// <summary>
        /// Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed.
        /// </summary>
        internal static string InstallCommandUsageDescription
        {
            get { return GetString("InstallCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription()
        {
            return GetString("InstallCommandUsageDescription");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples
        {
            get { return GetString("InstallCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples()
        {
            return GetString("InstallCommandUsageExamples");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string InstallCommandUsageSummary
        {
            get { return GetString("InstallCommandUsageSummary"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary()
        {
            return GetString("InstallCommandUsageSummary");
        }

        /// <summary>
        /// The version of the package to install.
        /// </summary>
        internal static string InstallCommandVersionDescription
        {
            get { return GetString("InstallCommandVersionDescription"); }
        }

        /// <summary>
        /// The version of the package to install.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription()
        {
            return GetString("InstallCommandVersionDescription");
        }

        /// <summary>
        /// List all versions of a package. By default, only the latest package version is displayed.
        /// </summary>
        internal static string ListCommandAllVersionsDescription
        {
            get { return GetString("ListCommandAllVersionsDescription"); }
        }

        /// <summary>
        /// List all versions of a package. By default, only the latest package version is displayed.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription()
        {
            return GetString("ListCommandAllVersionsDescription");
        }

        /// <summary>
        /// Displays a list of packages from a given source. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used. If NuGet.config specifies no sources, uses the default NuGet feed.
        /// </summary>
        internal static string ListCommandDescription
        {
            get { return GetString("ListCommandDescription"); }
        }

        /// <summary>
        /// Displays a list of packages from a given source. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used. If NuGet.config specifies no sources, uses the default NuGet feed.
        /// </summary>
        internal static string FormatListCommandDescription()
        {
            return GetString("ListCommandDescription");
        }

        /// <summary>
        /// Allow prerelease packages to be shown.
        /// </summary>
        internal static string ListCommandPrerelease
        {
            get { return GetString("ListCommandPrerelease"); }
        }

        /// <summary>
        /// Allow prerelease packages to be shown.
        /// </summary>
        internal static string FormatListCommandPrerelease()
        {
            return GetString("ListCommandPrerelease");
        }

        /// <summary>
        /// A list of packages sources to search.
        /// </summary>
        internal static string ListCommandSourceDescription
        {
            get { return GetString("ListCommandSourceDescription"); }
        }

        /// <summary>
        /// A list of packages sources to search.
        /// </summary>
        internal static string FormatListCommandSourceDescription()
        {
            return GetString("ListCommandSourceDescription");
        }

        /// <summary>
        /// Specify optional search terms.
        /// </summary>
        internal static string ListCommandUsageDescription
        {
            get { return GetString("ListCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify optional search terms.
        /// </summary>
        internal static string FormatListCommandUsageDescription()
        {
            return GetString("ListCommandUsageDescription");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples
        {
            get { return GetString("ListCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples()
        {
            return GetString("ListCommandUsageExamples");
        }

        /// <summary>
        /// [search terms] [options]
        /// </summary>
        internal static string ListCommandUsageSummary
        {
            get { return GetString("ListCommandUsageSummary"); }
        }

        /// <summary>
        /// [search terms] [options]
        /// </summary>
        internal static string FormatListCommandUsageSummary()
        {
            return GetString("ListCommandUsageSummary");
        }

        /// <summary>
        /// Displays a detailed list of information for each package.
        /// </summary>
        internal static string ListCommandVerboseListDescription
        {
            get { return GetString("ListCommandVerboseListDescription"); }
        }

        /// <summary>
        /// Displays a detailed list of information for each package.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription()
        {
            return GetString("ListCommandVerboseListDescription");
        }

        /// <summary>
        /// Do not prompt for user input or confirmations.
        /// </summary>
        internal static string Option_NonInteractive
        {
            get { return GetString("Option_NonInteractive"); }
        }

        /// <summary>
        /// Do not prompt for user input or confirmations.
        /// </summary>
        internal static string FormatOption_NonInteractive()
        {
            return GetString("Option_NonInteractive");
        }

        /// <summary>
        /// Display this amount of details in the output: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity
        {
            get { return GetString("Option_Verbosity"); }
        }

        /// <summary>
        /// Display this amount of details in the output: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity()
        {
            return GetString("Option_Verbosity");
        }

        /// <summary>
        /// The base path of the files defined in the nuspec file.
        /// </summary>
        internal static string PackageCommandBasePathDescription
        {
            get { return GetString("PackageCommandBasePathDescription"); }
        }

        /// <summary>
        /// The base path of the files defined in the nuspec file.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription()
        {
            return GetString("PackageCommandBasePathDescription");
        }

        /// <summary>
        /// Determines if the project should be built before building the package.
        /// </summary>
        internal static string PackageCommandBuildDescription
        {
            get { return GetString("PackageCommandBuildDescription"); }
        }

        /// <summary>
        /// Determines if the project should be built before building the package.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription()
        {
            return GetString("PackageCommandBuildDescription");
        }

        /// <summary>
        /// Creates a NuGet package based on the specified nuspec or project file.
        /// </summary>
        internal static string PackageCommandDescription
        {
            get { return GetString("PackageCommandDescription"); }
        }

        /// <summary>
        /// Creates a NuGet package based on the specified nuspec or project file.
        /// </summary>
        internal static string FormatPackageCommandDescription()
        {
            return GetString("PackageCommandDescription");
        }

        /// <summary>
        /// Specifies one or more wildcard patterns to exclude when creating a package.
        /// </summary>
        internal static string PackageCommandExcludeDescription
        {
            get { return GetString("PackageCommandExcludeDescription"); }
        }

        /// <summary>
        /// Specifies one or more wildcard patterns to exclude when creating a package.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription()
        {
            return GetString("PackageCommandExcludeDescription");
        }

        /// <summary>
        /// Prevent inclusion of empty directories when building the package.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories"); }
        }

        /// <summary>
        /// Prevent inclusion of empty directories when building the package.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories()
        {
            return GetString("PackageCommandExcludeEmptyDirectories");
        }

        /// <summary>
        /// Prevent default exclusion of NuGet package files and files and folders starting with a dot e.g. .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes
        {
            get { return GetString("PackageCommandNoDefaultExcludes"); }
        }

        /// <summary>
        /// Prevent default exclusion of NuGet package files and files and folders starting with a dot e.g. .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes()
        {
            return GetString("PackageCommandNoDefaultExcludes");
        }

        /// <summary>
        /// Specify if the command should not run package analysis after building the package.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis
        {
            get { return GetString("PackageCommandNoRunAnalysis"); }
        }

        /// <summary>
        /// Specify if the command should not run package analysis after building the package.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis()
        {
            return GetString("PackageCommandNoRunAnalysis");
        }

        /// <summary>
        /// Specifies the directory for the created NuGet package file. If not specified, uses the current directory.
        /// </summary>
        internal static string PackageCommandOutputDirDescription
        {
            get { return GetString("PackageCommandOutputDirDescription"); }
        }

        /// <summary>
        /// Specifies the directory for the created NuGet package file. If not specified, uses the current directory.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription()
        {
            return GetString("PackageCommandOutputDirDescription");
        }

        /// <summary>
        /// Provides the ability to specify a semicolon ";" delimited list of properties when creating a package.
        /// </summary>
        internal static string PackageCommandPropertiesDescription
        {
            get { return GetString("PackageCommandPropertiesDescription"); }
        }

        /// <summary>
        /// Provides the ability to specify a semicolon ";" delimited list of properties when creating a package.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription()
        {
            return GetString("PackageCommandPropertiesDescription");
        }

        /// <summary>
        /// Determines if a package containing sources and symbols should be created. When specified with a nuspec, creates a regular NuGet package file and the corresponding symbols package.
        /// </summary>
        internal static string PackageCommandSymbolsDescription
        {
            get { return GetString("PackageCommandSymbolsDescription"); }
        }

        /// <summary>
        /// Determines if a package containing sources and symbols should be created. When specified with a nuspec, creates a regular NuGet package file and the corresponding symbols package.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription()
        {
            return GetString("PackageCommandSymbolsDescription");
        }

        /// <summary>
        /// Determines if the output files of the project should be in the tool folder. 
        /// </summary>
        internal static string PackageCommandToolDescription
        {
            get { return GetString("PackageCommandToolDescription"); }
        }

        /// <summary>
        /// Determines if the output files of the project should be in the tool folder. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription()
        {
            return GetString("PackageCommandToolDescription");
        }

        /// <summary>
        /// Specify the location of the nuspec or project file to create a package.
        /// </summary>
        internal static string PackageCommandUsageDescription
        {
            get { return GetString("PackageCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify the location of the nuspec or project file to create a package.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription()
        {
            return GetString("PackageCommandUsageDescription");
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string PackageCommandUsageSummary
        {
            get { return GetString("PackageCommandUsageSummary"); }
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary()
        {
            return GetString("PackageCommandUsageSummary");
        }

        /// <summary>
        /// Shows verbose output for package building.
        /// </summary>
        internal static string PackageCommandVerboseDescription
        {
            get { return GetString("PackageCommandVerboseDescription"); }
        }

        /// <summary>
        /// Shows verbose output for package building.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription()
        {
            return GetString("PackageCommandVerboseDescription");
        }

        /// <summary>
        /// Overrides the version number from the nuspec file.
        /// </summary>
        internal static string PackageCommandVersionDescription
        {
            get { return GetString("PackageCommandVersionDescription"); }
        }

        /// <summary>
        /// Overrides the version number from the nuspec file.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription()
        {
            return GetString("PackageCommandVersionDescription");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples
        {
            get { return GetString("PackCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples()
        {
            return GetString("PackCommandUsageExamples");
        }

        /// <summary>
        /// Pushes a package to the server and publishes it.
        /// </summary>
        internal static string PushCommandDescription
        {
            get { return GetString("PushCommandDescription"); }
        }

        /// <summary>
        /// Pushes a package to the server and publishes it.
        /// </summary>
        internal static string FormatPushCommandDescription()
        {
            return GetString("PushCommandDescription");
        }

        /// <summary>
        /// Specifies the server URL. If not specified, nuget.org is used unless DefaultPushSource config value is set in the NuGet config file.
        /// </summary>
        internal static string PushCommandSourceDescription
        {
            get { return GetString("PushCommandSourceDescription"); }
        }

        /// <summary>
        /// Specifies the server URL. If not specified, nuget.org is used unless DefaultPushSource config value is set in the NuGet config file.
        /// </summary>
        internal static string FormatPushCommandSourceDescription()
        {
            return GetString("PushCommandSourceDescription");
        }

        /// <summary>
        /// Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).
        /// </summary>
        internal static string PushCommandTimeoutDescription
        {
            get { return GetString("PushCommandTimeoutDescription"); }
        }

        /// <summary>
        /// Specifies the timeout for pushing to a server in seconds. Defaults to 300 seconds (5 minutes).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription()
        {
            return GetString("PushCommandTimeoutDescription");
        }

        /// <summary>
        /// Specify the path to the package and your API key to push the package to the server.
        /// </summary>
        internal static string PushCommandUsageDescription
        {
            get { return GetString("PushCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify the path to the package and your API key to push the package to the server.
        /// </summary>
        internal static string FormatPushCommandUsageDescription()
        {
            return GetString("PushCommandUsageDescription");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples
        {
            get { return GetString("PushCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples()
        {
            return GetString("PushCommandUsageExamples");
        }

        /// <summary>
        /// &lt;package path&gt; [API key] [options]
        /// </summary>
        internal static string PushCommandUsageSummary
        {
            get { return GetString("PushCommandUsageSummary"); }
        }

        /// <summary>
        /// &lt;package path&gt; [API key] [options]
        /// </summary>
        internal static string FormatPushCommandUsageSummary()
        {
            return GetString("PushCommandUsageSummary");
        }

        /// <summary>
        /// Saves an API key for a given server URL. When no URL is provided API key is saved for the NuGet gallery.
        /// </summary>
        internal static string SetApiKeyCommandDescription
        {
            get { return GetString("SetApiKeyCommandDescription"); }
        }

        /// <summary>
        /// Saves an API key for a given server URL. When no URL is provided API key is saved for the NuGet gallery.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription()
        {
            return GetString("SetApiKeyCommandDescription");
        }

        /// <summary>
        /// Server URL where the API key is valid.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription
        {
            get { return GetString("SetApiKeyCommandSourceDescription"); }
        }

        /// <summary>
        /// Server URL where the API key is valid.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription()
        {
            return GetString("SetApiKeyCommandSourceDescription");
        }

        /// <summary>
        /// Specify the API key to save and an optional URL to the server that provided the API key.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription
        {
            get { return GetString("SetApiKeyCommandUsageDescription"); }
        }

        /// <summary>
        /// Specify the API key to save and an optional URL to the server that provided the API key.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription()
        {
            return GetString("SetApiKeyCommandUsageDescription");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples
        {
            get { return GetString("SetApiKeyCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples()
        {
            return GetString("SetApiKeyCommandUsageExamples");
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary
        {
            get { return GetString("SetApiKeyCommandUsageSummary"); }
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary()
        {
            return GetString("SetApiKeyCommandUsageSummary");
        }

        /// <summary>
        /// Provides the ability to manage list of sources located in %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string SourcesCommandDescription
        {
            get { return GetString("SourcesCommandDescription"); }
        }

        /// <summary>
        /// Provides the ability to manage list of sources located in %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string FormatSourcesCommandDescription()
        {
            return GetString("SourcesCommandDescription");
        }

        /// <summary>
        /// Name of the source.
        /// </summary>
        internal static string SourcesCommandNameDescription
        {
            get { return GetString("SourcesCommandNameDescription"); }
        }

        /// <summary>
        /// Name of the source.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription()
        {
            return GetString("SourcesCommandNameDescription");
        }

        /// <summary>
        /// Password to be used when connecting to an authenticated source.
        /// </summary>
        internal static string SourcesCommandPasswordDescription
        {
            get { return GetString("SourcesCommandPasswordDescription"); }
        }

        /// <summary>
        /// Password to be used when connecting to an authenticated source.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription()
        {
            return GetString("SourcesCommandPasswordDescription");
        }

        /// <summary>
        /// Path to the package(s) source.
        /// </summary>
        internal static string SourcesCommandSourceDescription
        {
            get { return GetString("SourcesCommandSourceDescription"); }
        }

        /// <summary>
        /// Path to the package(s) source.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription()
        {
            return GetString("SourcesCommandSourceDescription");
        }

        /// <summary>
        /// Applies to the list action. Accepts two values: Detailed (the default) and Short.
        /// </summary>
        internal static string SourcesCommandFormatDescription
        {
            get { return GetString("SourcesCommandFormatDescription"); }
        }

        /// <summary>
        /// Applies to the list action. Accepts two values: Detailed (the default) and Short.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription()
        {
            return GetString("SourcesCommandFormatDescription");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Source [source]
        /// </summary>
        internal static string SourcesCommandUsageSummary
        {
            get { return GetString("SourcesCommandUsageSummary"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Source [source]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary()
        {
            return GetString("SourcesCommandUsageSummary");
        }

        /// <summary>
        /// UserName to be used when connecting to an authenticated source.
        /// </summary>
        internal static string SourcesCommandUserNameDescription
        {
            get { return GetString("SourcesCommandUserNameDescription"); }
        }

        /// <summary>
        /// UserName to be used when connecting to an authenticated source.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription()
        {
            return GetString("SourcesCommandUserNameDescription");
        }

        /// <summary>
        /// Assembly to use for metadata.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription
        {
            get { return GetString("SpecCommandAssemblyPathDescription"); }
        }

        /// <summary>
        /// Assembly to use for metadata.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription()
        {
            return GetString("SpecCommandAssemblyPathDescription");
        }

        /// <summary>
        /// Generates a nuspec for a new package. If this command is run in the same folder as a project file (.csproj, .vbproj, .fsproj), it will create a tokenized nuspec file.
        /// </summary>
        internal static string SpecCommandDescription
        {
            get { return GetString("SpecCommandDescription"); }
        }

        /// <summary>
        /// Generates a nuspec for a new package. If this command is run in the same folder as a project file (.csproj, .vbproj, .fsproj), it will create a tokenized nuspec file.
        /// </summary>
        internal static string FormatSpecCommandDescription()
        {
            return GetString("SpecCommandDescription");
        }

        /// <summary>
        /// Overwrite nuspec file if it exists.
        /// </summary>
        internal static string SpecCommandForceDescription
        {
            get { return GetString("SpecCommandForceDescription"); }
        }

        /// <summary>
        /// Overwrite nuspec file if it exists.
        /// </summary>
        internal static string FormatSpecCommandForceDescription()
        {
            return GetString("SpecCommandForceDescription");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples
        {
            get { return GetString("SpecCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples()
        {
            return GetString("SpecCommandUsageExamples");
        }

        /// <summary>
        /// [package id]
        /// </summary>
        internal static string SpecCommandUsageSummary
        {
            get { return GetString("SpecCommandUsageSummary"); }
        }

        /// <summary>
        /// [package id]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary()
        {
            return GetString("SpecCommandUsageSummary");
        }

        /// <summary>
        /// Update packages to latest available versions. This command also updates NuGet.exe itself.
        /// </summary>
        internal static string UpdateCommandDescription
        {
            get { return GetString("UpdateCommandDescription"); }
        }

        /// <summary>
        /// Update packages to latest available versions. This command also updates NuGet.exe itself.
        /// </summary>
        internal static string FormatUpdateCommandDescription()
        {
            return GetString("UpdateCommandDescription");
        }

        /// <summary>
        /// Package ids to update.
        /// </summary>
        internal static string UpdateCommandIdDescription
        {
            get { return GetString("UpdateCommandIdDescription"); }
        }

        /// <summary>
        /// Package ids to update.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription()
        {
            return GetString("UpdateCommandIdDescription");
        }

        /// <summary>
        /// Allows updating to prerelease versions. This flag is not required when updating prerelease packages that are already installed.
        /// </summary>
        internal static string UpdateCommandPrerelease
        {
            get { return GetString("UpdateCommandPrerelease"); }
        }

        /// <summary>
        /// Allows updating to prerelease versions. This flag is not required when updating prerelease packages that are already installed.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease()
        {
            return GetString("UpdateCommandPrerelease");
        }

        /// <summary>
        /// Path to the local packages folder (location where packages are installed).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription
        {
            get { return GetString("UpdateCommandRepositoryPathDescription"); }
        }

        /// <summary>
        /// Path to the local packages folder (location where packages are installed).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription()
        {
            return GetString("UpdateCommandRepositoryPathDescription");
        }

        /// <summary>
        /// Looks for updates with the highest version available within the same major and minor version as the installed package.
        /// </summary>
        internal static string UpdateCommandSafeDescription
        {
            get { return GetString("UpdateCommandSafeDescription"); }
        }

        /// <summary>
        /// Looks for updates with the highest version available within the same major and minor version as the installed package.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription()
        {
            return GetString("UpdateCommandSafeDescription");
        }

        /// <summary>
        /// Update the running NuGet.exe to the newest version available from the server.
        /// </summary>
        internal static string UpdateCommandSelfDescription
        {
            get { return GetString("UpdateCommandSelfDescription"); }
        }

        /// <summary>
        /// Update the running NuGet.exe to the newest version available from the server.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription()
        {
            return GetString("UpdateCommandSelfDescription");
        }

        /// <summary>
        /// A list of package sources to search for updates.
        /// </summary>
        internal static string UpdateCommandSourceDescription
        {
            get { return GetString("UpdateCommandSourceDescription"); }
        }

        /// <summary>
        /// A list of package sources to search for updates.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription()
        {
            return GetString("UpdateCommandSourceDescription");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples
        {
            get { return GetString("UpdateCommandUsageExamples"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples()
        {
            return GetString("UpdateCommandUsageExamples");
        }

        /// <summary>
        /// Show verbose output while updating.
        /// </summary>
        internal static string UpdateCommandVerboseDescription
        {
            get { return GetString("UpdateCommandVerboseDescription"); }
        }

        /// <summary>
        /// Show verbose output while updating.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription()
        {
            return GetString("UpdateCommandVerboseDescription");
        }

        /// <summary>
        /// The API key for the server.
        /// </summary>
        internal static string CommandApiKey
        {
            get { return GetString("CommandApiKey"); }
        }

        /// <summary>
        /// The API key for the server.
        /// </summary>
        internal static string FormatCommandApiKey()
        {
            return GetString("CommandApiKey");
        }

        /// <summary>
        /// NuGet's default configuration is obtained by loading %AppData%\NuGet\NuGet.config, then loading any nuget.config or .nuget\nuget.config starting from root of drive and ending in current directory.
        /// </summary>
        internal static string DefaultConfigDescription
        {
            get { return GetString("DefaultConfigDescription"); }
        }

        /// <summary>
        /// NuGet's default configuration is obtained by loading %AppData%\NuGet\NuGet.config, then loading any nuget.config or .nuget\nuget.config starting from root of drive and ending in current directory.
        /// </summary>
        internal static string FormatDefaultConfigDescription()
        {
            return GetString("DefaultConfigDescription");
        }

        /// <summary>
        /// Checks if package restore consent is granted before installing a package.
        /// </summary>
        internal static string InstallCommandRequireConsent
        {
            get { return GetString("InstallCommandRequireConsent"); }
        }

        /// <summary>
        /// Checks if package restore consent is granted before installing a package.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent()
        {
            return GetString("InstallCommandRequireConsent");
        }

        /// <summary>
        /// Solution root for package restore.
        /// </summary>
        internal static string InstallCommandSolutionDirectory
        {
            get { return GetString("InstallCommandSolutionDirectory"); }
        }

        /// <summary>
        /// Solution root for package restore.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory()
        {
            return GetString("InstallCommandSolutionDirectory");
        }

        /// <summary>
        /// The NuGet configuration file. If not specified, file %AppData%\NuGet\NuGet.config is used as configuration file.
        /// </summary>
        internal static string Option_ConfigFile
        {
            get { return GetString("Option_ConfigFile"); }
        }

        /// <summary>
        /// The NuGet configuration file. If not specified, file %AppData%\NuGet\NuGet.config is used as configuration file.
        /// </summary>
        internal static string FormatOption_ConfigFile()
        {
            return GetString("Option_ConfigFile");
        }

        /// <summary>
        /// Disable parallel processing of packages for this command.
        /// </summary>
        internal static string CommandDisableParallelProcessing
        {
            get { return GetString("CommandDisableParallelProcessing"); }
        }

        /// <summary>
        /// Disable parallel processing of packages for this command.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing()
        {
            return GetString("CommandDisableParallelProcessing");
        }

        /// <summary>
        /// Set the minClientVersion attribute for the created package.
        /// </summary>
        internal static string PackageCommandMinClientVersion
        {
            get { return GetString("PackageCommandMinClientVersion"); }
        }

        /// <summary>
        /// Set the minClientVersion attribute for the created package.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion()
        {
            return GetString("PackageCommandMinClientVersion");
        }

        /// <summary>
        /// Specifies types of files to save after package installation: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode
        {
            get { return GetString("CommandPackageSaveMode"); }
        }

        /// <summary>
        /// Specifies types of files to save after package installation: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode()
        {
            return GetString("CommandPackageSaveMode");
        }

        /// <summary>
        /// Include referenced projects either as dependencies or as part of the package.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects
        {
            get { return GetString("PackageCommandIncludeReferencedProjects"); }
        }

        /// <summary>
        /// Include referenced projects either as dependencies or as part of the package.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects()
        {
            return GetString("PackageCommandIncludeReferencedProjects");
        }

        /// <summary>
        /// Set default action when a file from a package already exists in the target project. Set to Overwrite to always overwrite files. Set to Ignore to skip files. If not specified, it will prompt for each conflicting file.
        /// </summary>
        internal static string UpdateCommandFileConflictAction
        {
            get { return GetString("UpdateCommandFileConflictAction"); }
        }

        /// <summary>
        /// Set default action when a file from a package already exists in the target project. Set to Overwrite to always overwrite files. Set to Ignore to skip files. If not specified, it will prompt for each conflicting file.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction()
        {
            return GetString("UpdateCommandFileConflictAction");
        }

        /// <summary>
        /// Enables storing portable package source credentials by disabling password encryption.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription"); }
        }

        /// <summary>
        /// Enables storing portable package source credentials by disabling password encryption.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription");
        }

        /// <summary>
        /// Restores NuGet packages.
        /// </summary>
        internal static string RestoreCommandDescription
        {
            get { return GetString("RestoreCommandDescription"); }
        }

        /// <summary>
        /// Restores NuGet packages.
        /// </summary>
        internal static string FormatRestoreCommandDescription()
        {
            return GetString("RestoreCommandDescription");
        }

        /// <summary>
        /// Specifies the packages folder.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory
        {
            get { return GetString("RestoreCommandPackagesDirectory"); }
        }

        /// <summary>
        /// Specifies the packages folder.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory()
        {
            return GetString("RestoreCommandPackagesDirectory");
        }

        /// <summary>
        /// Checks if package restore consent is granted before installing a package.
        /// </summary>
        internal static string RestoreCommandRequireConsent
        {
            get { return GetString("RestoreCommandRequireConsent"); }
        }

        /// <summary>
        /// Checks if package restore consent is granted before installing a package.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent()
        {
            return GetString("RestoreCommandRequireConsent");
        }

        /// <summary>
        /// Specifies the solution directory. Not valid when restoring packages for a solution.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory
        {
            get { return GetString("RestoreCommandSolutionDirectory"); }
        }

        /// <summary>
        /// Specifies the solution directory. Not valid when restoring packages for a solution.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory()
        {
            return GetString("RestoreCommandSolutionDirectory");
        }

        /// <summary>
        /// If a solution is specified, this command restores NuGet packages that are installed in the solution and in projects contained in the solution. Otherwise, the command restores packages listed in the specified packages.config file.
        /// </summary>
        internal static string RestoreCommandUsageDescription
        {
            get { return GetString("RestoreCommandUsageDescription"); }
        }

        /// <summary>
        /// If a solution is specified, this command restores NuGet packages that are installed in the solution and in projects contained in the solution. Otherwise, the command restores packages listed in the specified packages.config file.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription()
        {
            return GetString("RestoreCommandUsageDescription");
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string RestoreCommandUsageSummary
        {
            get { return GetString("RestoreCommandUsageSummary"); }
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary()
        {
            return GetString("RestoreCommandUsageSummary");
        }

        /// <summary>
        /// Získá nebo nastaví konfigurační hodnoty NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_csy
        {
            get { return GetString("ConfigCommandDesc_csy"); }
        }

        /// <summary>
        /// Získá nebo nastaví konfigurační hodnoty NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_csy()
        {
            return GetString("ConfigCommandDesc_csy");
        }

        /// <summary>
        /// Ruft NuGet-Konfigurationswerte ab oder legt sie fest.
        /// </summary>
        internal static string ConfigCommandDesc_deu
        {
            get { return GetString("ConfigCommandDesc_deu"); }
        }

        /// <summary>
        /// Ruft NuGet-Konfigurationswerte ab oder legt sie fest.
        /// </summary>
        internal static string FormatConfigCommandDesc_deu()
        {
            return GetString("ConfigCommandDesc_deu");
        }

        /// <summary>
        /// Obtiene o establece valores de configuración de NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_esp
        {
            get { return GetString("ConfigCommandDesc_esp"); }
        }

        /// <summary>
        /// Obtiene o establece valores de configuración de NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_esp()
        {
            return GetString("ConfigCommandDesc_esp");
        }

        /// <summary>
        /// Obtient ou définit les valeurs de configuration NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_fra
        {
            get { return GetString("ConfigCommandDesc_fra"); }
        }

        /// <summary>
        /// Obtient ou définit les valeurs de configuration NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_fra()
        {
            return GetString("ConfigCommandDesc_fra");
        }

        /// <summary>
        /// Ottenere o impostare  valori config NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_ita
        {
            get { return GetString("ConfigCommandDesc_ita"); }
        }

        /// <summary>
        /// Ottenere o impostare  valori config NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_ita()
        {
            return GetString("ConfigCommandDesc_ita");
        }

        /// <summary>
        /// NuGet 構成値を取得または設定します。
        /// </summary>
        internal static string ConfigCommandDesc_jpn
        {
            get { return GetString("ConfigCommandDesc_jpn"); }
        }

        /// <summary>
        /// NuGet 構成値を取得または設定します。
        /// </summary>
        internal static string FormatConfigCommandDesc_jpn()
        {
            return GetString("ConfigCommandDesc_jpn");
        }

        /// <summary>
        /// NuGet config 값을 가져오거나 설정합니다.
        /// </summary>
        internal static string ConfigCommandDesc_kor
        {
            get { return GetString("ConfigCommandDesc_kor"); }
        }

        /// <summary>
        /// NuGet config 값을 가져오거나 설정합니다.
        /// </summary>
        internal static string FormatConfigCommandDesc_kor()
        {
            return GetString("ConfigCommandDesc_kor");
        }

        /// <summary>
        /// Pobiera lub ustawia wartości konfiguracji pakietu NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_plk
        {
            get { return GetString("ConfigCommandDesc_plk"); }
        }

        /// <summary>
        /// Pobiera lub ustawia wartości konfiguracji pakietu NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_plk()
        {
            return GetString("ConfigCommandDesc_plk");
        }

        /// <summary>
        /// Obtém ou define os valores de configuração NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_ptb
        {
            get { return GetString("ConfigCommandDesc_ptb"); }
        }

        /// <summary>
        /// Obtém ou define os valores de configuração NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_ptb()
        {
            return GetString("ConfigCommandDesc_ptb");
        }

        /// <summary>
        /// Получает или задает значения конфигурации NuGet.
        /// </summary>
        internal static string ConfigCommandDesc_rus
        {
            get { return GetString("ConfigCommandDesc_rus"); }
        }

        /// <summary>
        /// Получает или задает значения конфигурации NuGet.
        /// </summary>
        internal static string FormatConfigCommandDesc_rus()
        {
            return GetString("ConfigCommandDesc_rus");
        }

        /// <summary>
        /// NuGet yapılandırma değerlerini alır veya ayarlar.
        /// </summary>
        internal static string ConfigCommandDesc_trk
        {
            get { return GetString("ConfigCommandDesc_trk"); }
        }

        /// <summary>
        /// NuGet yapılandırma değerlerini alır veya ayarlar.
        /// </summary>
        internal static string FormatConfigCommandDesc_trk()
        {
            return GetString("ConfigCommandDesc_trk");
        }

        /// <summary>
        /// 获取或设置 NuGet 配置值。
        /// </summary>
        internal static string ConfigCommandDesc_chs
        {
            get { return GetString("ConfigCommandDesc_chs"); }
        }

        /// <summary>
        /// 获取或设置 NuGet 配置值。
        /// </summary>
        internal static string FormatConfigCommandDesc_chs()
        {
            return GetString("ConfigCommandDesc_chs");
        }

        /// <summary>
        /// 取得或設定 NuGet 設定值。
        /// </summary>
        internal static string ConfigCommandDesc_cht
        {
            get { return GetString("ConfigCommandDesc_cht"); }
        }

        /// <summary>
        /// 取得或設定 NuGet 設定值。
        /// </summary>
        internal static string FormatConfigCommandDesc_cht()
        {
            return GetString("ConfigCommandDesc_cht");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_csy
        {
            get { return GetString("ConfigCommandExamples_csy"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_csy()
        {
            return GetString("ConfigCommandExamples_csy");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_deu
        {
            get { return GetString("ConfigCommandExamples_deu"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_deu()
        {
            return GetString("ConfigCommandExamples_deu");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_esp
        {
            get { return GetString("ConfigCommandExamples_esp"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_esp()
        {
            return GetString("ConfigCommandExamples_esp");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_fra
        {
            get { return GetString("ConfigCommandExamples_fra"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_fra()
        {
            return GetString("ConfigCommandExamples_fra");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_ita
        {
            get { return GetString("ConfigCommandExamples_ita"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_ita()
        {
            return GetString("ConfigCommandExamples_ita");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_jpn
        {
            get { return GetString("ConfigCommandExamples_jpn"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_jpn()
        {
            return GetString("ConfigCommandExamples_jpn");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_kor
        {
            get { return GetString("ConfigCommandExamples_kor"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_kor()
        {
            return GetString("ConfigCommandExamples_kor");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_plk
        {
            get { return GetString("ConfigCommandExamples_plk"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_plk()
        {
            return GetString("ConfigCommandExamples_plk");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_ptb
        {
            get { return GetString("ConfigCommandExamples_ptb"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_ptb()
        {
            return GetString("ConfigCommandExamples_ptb");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_rus
        {
            get { return GetString("ConfigCommandExamples_rus"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_rus()
        {
            return GetString("ConfigCommandExamples_rus");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_trk
        {
            get { return GetString("ConfigCommandExamples_trk"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_trk()
        {
            return GetString("ConfigCommandExamples_trk");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_chs
        {
            get { return GetString("ConfigCommandExamples_chs"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_chs()
        {
            return GetString("ConfigCommandExamples_chs");
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string ConfigCommandExamples_cht
        {
            get { return GetString("ConfigCommandExamples_cht"); }
        }

        /// <summary>
        /// nuget config -Set HTTP_PROXY=http://127.0.0.1 -Set HTTP_PROXY.USER=domain\user
        /// nuget.config HTTP_PROXY
        /// </summary>
        internal static string FormatConfigCommandExamples_cht()
        {
            return GetString("ConfigCommandExamples_cht");
        }

        /// <summary>
        /// Jedna nebo více dvojic klíč/hodnota, které mají být nastaveny v konfiguračním souboru
        /// </summary>
        internal static string ConfigCommandSetDesc_csy
        {
            get { return GetString("ConfigCommandSetDesc_csy"); }
        }

        /// <summary>
        /// Jedna nebo více dvojic klíč/hodnota, které mají být nastaveny v konfiguračním souboru
        /// </summary>
        internal static string FormatConfigCommandSetDesc_csy()
        {
            return GetString("ConfigCommandSetDesc_csy");
        }

        /// <summary>
        /// Mindestens ein Schlüssel-Wert-Paar, das in der Konfiguration festgelegt wird.
        /// </summary>
        internal static string ConfigCommandSetDesc_deu
        {
            get { return GetString("ConfigCommandSetDesc_deu"); }
        }

        /// <summary>
        /// Mindestens ein Schlüssel-Wert-Paar, das in der Konfiguration festgelegt wird.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_deu()
        {
            return GetString("ConfigCommandSetDesc_deu");
        }

        /// <summary>
        /// Se deben establecer uno o más pares clave-valor en configuración.
        /// </summary>
        internal static string ConfigCommandSetDesc_esp
        {
            get { return GetString("ConfigCommandSetDesc_esp"); }
        }

        /// <summary>
        /// Se deben establecer uno o más pares clave-valor en configuración.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_esp()
        {
            return GetString("ConfigCommandSetDesc_esp");
        }

        /// <summary>
        /// Une ou plusieurs paires clé-valeur doivent être configurées lors de la configuration.
        /// </summary>
        internal static string ConfigCommandSetDesc_fra
        {
            get { return GetString("ConfigCommandSetDesc_fra"); }
        }

        /// <summary>
        /// Une ou plusieurs paires clé-valeur doivent être configurées lors de la configuration.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_fra()
        {
            return GetString("ConfigCommandSetDesc_fra");
        }

        /// <summary>
        /// Impostare una o pi+u coppie di valore -key in config.
        /// </summary>
        internal static string ConfigCommandSetDesc_ita
        {
            get { return GetString("ConfigCommandSetDesc_ita"); }
        }

        /// <summary>
        /// Impostare una o pi+u coppie di valore -key in config.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_ita()
        {
            return GetString("ConfigCommandSetDesc_ita");
        }

        /// <summary>
        /// 構成で設定される 1 つまたは複数のキー値ペア
        /// </summary>
        internal static string ConfigCommandSetDesc_jpn
        {
            get { return GetString("ConfigCommandSetDesc_jpn"); }
        }

        /// <summary>
        /// 構成で設定される 1 つまたは複数のキー値ペア
        /// </summary>
        internal static string FormatConfigCommandSetDesc_jpn()
        {
            return GetString("ConfigCommandSetDesc_jpn");
        }

        /// <summary>
        /// config에서 설정되는 하나 이상의 키-값 쌍입니다.
        /// </summary>
        internal static string ConfigCommandSetDesc_kor
        {
            get { return GetString("ConfigCommandSetDesc_kor"); }
        }

        /// <summary>
        /// config에서 설정되는 하나 이상의 키-값 쌍입니다.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_kor()
        {
            return GetString("ConfigCommandSetDesc_kor");
        }

        /// <summary>
        /// W konfiguracji należy ustawić co najmniej jedną parę klucz-wartość.
        /// </summary>
        internal static string ConfigCommandSetDesc_plk
        {
            get { return GetString("ConfigCommandSetDesc_plk"); }
        }

        /// <summary>
        /// W konfiguracji należy ustawić co najmniej jedną parę klucz-wartość.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_plk()
        {
            return GetString("ConfigCommandSetDesc_plk");
        }

        /// <summary>
        /// nuget.config HTTP_PROXY "
        /// </summary>
        internal static string ConfigCommandSetDesc_ptb
        {
            get { return GetString("ConfigCommandSetDesc_ptb"); }
        }

        /// <summary>
        /// nuget.config HTTP_PROXY "
        /// </summary>
        internal static string FormatConfigCommandSetDesc_ptb()
        {
            return GetString("ConfigCommandSetDesc_ptb");
        }

        /// <summary>
        /// Одна или несколько пар ключ-значение, задаваемых в конфигурации.
        /// </summary>
        internal static string ConfigCommandSetDesc_rus
        {
            get { return GetString("ConfigCommandSetDesc_rus"); }
        }

        /// <summary>
        /// Одна или несколько пар ключ-значение, задаваемых в конфигурации.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_rus()
        {
            return GetString("ConfigCommandSetDesc_rus");
        }

        /// <summary>
        /// Yapılandırmada ayarlanacak bir veya daha fazla anahtar-değer çifti var.
        /// </summary>
        internal static string ConfigCommandSetDesc_trk
        {
            get { return GetString("ConfigCommandSetDesc_trk"); }
        }

        /// <summary>
        /// Yapılandırmada ayarlanacak bir veya daha fazla anahtar-değer çifti var.
        /// </summary>
        internal static string FormatConfigCommandSetDesc_trk()
        {
            return GetString("ConfigCommandSetDesc_trk");
        }

        /// <summary>
        /// 要在配置中设置的一个或多个键值对。
        /// </summary>
        internal static string ConfigCommandSetDesc_chs
        {
            get { return GetString("ConfigCommandSetDesc_chs"); }
        }

        /// <summary>
        /// 要在配置中设置的一个或多个键值对。
        /// </summary>
        internal static string FormatConfigCommandSetDesc_chs()
        {
            return GetString("ConfigCommandSetDesc_chs");
        }

        /// <summary>
        /// 要在設定中設定的一或多個索引鍵/值組。
        /// </summary>
        internal static string ConfigCommandSetDesc_cht
        {
            get { return GetString("ConfigCommandSetDesc_cht"); }
        }

        /// <summary>
        /// 要在設定中設定的一或多個索引鍵/值組。
        /// </summary>
        internal static string FormatConfigCommandSetDesc_cht()
        {
            return GetString("ConfigCommandSetDesc_cht");
        }

        /// <summary>
        /// Vrátí konfigurační hodnotu jako cestu. Při zadání argumentu -Set je tato možnost ignorována.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_csy
        {
            get { return GetString("ConfigCommandAsPathDesc_csy"); }
        }

        /// <summary>
        /// Vrátí konfigurační hodnotu jako cestu. Při zadání argumentu -Set je tato možnost ignorována.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_csy()
        {
            return GetString("ConfigCommandAsPathDesc_csy");
        }

        /// <summary>
        /// Gibt den Konfigurationswert als Pfad zurück. Diese Option wird ignoriert, wenn "-Set" angegeben wird.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_deu
        {
            get { return GetString("ConfigCommandAsPathDesc_deu"); }
        }

        /// <summary>
        /// Gibt den Konfigurationswert als Pfad zurück. Diese Option wird ignoriert, wenn "-Set" angegeben wird.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_deu()
        {
            return GetString("ConfigCommandAsPathDesc_deu");
        }

        /// <summary>
        /// Devuelve el valor de configuración como ruta de acceso. Esta opción se ignora cuando se especifica -Set.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_esp
        {
            get { return GetString("ConfigCommandAsPathDesc_esp"); }
        }

        /// <summary>
        /// Devuelve el valor de configuración como ruta de acceso. Esta opción se ignora cuando se especifica -Set.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_esp()
        {
            return GetString("ConfigCommandAsPathDesc_esp");
        }

        /// <summary>
        /// Retourne la valeur de configuration en tant que chemin d'accès. Cette option est ignorée lorsque -Set est spécifié.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_fra
        {
            get { return GetString("ConfigCommandAsPathDesc_fra"); }
        }

        /// <summary>
        /// Retourne la valeur de configuration en tant que chemin d'accès. Cette option est ignorée lorsque -Set est spécifié.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_fra()
        {
            return GetString("ConfigCommandAsPathDesc_fra");
        }

        /// <summary>
        /// Ritorna al valore config come path. Questa opzione è ignorata quando -Set è specificato.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_ita
        {
            get { return GetString("ConfigCommandAsPathDesc_ita"); }
        }

        /// <summary>
        /// Ritorna al valore config come path. Questa opzione è ignorata quando -Set è specificato.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_ita()
        {
            return GetString("ConfigCommandAsPathDesc_ita");
        }

        /// <summary>
        /// パスとして構成値を返します。-Set を指定すると、このオプションは無視されます。
        /// </summary>
        internal static string ConfigCommandAsPathDesc_jpn
        {
            get { return GetString("ConfigCommandAsPathDesc_jpn"); }
        }

        /// <summary>
        /// パスとして構成値を返します。-Set を指定すると、このオプションは無視されます。
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_jpn()
        {
            return GetString("ConfigCommandAsPathDesc_jpn");
        }

        /// <summary>
        /// config 값을 경로로 반환합니다. -Set가 지정된 경우 이 옵션은 무시됩니다.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_kor
        {
            get { return GetString("ConfigCommandAsPathDesc_kor"); }
        }

        /// <summary>
        /// config 값을 경로로 반환합니다. -Set가 지정된 경우 이 옵션은 무시됩니다.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_kor()
        {
            return GetString("ConfigCommandAsPathDesc_kor");
        }

        /// <summary>
        /// Zwraca wartość konfiguracji jako ścieżkę. Ta opcja jest ignorowana, gdy jest określona opcja -Set.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_plk
        {
            get { return GetString("ConfigCommandAsPathDesc_plk"); }
        }

        /// <summary>
        /// Zwraca wartość konfiguracji jako ścieżkę. Ta opcja jest ignorowana, gdy jest określona opcja -Set.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_plk()
        {
            return GetString("ConfigCommandAsPathDesc_plk");
        }

        /// <summary>
        /// Retorna o valor de configuração como um caminho. Esta opção é ignorada quando -Set é especificado.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_ptb
        {
            get { return GetString("ConfigCommandAsPathDesc_ptb"); }
        }

        /// <summary>
        /// Retorna o valor de configuração como um caminho. Esta opção é ignorada quando -Set é especificado.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_ptb()
        {
            return GetString("ConfigCommandAsPathDesc_ptb");
        }

        /// <summary>
        /// Возвращает значение конфигурации как путь. Этот параметр пропускается, если указан параметр -Set.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_rus
        {
            get { return GetString("ConfigCommandAsPathDesc_rus"); }
        }

        /// <summary>
        /// Возвращает значение конфигурации как путь. Этот параметр пропускается, если указан параметр -Set.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_rus()
        {
            return GetString("ConfigCommandAsPathDesc_rus");
        }

        /// <summary>
        /// Yapılandırma değerini yol olarak döndürür. -Set belirtildiğinde bu seçenek yok sayılır.
        /// </summary>
        internal static string ConfigCommandAsPathDesc_trk
        {
            get { return GetString("ConfigCommandAsPathDesc_trk"); }
        }

        /// <summary>
        /// Yapılandırma değerini yol olarak döndürür. -Set belirtildiğinde bu seçenek yok sayılır.
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_trk()
        {
            return GetString("ConfigCommandAsPathDesc_trk");
        }

        /// <summary>
        /// 返回配置值作为路径。指定 -Set 时，将忽略此选项。
        /// </summary>
        internal static string ConfigCommandAsPathDesc_chs
        {
            get { return GetString("ConfigCommandAsPathDesc_chs"); }
        }

        /// <summary>
        /// 返回配置值作为路径。指定 -Set 时，将忽略此选项。
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_chs()
        {
            return GetString("ConfigCommandAsPathDesc_chs");
        }

        /// <summary>
        /// 傳回設定值為路徑。此選項在指定 -Set 時會忽略。
        /// </summary>
        internal static string ConfigCommandAsPathDesc_cht
        {
            get { return GetString("ConfigCommandAsPathDesc_cht"); }
        }

        /// <summary>
        /// 傳回設定值為路徑。此選項在指定 -Set 時會忽略。
        /// </summary>
        internal static string FormatConfigCommandAsPathDesc_cht()
        {
            return GetString("ConfigCommandAsPathDesc_cht");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_csy
        {
            get { return GetString("ConfigCommandSummary_csy"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_csy()
        {
            return GetString("ConfigCommandSummary_csy");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_deu
        {
            get { return GetString("ConfigCommandSummary_deu"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_deu()
        {
            return GetString("ConfigCommandSummary_deu");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_esp
        {
            get { return GetString("ConfigCommandSummary_esp"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_esp()
        {
            return GetString("ConfigCommandSummary_esp");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_fra
        {
            get { return GetString("ConfigCommandSummary_fra"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_fra()
        {
            return GetString("ConfigCommandSummary_fra");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_ita
        {
            get { return GetString("ConfigCommandSummary_ita"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_ita()
        {
            return GetString("ConfigCommandSummary_ita");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_jpn
        {
            get { return GetString("ConfigCommandSummary_jpn"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_jpn()
        {
            return GetString("ConfigCommandSummary_jpn");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_kor
        {
            get { return GetString("ConfigCommandSummary_kor"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_kor()
        {
            return GetString("ConfigCommandSummary_kor");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_plk
        {
            get { return GetString("ConfigCommandSummary_plk"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_plk()
        {
            return GetString("ConfigCommandSummary_plk");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_ptb
        {
            get { return GetString("ConfigCommandSummary_ptb"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_ptb()
        {
            return GetString("ConfigCommandSummary_ptb");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_rus
        {
            get { return GetString("ConfigCommandSummary_rus"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_rus()
        {
            return GetString("ConfigCommandSummary_rus");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_trk
        {
            get { return GetString("ConfigCommandSummary_trk"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_trk()
        {
            return GetString("ConfigCommandSummary_trk");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_chs
        {
            get { return GetString("ConfigCommandSummary_chs"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_chs()
        {
            return GetString("ConfigCommandSummary_chs");
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string ConfigCommandSummary_cht
        {
            get { return GetString("ConfigCommandSummary_cht"); }
        }

        /// <summary>
        /// &lt;-Set name=value | name&gt;
        /// </summary>
        internal static string FormatConfigCommandSummary_cht()
        {
            return GetString("ConfigCommandSummary_cht");
        }

        /// <summary>
        /// Odstraní balíček ze serveru.
        /// </summary>
        internal static string DeleteCommandDescription_csy
        {
            get { return GetString("DeleteCommandDescription_csy"); }
        }

        /// <summary>
        /// Odstraní balíček ze serveru.
        /// </summary>
        internal static string FormatDeleteCommandDescription_csy()
        {
            return GetString("DeleteCommandDescription_csy");
        }

        /// <summary>
        /// Löscht ein Paket vom Server.
        /// </summary>
        internal static string DeleteCommandDescription_deu
        {
            get { return GetString("DeleteCommandDescription_deu"); }
        }

        /// <summary>
        /// Löscht ein Paket vom Server.
        /// </summary>
        internal static string FormatDeleteCommandDescription_deu()
        {
            return GetString("DeleteCommandDescription_deu");
        }

        /// <summary>
        /// Elimina un paquete del servidor.
        /// </summary>
        internal static string DeleteCommandDescription_esp
        {
            get { return GetString("DeleteCommandDescription_esp"); }
        }

        /// <summary>
        /// Elimina un paquete del servidor.
        /// </summary>
        internal static string FormatDeleteCommandDescription_esp()
        {
            return GetString("DeleteCommandDescription_esp");
        }

        /// <summary>
        /// Supprime un package du serveur.
        /// </summary>
        internal static string DeleteCommandDescription_fra
        {
            get { return GetString("DeleteCommandDescription_fra"); }
        }

        /// <summary>
        /// Supprime un package du serveur.
        /// </summary>
        internal static string FormatDeleteCommandDescription_fra()
        {
            return GetString("DeleteCommandDescription_fra");
        }

        /// <summary>
        /// Cancellare un pacchetto dal server.
        /// </summary>
        internal static string DeleteCommandDescription_ita
        {
            get { return GetString("DeleteCommandDescription_ita"); }
        }

        /// <summary>
        /// Cancellare un pacchetto dal server.
        /// </summary>
        internal static string FormatDeleteCommandDescription_ita()
        {
            return GetString("DeleteCommandDescription_ita");
        }

        /// <summary>
        /// サーバーからパッケージを削除します。
        /// </summary>
        internal static string DeleteCommandDescription_jpn
        {
            get { return GetString("DeleteCommandDescription_jpn"); }
        }

        /// <summary>
        /// サーバーからパッケージを削除します。
        /// </summary>
        internal static string FormatDeleteCommandDescription_jpn()
        {
            return GetString("DeleteCommandDescription_jpn");
        }

        /// <summary>
        /// 서버에서 패키지를 삭제합니다.
        /// </summary>
        internal static string DeleteCommandDescription_kor
        {
            get { return GetString("DeleteCommandDescription_kor"); }
        }

        /// <summary>
        /// 서버에서 패키지를 삭제합니다.
        /// </summary>
        internal static string FormatDeleteCommandDescription_kor()
        {
            return GetString("DeleteCommandDescription_kor");
        }

        /// <summary>
        /// Usuwa pakiet z serwera.
        /// </summary>
        internal static string DeleteCommandDescription_plk
        {
            get { return GetString("DeleteCommandDescription_plk"); }
        }

        /// <summary>
        /// Usuwa pakiet z serwera.
        /// </summary>
        internal static string FormatDeleteCommandDescription_plk()
        {
            return GetString("DeleteCommandDescription_plk");
        }

        /// <summary>
        /// Exclui um pacote do servidor.
        /// </summary>
        internal static string DeleteCommandDescription_ptb
        {
            get { return GetString("DeleteCommandDescription_ptb"); }
        }

        /// <summary>
        /// Exclui um pacote do servidor.
        /// </summary>
        internal static string FormatDeleteCommandDescription_ptb()
        {
            return GetString("DeleteCommandDescription_ptb");
        }

        /// <summary>
        /// Удаляет пакет с сервера.
        /// </summary>
        internal static string DeleteCommandDescription_rus
        {
            get { return GetString("DeleteCommandDescription_rus"); }
        }

        /// <summary>
        /// Удаляет пакет с сервера.
        /// </summary>
        internal static string FormatDeleteCommandDescription_rus()
        {
            return GetString("DeleteCommandDescription_rus");
        }

        /// <summary>
        /// Paketi sürücüden siler.
        /// </summary>
        internal static string DeleteCommandDescription_trk
        {
            get { return GetString("DeleteCommandDescription_trk"); }
        }

        /// <summary>
        /// Paketi sürücüden siler.
        /// </summary>
        internal static string FormatDeleteCommandDescription_trk()
        {
            return GetString("DeleteCommandDescription_trk");
        }

        /// <summary>
        /// 从服务器中删除程序包。
        /// </summary>
        internal static string DeleteCommandDescription_chs
        {
            get { return GetString("DeleteCommandDescription_chs"); }
        }

        /// <summary>
        /// 从服务器中删除程序包。
        /// </summary>
        internal static string FormatDeleteCommandDescription_chs()
        {
            return GetString("DeleteCommandDescription_chs");
        }

        /// <summary>
        /// 從伺服器刪除封裝。
        /// </summary>
        internal static string DeleteCommandDescription_cht
        {
            get { return GetString("DeleteCommandDescription_cht"); }
        }

        /// <summary>
        /// 從伺服器刪除封裝。
        /// </summary>
        internal static string FormatDeleteCommandDescription_cht()
        {
            return GetString("DeleteCommandDescription_cht");
        }

        /// <summary>
        /// Při odstraňování nezobrazovat výzvu
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_csy
        {
            get { return GetString("DeleteCommandNoPromptDescription_csy"); }
        }

        /// <summary>
        /// Při odstraňování nezobrazovat výzvu
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_csy()
        {
            return GetString("DeleteCommandNoPromptDescription_csy");
        }

        /// <summary>
        /// Keine Eingabeaufforderung beim Löschvorgang.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_deu
        {
            get { return GetString("DeleteCommandNoPromptDescription_deu"); }
        }

        /// <summary>
        /// Keine Eingabeaufforderung beim Löschvorgang.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_deu()
        {
            return GetString("DeleteCommandNoPromptDescription_deu");
        }

        /// <summary>
        /// No pedir confirmación al eliminarlo.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_esp
        {
            get { return GetString("DeleteCommandNoPromptDescription_esp"); }
        }

        /// <summary>
        /// No pedir confirmación al eliminarlo.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_esp()
        {
            return GetString("DeleteCommandNoPromptDescription_esp");
        }

        /// <summary>
        /// N'affichez pas d'invites lors des suppressions.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_fra
        {
            get { return GetString("DeleteCommandNoPromptDescription_fra"); }
        }

        /// <summary>
        /// N'affichez pas d'invites lors des suppressions.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_fra()
        {
            return GetString("DeleteCommandNoPromptDescription_fra");
        }

        /// <summary>
        /// Non richiedere quando si cancella.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_ita
        {
            get { return GetString("DeleteCommandNoPromptDescription_ita"); }
        }

        /// <summary>
        /// Non richiedere quando si cancella.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_ita()
        {
            return GetString("DeleteCommandNoPromptDescription_ita");
        }

        /// <summary>
        /// 削除時にプロンプトを表示しません。
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_jpn
        {
            get { return GetString("DeleteCommandNoPromptDescription_jpn"); }
        }

        /// <summary>
        /// 削除時にプロンプトを表示しません。
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_jpn()
        {
            return GetString("DeleteCommandNoPromptDescription_jpn");
        }

        /// <summary>
        /// 삭제 시 메시지를 표시하지 않습니다.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_kor
        {
            get { return GetString("DeleteCommandNoPromptDescription_kor"); }
        }

        /// <summary>
        /// 삭제 시 메시지를 표시하지 않습니다.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_kor()
        {
            return GetString("DeleteCommandNoPromptDescription_kor");
        }

        /// <summary>
        /// Bez monitów podczas usuwania.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_plk
        {
            get { return GetString("DeleteCommandNoPromptDescription_plk"); }
        }

        /// <summary>
        /// Bez monitów podczas usuwania.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_plk()
        {
            return GetString("DeleteCommandNoPromptDescription_plk");
        }

        /// <summary>
        /// Não avise ao excluir.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_ptb
        {
            get { return GetString("DeleteCommandNoPromptDescription_ptb"); }
        }

        /// <summary>
        /// Não avise ao excluir.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_ptb()
        {
            return GetString("DeleteCommandNoPromptDescription_ptb");
        }

        /// <summary>
        /// Перед удалением запрос не отображается.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_rus
        {
            get { return GetString("DeleteCommandNoPromptDescription_rus"); }
        }

        /// <summary>
        /// Перед удалением запрос не отображается.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_rus()
        {
            return GetString("DeleteCommandNoPromptDescription_rus");
        }

        /// <summary>
        /// Silerken sorma.
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_trk
        {
            get { return GetString("DeleteCommandNoPromptDescription_trk"); }
        }

        /// <summary>
        /// Silerken sorma.
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_trk()
        {
            return GetString("DeleteCommandNoPromptDescription_trk");
        }

        /// <summary>
        /// 删除时不提示。
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_chs
        {
            get { return GetString("DeleteCommandNoPromptDescription_chs"); }
        }

        /// <summary>
        /// 删除时不提示。
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_chs()
        {
            return GetString("DeleteCommandNoPromptDescription_chs");
        }

        /// <summary>
        /// 刪除時請勿提示。
        /// </summary>
        internal static string DeleteCommandNoPromptDescription_cht
        {
            get { return GetString("DeleteCommandNoPromptDescription_cht"); }
        }

        /// <summary>
        /// 刪除時請勿提示。
        /// </summary>
        internal static string FormatDeleteCommandNoPromptDescription_cht()
        {
            return GetString("DeleteCommandNoPromptDescription_cht");
        }

        /// <summary>
        /// Určuje adresu URL serveru.
        /// </summary>
        internal static string DeleteCommandSourceDescription_csy
        {
            get { return GetString("DeleteCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Určuje adresu URL serveru.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_csy()
        {
            return GetString("DeleteCommandSourceDescription_csy");
        }

        /// <summary>
        /// Gibt die Server-URL an.
        /// </summary>
        internal static string DeleteCommandSourceDescription_deu
        {
            get { return GetString("DeleteCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Gibt die Server-URL an.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_deu()
        {
            return GetString("DeleteCommandSourceDescription_deu");
        }

        /// <summary>
        /// Especifica la URL del servidor.
        /// </summary>
        internal static string DeleteCommandSourceDescription_esp
        {
            get { return GetString("DeleteCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Especifica la URL del servidor.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_esp()
        {
            return GetString("DeleteCommandSourceDescription_esp");
        }

        /// <summary>
        /// Spécifie l'URL du serveur.
        /// </summary>
        internal static string DeleteCommandSourceDescription_fra
        {
            get { return GetString("DeleteCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Spécifie l'URL du serveur.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_fra()
        {
            return GetString("DeleteCommandSourceDescription_fra");
        }

        /// <summary>
        /// Specifica il server URL.
        /// </summary>
        internal static string DeleteCommandSourceDescription_ita
        {
            get { return GetString("DeleteCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Specifica il server URL.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_ita()
        {
            return GetString("DeleteCommandSourceDescription_ita");
        }

        /// <summary>
        /// サーバーの URL を指定します。
        /// </summary>
        internal static string DeleteCommandSourceDescription_jpn
        {
            get { return GetString("DeleteCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// サーバーの URL を指定します。
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_jpn()
        {
            return GetString("DeleteCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 서버 URL을 지정합니다.
        /// </summary>
        internal static string DeleteCommandSourceDescription_kor
        {
            get { return GetString("DeleteCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 서버 URL을 지정합니다.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_kor()
        {
            return GetString("DeleteCommandSourceDescription_kor");
        }

        /// <summary>
        /// Określa adres URL serwera.
        /// </summary>
        internal static string DeleteCommandSourceDescription_plk
        {
            get { return GetString("DeleteCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Określa adres URL serwera.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_plk()
        {
            return GetString("DeleteCommandSourceDescription_plk");
        }

        /// <summary>
        /// Especifica o URL do servidor.
        /// </summary>
        internal static string DeleteCommandSourceDescription_ptb
        {
            get { return GetString("DeleteCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Especifica o URL do servidor.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_ptb()
        {
            return GetString("DeleteCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Указывает URL-адрес сервера.
        /// </summary>
        internal static string DeleteCommandSourceDescription_rus
        {
            get { return GetString("DeleteCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Указывает URL-адрес сервера.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_rus()
        {
            return GetString("DeleteCommandSourceDescription_rus");
        }

        /// <summary>
        /// Sunucu URL'sini belirtir.
        /// </summary>
        internal static string DeleteCommandSourceDescription_trk
        {
            get { return GetString("DeleteCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Sunucu URL'sini belirtir.
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_trk()
        {
            return GetString("DeleteCommandSourceDescription_trk");
        }

        /// <summary>
        /// 指定服务器 URL。
        /// </summary>
        internal static string DeleteCommandSourceDescription_chs
        {
            get { return GetString("DeleteCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 指定服务器 URL。
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_chs()
        {
            return GetString("DeleteCommandSourceDescription_chs");
        }

        /// <summary>
        /// 指定伺服器 URL。
        /// </summary>
        internal static string DeleteCommandSourceDescription_cht
        {
            get { return GetString("DeleteCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 指定伺服器 URL。
        /// </summary>
        internal static string FormatDeleteCommandSourceDescription_cht()
        {
            return GetString("DeleteCommandSourceDescription_cht");
        }

        /// <summary>
        /// Zadejte ID a verzi balíčku, který má být odstraněn ze serveru.
        /// </summary>
        internal static string DeleteCommandUsageDescription_csy
        {
            get { return GetString("DeleteCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Zadejte ID a verzi balíčku, který má být odstraněn ze serveru.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_csy()
        {
            return GetString("DeleteCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie die ID und die Version des Pakets an, das vom Server gelöscht werden soll.
        /// </summary>
        internal static string DeleteCommandUsageDescription_deu
        {
            get { return GetString("DeleteCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie die ID und die Version des Pakets an, das vom Server gelöscht werden soll.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_deu()
        {
            return GetString("DeleteCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar el id. y la versión del paquete para eliminarlo del servidor.
        /// </summary>
        internal static string DeleteCommandUsageDescription_esp
        {
            get { return GetString("DeleteCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar el id. y la versión del paquete para eliminarlo del servidor.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_esp()
        {
            return GetString("DeleteCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez l'ID et la version du package à supprimer du serveur.
        /// </summary>
        internal static string DeleteCommandUsageDescription_fra
        {
            get { return GetString("DeleteCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez l'ID et la version du package à supprimer du serveur.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_fra()
        {
            return GetString("DeleteCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specificare Id e versione del pacchetto da cancellare dal server.
        /// </summary>
        internal static string DeleteCommandUsageDescription_ita
        {
            get { return GetString("DeleteCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specificare Id e versione del pacchetto da cancellare dal server.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_ita()
        {
            return GetString("DeleteCommandUsageDescription_ita");
        }

        /// <summary>
        /// サーバーから削除するパッケージの ID とパッケージを指定します。
        /// </summary>
        internal static string DeleteCommandUsageDescription_jpn
        {
            get { return GetString("DeleteCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// サーバーから削除するパッケージの ID とパッケージを指定します。
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_jpn()
        {
            return GetString("DeleteCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 서버에서 삭제할 패키지의 ID 및 버전을 지정합니다.
        /// </summary>
        internal static string DeleteCommandUsageDescription_kor
        {
            get { return GetString("DeleteCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 서버에서 삭제할 패키지의 ID 및 버전을 지정합니다.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_kor()
        {
            return GetString("DeleteCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określ identyfikator i wersję pakietu, który chcesz usunąć z serwera.
        /// </summary>
        internal static string DeleteCommandUsageDescription_plk
        {
            get { return GetString("DeleteCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określ identyfikator i wersję pakietu, który chcesz usunąć z serwera.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_plk()
        {
            return GetString("DeleteCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especifique a ID e a versão do pacote a excluir do servidor.
        /// </summary>
        internal static string DeleteCommandUsageDescription_ptb
        {
            get { return GetString("DeleteCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especifique a ID e a versão do pacote a excluir do servidor.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_ptb()
        {
            return GetString("DeleteCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Укажите идентификатор и версию пакета, чтобы удалить его с сервера.
        /// </summary>
        internal static string DeleteCommandUsageDescription_rus
        {
            get { return GetString("DeleteCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Укажите идентификатор и версию пакета, чтобы удалить его с сервера.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_rus()
        {
            return GetString("DeleteCommandUsageDescription_rus");
        }

        /// <summary>
        /// Sunucudan silinecek paketin kimliğini ve sürümünü belirtin.
        /// </summary>
        internal static string DeleteCommandUsageDescription_trk
        {
            get { return GetString("DeleteCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Sunucudan silinecek paketin kimliğini ve sürümünü belirtin.
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_trk()
        {
            return GetString("DeleteCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定要从服务器中删除的程序包的 ID 和版本。
        /// </summary>
        internal static string DeleteCommandUsageDescription_chs
        {
            get { return GetString("DeleteCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定要从服务器中删除的程序包的 ID 和版本。
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_chs()
        {
            return GetString("DeleteCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定要從伺服器刪除的封裝 ID 和版本。
        /// </summary>
        internal static string DeleteCommandUsageDescription_cht
        {
            get { return GetString("DeleteCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定要從伺服器刪除的封裝 ID 和版本。
        /// </summary>
        internal static string FormatDeleteCommandUsageDescription_cht()
        {
            return GetString("DeleteCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_csy
        {
            get { return GetString("DeleteCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_csy()
        {
            return GetString("DeleteCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_deu
        {
            get { return GetString("DeleteCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_deu()
        {
            return GetString("DeleteCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_esp
        {
            get { return GetString("DeleteCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_esp()
        {
            return GetString("DeleteCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_fra
        {
            get { return GetString("DeleteCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_fra()
        {
            return GetString("DeleteCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_ita
        {
            get { return GetString("DeleteCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_ita()
        {
            return GetString("DeleteCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_jpn
        {
            get { return GetString("DeleteCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_jpn()
        {
            return GetString("DeleteCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_kor
        {
            get { return GetString("DeleteCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_kor()
        {
            return GetString("DeleteCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_plk
        {
            get { return GetString("DeleteCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_plk()
        {
            return GetString("DeleteCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_ptb
        {
            get { return GetString("DeleteCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_ptb()
        {
            return GetString("DeleteCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_rus
        {
            get { return GetString("DeleteCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_rus()
        {
            return GetString("DeleteCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_trk
        {
            get { return GetString("DeleteCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_trk()
        {
            return GetString("DeleteCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_chs
        {
            get { return GetString("DeleteCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_chs()
        {
            return GetString("DeleteCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string DeleteCommandUsageExamples_cht
        {
            get { return GetString("DeleteCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget delete MyPackage 1.0
        ///     
        /// nuget delete MyPackage 1.0 -NoPrompt
        /// </summary>
        internal static string FormatDeleteCommandUsageExamples_cht()
        {
            return GetString("DeleteCommandUsageExamples_cht");
        }

        /// <summary>
        /// &lt;ID balíčku&gt; &lt;verze balíčku&gt; [klíč API] [možnosti]
        /// </summary>
        internal static string DeleteCommandUsageSummary_csy
        {
            get { return GetString("DeleteCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// &lt;ID balíčku&gt; &lt;verze balíčku&gt; [klíč API] [možnosti]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_csy()
        {
            return GetString("DeleteCommandUsageSummary_csy");
        }

        /// <summary>
        /// &lt;Paket-ID&gt; &lt;Paketversion&gt; [API-Schlüssel] [Optionen]
        /// </summary>
        internal static string DeleteCommandUsageSummary_deu
        {
            get { return GetString("DeleteCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// &lt;Paket-ID&gt; &lt;Paketversion&gt; [API-Schlüssel] [Optionen]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_deu()
        {
            return GetString("DeleteCommandUsageSummary_deu");
        }

        /// <summary>
        /// &lt;id. del paquete&gt; &lt;versión del paquete&gt; [clave API] [opciones]
        /// </summary>
        internal static string DeleteCommandUsageSummary_esp
        {
            get { return GetString("DeleteCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// &lt;id. del paquete&gt; &lt;versión del paquete&gt; [clave API] [opciones]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_esp()
        {
            return GetString("DeleteCommandUsageSummary_esp");
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [@@@Clé API] [@@@options]
        /// </summary>
        internal static string DeleteCommandUsageSummary_fra
        {
            get { return GetString("DeleteCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [@@@Clé API] [@@@options]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_fra()
        {
            return GetString("DeleteCommandUsageSummary_fra");
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string DeleteCommandUsageSummary_ita
        {
            get { return GetString("DeleteCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_ita()
        {
            return GetString("DeleteCommandUsageSummary_ita");
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string DeleteCommandUsageSummary_jpn
        {
            get { return GetString("DeleteCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API Key] [options]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_jpn()
        {
            return GetString("DeleteCommandUsageSummary_jpn");
        }

        /// <summary>
        /// &lt;패키지 ID&gt; &lt;패키지 버전&gt; [API 키] [옵션]
        /// </summary>
        internal static string DeleteCommandUsageSummary_kor
        {
            get { return GetString("DeleteCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// &lt;패키지 ID&gt; &lt;패키지 버전&gt; [API 키] [옵션]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_kor()
        {
            return GetString("DeleteCommandUsageSummary_kor");
        }

        /// <summary>
        /// &lt;identyfikator pakietu&gt; &lt;wersja pakietu&gt; [klucz interfejsu API] [opcje]
        /// </summary>
        internal static string DeleteCommandUsageSummary_plk
        {
            get { return GetString("DeleteCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// &lt;identyfikator pakietu&gt; &lt;wersja pakietu&gt; [klucz interfejsu API] [opcje]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_plk()
        {
            return GetString("DeleteCommandUsageSummary_plk");
        }

        /// <summary>
        /// &lt;Id do pacote&gt; &lt;versão do pacote&gt; [Chave de API] [opções]
        /// </summary>
        internal static string DeleteCommandUsageSummary_ptb
        {
            get { return GetString("DeleteCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// &lt;Id do pacote&gt; &lt;versão do pacote&gt; [Chave de API] [opções]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_ptb()
        {
            return GetString("DeleteCommandUsageSummary_ptb");
        }

        /// <summary>
        /// &lt;идентификатор пакета&gt; &lt;версия пакета&gt; [ключ API] [параметры]
        /// </summary>
        internal static string DeleteCommandUsageSummary_rus
        {
            get { return GetString("DeleteCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// &lt;идентификатор пакета&gt; &lt;версия пакета&gt; [ключ API] [параметры]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_rus()
        {
            return GetString("DeleteCommandUsageSummary_rus");
        }

        /// <summary>
        /// &lt;paket kimliği&gt; &lt;paket sürümü&gt; [API Anahtarı] [seçenekler]
        /// </summary>
        internal static string DeleteCommandUsageSummary_trk
        {
            get { return GetString("DeleteCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// &lt;paket kimliği&gt; &lt;paket sürümü&gt; [API Anahtarı] [seçenekler]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_trk()
        {
            return GetString("DeleteCommandUsageSummary_trk");
        }

        /// <summary>
        /// &lt;程序包 ID&gt; &lt;程序包版本&gt; [API 密钥] [选项]
        /// </summary>
        internal static string DeleteCommandUsageSummary_chs
        {
            get { return GetString("DeleteCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// &lt;程序包 ID&gt; &lt;程序包版本&gt; [API 密钥] [选项]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_chs()
        {
            return GetString("DeleteCommandUsageSummary_chs");
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API 索引鍵] [選項]
        /// </summary>
        internal static string DeleteCommandUsageSummary_cht
        {
            get { return GetString("DeleteCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// &lt;package Id&gt; &lt;package version&gt; [API 索引鍵] [選項]
        /// </summary>
        internal static string FormatDeleteCommandUsageSummary_cht()
        {
            return GetString("DeleteCommandUsageSummary_cht");
        }

        /// <summary>
        /// Vytiskne podrobnou nápovědu ke všem dostupným příkazům.
        /// </summary>
        internal static string HelpCommandAll_csy
        {
            get { return GetString("HelpCommandAll_csy"); }
        }

        /// <summary>
        /// Vytiskne podrobnou nápovědu ke všem dostupným příkazům.
        /// </summary>
        internal static string FormatHelpCommandAll_csy()
        {
            return GetString("HelpCommandAll_csy");
        }

        /// <summary>
        /// Ausführliche Hilfe für alle verfügbaren Befehle ausgeben.
        /// </summary>
        internal static string HelpCommandAll_deu
        {
            get { return GetString("HelpCommandAll_deu"); }
        }

        /// <summary>
        /// Ausführliche Hilfe für alle verfügbaren Befehle ausgeben.
        /// </summary>
        internal static string FormatHelpCommandAll_deu()
        {
            return GetString("HelpCommandAll_deu");
        }

        /// <summary>
        /// Imprimir ayuda detallada de todos los comandos disponibles.
        /// </summary>
        internal static string HelpCommandAll_esp
        {
            get { return GetString("HelpCommandAll_esp"); }
        }

        /// <summary>
        /// Imprimir ayuda detallada de todos los comandos disponibles.
        /// </summary>
        internal static string FormatHelpCommandAll_esp()
        {
            return GetString("HelpCommandAll_esp");
        }

        /// <summary>
        /// Imprimez l'aide détaillée correspondante à l'ensemble des commandes disponibles.
        /// </summary>
        internal static string HelpCommandAll_fra
        {
            get { return GetString("HelpCommandAll_fra"); }
        }

        /// <summary>
        /// Imprimez l'aide détaillée correspondante à l'ensemble des commandes disponibles.
        /// </summary>
        internal static string FormatHelpCommandAll_fra()
        {
            return GetString("HelpCommandAll_fra");
        }

        /// <summary>
        /// Stampare aiutoper tutti i comandi disponibili.
        /// </summary>
        internal static string HelpCommandAll_ita
        {
            get { return GetString("HelpCommandAll_ita"); }
        }

        /// <summary>
        /// Stampare aiutoper tutti i comandi disponibili.
        /// </summary>
        internal static string FormatHelpCommandAll_ita()
        {
            return GetString("HelpCommandAll_ita");
        }

        /// <summary>
        /// 使用できるすべてのコマンドについては、詳細なヘルプを印刷してください。
        /// </summary>
        internal static string HelpCommandAll_jpn
        {
            get { return GetString("HelpCommandAll_jpn"); }
        }

        /// <summary>
        /// 使用できるすべてのコマンドについては、詳細なヘルプを印刷してください。
        /// </summary>
        internal static string FormatHelpCommandAll_jpn()
        {
            return GetString("HelpCommandAll_jpn");
        }

        /// <summary>
        /// 사용 가능한 모든 명령에 대한 자세한 도움말을 인쇄합니다.
        /// </summary>
        internal static string HelpCommandAll_kor
        {
            get { return GetString("HelpCommandAll_kor"); }
        }

        /// <summary>
        /// 사용 가능한 모든 명령에 대한 자세한 도움말을 인쇄합니다.
        /// </summary>
        internal static string FormatHelpCommandAll_kor()
        {
            return GetString("HelpCommandAll_kor");
        }

        /// <summary>
        /// Wydrukuj szczegółową pomoc dla wszystkich dostępnych poleceń.
        /// </summary>
        internal static string HelpCommandAll_plk
        {
            get { return GetString("HelpCommandAll_plk"); }
        }

        /// <summary>
        /// Wydrukuj szczegółową pomoc dla wszystkich dostępnych poleceń.
        /// </summary>
        internal static string FormatHelpCommandAll_plk()
        {
            return GetString("HelpCommandAll_plk");
        }

        /// <summary>
        /// Imprimir ajuda detalhada para todos os comandos disponíveis.
        /// </summary>
        internal static string HelpCommandAll_ptb
        {
            get { return GetString("HelpCommandAll_ptb"); }
        }

        /// <summary>
        /// Imprimir ajuda detalhada para todos os comandos disponíveis.
        /// </summary>
        internal static string FormatHelpCommandAll_ptb()
        {
            return GetString("HelpCommandAll_ptb");
        }

        /// <summary>
        /// Выводит на печать подробную справку по всем доступным командам.
        /// </summary>
        internal static string HelpCommandAll_rus
        {
            get { return GetString("HelpCommandAll_rus"); }
        }

        /// <summary>
        /// Выводит на печать подробную справку по всем доступным командам.
        /// </summary>
        internal static string FormatHelpCommandAll_rus()
        {
            return GetString("HelpCommandAll_rus");
        }

        /// <summary>
        /// Mevcut tüm komutlar için ayrıntılı yardımı yazdır.
        /// </summary>
        internal static string HelpCommandAll_trk
        {
            get { return GetString("HelpCommandAll_trk"); }
        }

        /// <summary>
        /// Mevcut tüm komutlar için ayrıntılı yardımı yazdır.
        /// </summary>
        internal static string FormatHelpCommandAll_trk()
        {
            return GetString("HelpCommandAll_trk");
        }

        /// <summary>
        /// 打印所有可用命令的详细帮助。
        /// </summary>
        internal static string HelpCommandAll_chs
        {
            get { return GetString("HelpCommandAll_chs"); }
        }

        /// <summary>
        /// 打印所有可用命令的详细帮助。
        /// </summary>
        internal static string FormatHelpCommandAll_chs()
        {
            return GetString("HelpCommandAll_chs");
        }

        /// <summary>
        /// 列印所有可用命令的詳細說明。
        /// </summary>
        internal static string HelpCommandAll_cht
        {
            get { return GetString("HelpCommandAll_cht"); }
        }

        /// <summary>
        /// 列印所有可用命令的詳細說明。
        /// </summary>
        internal static string FormatHelpCommandAll_cht()
        {
            return GetString("HelpCommandAll_cht");
        }

        /// <summary>
        /// Zobrazí obecné informace nápovědy a informace nápovědy k ostatním příkazům.
        /// </summary>
        internal static string HelpCommandDescription_csy
        {
            get { return GetString("HelpCommandDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí obecné informace nápovědy a informace nápovědy k ostatním příkazům.
        /// </summary>
        internal static string FormatHelpCommandDescription_csy()
        {
            return GetString("HelpCommandDescription_csy");
        }

        /// <summary>
        /// Zeigt allgemeine Hilfeinformationen und Hilfeinformationen zu anderen Befehlen an.
        /// </summary>
        internal static string HelpCommandDescription_deu
        {
            get { return GetString("HelpCommandDescription_deu"); }
        }

        /// <summary>
        /// Zeigt allgemeine Hilfeinformationen und Hilfeinformationen zu anderen Befehlen an.
        /// </summary>
        internal static string FormatHelpCommandDescription_deu()
        {
            return GetString("HelpCommandDescription_deu");
        }

        /// <summary>
        /// Muestra información de ayuda general e información de ayuda de los otros comandos.
        /// </summary>
        internal static string HelpCommandDescription_esp
        {
            get { return GetString("HelpCommandDescription_esp"); }
        }

        /// <summary>
        /// Muestra información de ayuda general e información de ayuda de los otros comandos.
        /// </summary>
        internal static string FormatHelpCommandDescription_esp()
        {
            return GetString("HelpCommandDescription_esp");
        }

        /// <summary>
        /// Affiche les informations d'aide générale et les informations d'aide relatives à d'autres commandes.
        /// </summary>
        internal static string HelpCommandDescription_fra
        {
            get { return GetString("HelpCommandDescription_fra"); }
        }

        /// <summary>
        /// Affiche les informations d'aide générale et les informations d'aide relatives à d'autres commandes.
        /// </summary>
        internal static string FormatHelpCommandDescription_fra()
        {
            return GetString("HelpCommandDescription_fra");
        }

        /// <summary>
        /// Mostra informazioni generali di aiuto su altri comandi.
        /// </summary>
        internal static string HelpCommandDescription_ita
        {
            get { return GetString("HelpCommandDescription_ita"); }
        }

        /// <summary>
        /// Mostra informazioni generali di aiuto su altri comandi.
        /// </summary>
        internal static string FormatHelpCommandDescription_ita()
        {
            return GetString("HelpCommandDescription_ita");
        }

        /// <summary>
        /// 全般的なヘルプ情報と他のコマンドに関するヘルプ情報を表示します。
        /// </summary>
        internal static string HelpCommandDescription_jpn
        {
            get { return GetString("HelpCommandDescription_jpn"); }
        }

        /// <summary>
        /// 全般的なヘルプ情報と他のコマンドに関するヘルプ情報を表示します。
        /// </summary>
        internal static string FormatHelpCommandDescription_jpn()
        {
            return GetString("HelpCommandDescription_jpn");
        }

        /// <summary>
        /// 일반적인 도움말 정보 및 다른 명령에 대한 도움말 정보를 표시합니다.
        /// </summary>
        internal static string HelpCommandDescription_kor
        {
            get { return GetString("HelpCommandDescription_kor"); }
        }

        /// <summary>
        /// 일반적인 도움말 정보 및 다른 명령에 대한 도움말 정보를 표시합니다.
        /// </summary>
        internal static string FormatHelpCommandDescription_kor()
        {
            return GetString("HelpCommandDescription_kor");
        }

        /// <summary>
        /// Wyświetla ogólne informacje pomocy oraz informacje pomocy na temat innych poleceń.
        /// </summary>
        internal static string HelpCommandDescription_plk
        {
            get { return GetString("HelpCommandDescription_plk"); }
        }

        /// <summary>
        /// Wyświetla ogólne informacje pomocy oraz informacje pomocy na temat innych poleceń.
        /// </summary>
        internal static string FormatHelpCommandDescription_plk()
        {
            return GetString("HelpCommandDescription_plk");
        }

        /// <summary>
        /// Exibe informações de ajuda em geral e informações de ajuda sobre outros comandos.
        /// </summary>
        internal static string HelpCommandDescription_ptb
        {
            get { return GetString("HelpCommandDescription_ptb"); }
        }

        /// <summary>
        /// Exibe informações de ajuda em geral e informações de ajuda sobre outros comandos.
        /// </summary>
        internal static string FormatHelpCommandDescription_ptb()
        {
            return GetString("HelpCommandDescription_ptb");
        }

        /// <summary>
        /// Отображает общую справочную информацию о других командах.
        /// </summary>
        internal static string HelpCommandDescription_rus
        {
            get { return GetString("HelpCommandDescription_rus"); }
        }

        /// <summary>
        /// Отображает общую справочную информацию о других командах.
        /// </summary>
        internal static string FormatHelpCommandDescription_rus()
        {
            return GetString("HelpCommandDescription_rus");
        }

        /// <summary>
        /// Genel yardım bilgilerini ve diğer komutlarla ilgili yardım bilgilerini görüntüler.
        /// </summary>
        internal static string HelpCommandDescription_trk
        {
            get { return GetString("HelpCommandDescription_trk"); }
        }

        /// <summary>
        /// Genel yardım bilgilerini ve diğer komutlarla ilgili yardım bilgilerini görüntüler.
        /// </summary>
        internal static string FormatHelpCommandDescription_trk()
        {
            return GetString("HelpCommandDescription_trk");
        }

        /// <summary>
        /// 显示一般帮助信息，以及有关其他命令的帮助信息。
        /// </summary>
        internal static string HelpCommandDescription_chs
        {
            get { return GetString("HelpCommandDescription_chs"); }
        }

        /// <summary>
        /// 显示一般帮助信息，以及有关其他命令的帮助信息。
        /// </summary>
        internal static string FormatHelpCommandDescription_chs()
        {
            return GetString("HelpCommandDescription_chs");
        }

        /// <summary>
        /// 顯示一般說明資訊以及其他命令的相關說明資訊。
        /// </summary>
        internal static string HelpCommandDescription_cht
        {
            get { return GetString("HelpCommandDescription_cht"); }
        }

        /// <summary>
        /// 顯示一般說明資訊以及其他命令的相關說明資訊。
        /// </summary>
        internal static string FormatHelpCommandDescription_cht()
        {
            return GetString("HelpCommandDescription_cht");
        }

        /// <summary>
        /// Vytiskne podrobně veškerou nápovědu ve formátu markdown.
        /// </summary>
        internal static string HelpCommandMarkdown_csy
        {
            get { return GetString("HelpCommandMarkdown_csy"); }
        }

        /// <summary>
        /// Vytiskne podrobně veškerou nápovědu ve formátu markdown.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_csy()
        {
            return GetString("HelpCommandMarkdown_csy");
        }

        /// <summary>
        /// Ausführliche Hilfe im Markdownformat ausgeben.
        /// </summary>
        internal static string HelpCommandMarkdown_deu
        {
            get { return GetString("HelpCommandMarkdown_deu"); }
        }

        /// <summary>
        /// Ausführliche Hilfe im Markdownformat ausgeben.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_deu()
        {
            return GetString("HelpCommandMarkdown_deu");
        }

        /// <summary>
        /// Imprimir toda la información detallada en formato reducido.
        /// </summary>
        internal static string HelpCommandMarkdown_esp
        {
            get { return GetString("HelpCommandMarkdown_esp"); }
        }

        /// <summary>
        /// Imprimir toda la información detallada en formato reducido.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_esp()
        {
            return GetString("HelpCommandMarkdown_esp");
        }

        /// <summary>
        /// Imprimez l'ensemble de l'aide détaillée au format Markdown.
        /// </summary>
        internal static string HelpCommandMarkdown_fra
        {
            get { return GetString("HelpCommandMarkdown_fra"); }
        }

        /// <summary>
        /// Imprimez l'ensemble de l'aide détaillée au format Markdown.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_fra()
        {
            return GetString("HelpCommandMarkdown_fra");
        }

        /// <summary>
        /// Stampare tutto l'aiuto in formato markdown
        /// </summary>
        internal static string HelpCommandMarkdown_ita
        {
            get { return GetString("HelpCommandMarkdown_ita"); }
        }

        /// <summary>
        /// Stampare tutto l'aiuto in formato markdown
        /// </summary>
        internal static string FormatHelpCommandMarkdown_ita()
        {
            return GetString("HelpCommandMarkdown_ita");
        }

        /// <summary>
        /// マークダウン形式ですべての詳細なヘルプを印刷します。
        /// </summary>
        internal static string HelpCommandMarkdown_jpn
        {
            get { return GetString("HelpCommandMarkdown_jpn"); }
        }

        /// <summary>
        /// マークダウン形式ですべての詳細なヘルプを印刷します。
        /// </summary>
        internal static string FormatHelpCommandMarkdown_jpn()
        {
            return GetString("HelpCommandMarkdown_jpn");
        }

        /// <summary>
        /// 자세한 도움말을 마크다운 형식으로 모두 인쇄합니다.
        /// </summary>
        internal static string HelpCommandMarkdown_kor
        {
            get { return GetString("HelpCommandMarkdown_kor"); }
        }

        /// <summary>
        /// 자세한 도움말을 마크다운 형식으로 모두 인쇄합니다.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_kor()
        {
            return GetString("HelpCommandMarkdown_kor");
        }

        /// <summary>
        /// Wydrukuj szczegółową pomoc w formacie języka znaczników markdown.
        /// </summary>
        internal static string HelpCommandMarkdown_plk
        {
            get { return GetString("HelpCommandMarkdown_plk"); }
        }

        /// <summary>
        /// Wydrukuj szczegółową pomoc w formacie języka znaczników markdown.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_plk()
        {
            return GetString("HelpCommandMarkdown_plk");
        }

        /// <summary>
        /// Impressão detalhada de toda a ajuda em formato reduzido.
        /// </summary>
        internal static string HelpCommandMarkdown_ptb
        {
            get { return GetString("HelpCommandMarkdown_ptb"); }
        }

        /// <summary>
        /// Impressão detalhada de toda a ajuda em formato reduzido.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_ptb()
        {
            return GetString("HelpCommandMarkdown_ptb");
        }

        /// <summary>
        /// Выводит на печать всю справку в формате Markdown.
        /// </summary>
        internal static string HelpCommandMarkdown_rus
        {
            get { return GetString("HelpCommandMarkdown_rus"); }
        }

        /// <summary>
        /// Выводит на печать всю справку в формате Markdown.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_rus()
        {
            return GetString("HelpCommandMarkdown_rus");
        }

        /// <summary>
        /// Ayrıntılı tüm yardımı döküm biçiminde yazdır.
        /// </summary>
        internal static string HelpCommandMarkdown_trk
        {
            get { return GetString("HelpCommandMarkdown_trk"); }
        }

        /// <summary>
        /// Ayrıntılı tüm yardımı döküm biçiminde yazdır.
        /// </summary>
        internal static string FormatHelpCommandMarkdown_trk()
        {
            return GetString("HelpCommandMarkdown_trk");
        }

        /// <summary>
        /// 以 Markdown 格式打印所有详细帮助。
        /// </summary>
        internal static string HelpCommandMarkdown_chs
        {
            get { return GetString("HelpCommandMarkdown_chs"); }
        }

        /// <summary>
        /// 以 Markdown 格式打印所有详细帮助。
        /// </summary>
        internal static string FormatHelpCommandMarkdown_chs()
        {
            return GetString("HelpCommandMarkdown_chs");
        }

        /// <summary>
        /// 以 Markdown 格式列印所有詳細說明。
        /// </summary>
        internal static string HelpCommandMarkdown_cht
        {
            get { return GetString("HelpCommandMarkdown_cht"); }
        }

        /// <summary>
        /// 以 Markdown 格式列印所有詳細說明。
        /// </summary>
        internal static string FormatHelpCommandMarkdown_cht()
        {
            return GetString("HelpCommandMarkdown_cht");
        }

        /// <summary>
        /// Předá název příkazu pro zobrazení informací nápovědy k tomuto příkazu.
        /// </summary>
        internal static string HelpCommandUsageDescription_csy
        {
            get { return GetString("HelpCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Předá název příkazu pro zobrazení informací nápovědy k tomuto příkazu.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_csy()
        {
            return GetString("HelpCommandUsageDescription_csy");
        }

        /// <summary>
        /// Übergeben Sie einen Befehlsnamen, um Hilfeinformationen zu diesem Befehl anzuzeigen.
        /// </summary>
        internal static string HelpCommandUsageDescription_deu
        {
            get { return GetString("HelpCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Übergeben Sie einen Befehlsnamen, um Hilfeinformationen zu diesem Befehl anzuzeigen.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_deu()
        {
            return GetString("HelpCommandUsageDescription_deu");
        }

        /// <summary>
        /// Pasar un nombre de comando para mostrar la información de ayuda de aquel comando.
        /// </summary>
        internal static string HelpCommandUsageDescription_esp
        {
            get { return GetString("HelpCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Pasar un nombre de comando para mostrar la información de ayuda de aquel comando.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_esp()
        {
            return GetString("HelpCommandUsageDescription_esp");
        }

        /// <summary>
        /// Saisissez le nom d'une commande pour afficher les informations d'aide correspondantes.
        /// </summary>
        internal static string HelpCommandUsageDescription_fra
        {
            get { return GetString("HelpCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Saisissez le nom d'une commande pour afficher les informations d'aide correspondantes.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_fra()
        {
            return GetString("HelpCommandUsageDescription_fra");
        }

        /// <summary>
        /// Passare un nome comando per visualizzare le informazioni su quel comando
        /// </summary>
        internal static string HelpCommandUsageDescription_ita
        {
            get { return GetString("HelpCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Passare un nome comando per visualizzare le informazioni su quel comando
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_ita()
        {
            return GetString("HelpCommandUsageDescription_ita");
        }

        /// <summary>
        /// パス名を渡して、そのコマンドに関するヘルプ情報を表示します。
        /// </summary>
        internal static string HelpCommandUsageDescription_jpn
        {
            get { return GetString("HelpCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// パス名を渡して、そのコマンドに関するヘルプ情報を表示します。
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_jpn()
        {
            return GetString("HelpCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 명령 이름을 전달하여 해당 명령에 대한 도움말 정보를 표시합니다.
        /// </summary>
        internal static string HelpCommandUsageDescription_kor
        {
            get { return GetString("HelpCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 명령 이름을 전달하여 해당 명령에 대한 도움말 정보를 표시합니다.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_kor()
        {
            return GetString("HelpCommandUsageDescription_kor");
        }

        /// <summary>
        /// Przekaż nazwę polecenia, aby wyświetlić informacje pomocy dla tego polecenia.
        /// </summary>
        internal static string HelpCommandUsageDescription_plk
        {
            get { return GetString("HelpCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Przekaż nazwę polecenia, aby wyświetlić informacje pomocy dla tego polecenia.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_plk()
        {
            return GetString("HelpCommandUsageDescription_plk");
        }

        /// <summary>
        /// Passe um nome de comando para exibir as informações de ajuda para esse comando.
        /// </summary>
        internal static string HelpCommandUsageDescription_ptb
        {
            get { return GetString("HelpCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Passe um nome de comando para exibir as informações de ajuda para esse comando.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_ptb()
        {
            return GetString("HelpCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Передает имя команды для отображения справки по этой команде.
        /// </summary>
        internal static string HelpCommandUsageDescription_rus
        {
            get { return GetString("HelpCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Передает имя команды для отображения справки по этой команде.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_rus()
        {
            return GetString("HelpCommandUsageDescription_rus");
        }

        /// <summary>
        /// Komut adını, bu komuta yönelik yardım bilgilerini görüntülemek için geçir.
        /// </summary>
        internal static string HelpCommandUsageDescription_trk
        {
            get { return GetString("HelpCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Komut adını, bu komuta yönelik yardım bilgilerini görüntülemek için geçir.
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_trk()
        {
            return GetString("HelpCommandUsageDescription_trk");
        }

        /// <summary>
        /// 传递命令名称，以显示该命令的帮助信息。
        /// </summary>
        internal static string HelpCommandUsageDescription_chs
        {
            get { return GetString("HelpCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 传递命令名称，以显示该命令的帮助信息。
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_chs()
        {
            return GetString("HelpCommandUsageDescription_chs");
        }

        /// <summary>
        /// 傳送命令名稱以顯示該命名的說明資訊。
        /// </summary>
        internal static string HelpCommandUsageDescription_cht
        {
            get { return GetString("HelpCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 傳送命令名稱以顯示該命名的說明資訊。
        /// </summary>
        internal static string FormatHelpCommandUsageDescription_cht()
        {
            return GetString("HelpCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_csy
        {
            get { return GetString("HelpCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_csy()
        {
            return GetString("HelpCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_deu
        {
            get { return GetString("HelpCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_deu()
        {
            return GetString("HelpCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_esp
        {
            get { return GetString("HelpCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_esp()
        {
            return GetString("HelpCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_fra
        {
            get { return GetString("HelpCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_fra()
        {
            return GetString("HelpCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_ita
        {
            get { return GetString("HelpCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_ita()
        {
            return GetString("HelpCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_jpn
        {
            get { return GetString("HelpCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_jpn()
        {
            return GetString("HelpCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_kor
        {
            get { return GetString("HelpCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_kor()
        {
            return GetString("HelpCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_plk
        {
            get { return GetString("HelpCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_plk()
        {
            return GetString("HelpCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_ptb
        {
            get { return GetString("HelpCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_ptb()
        {
            return GetString("HelpCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_rus
        {
            get { return GetString("HelpCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_rus()
        {
            return GetString("HelpCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_trk
        {
            get { return GetString("HelpCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_trk()
        {
            return GetString("HelpCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_chs
        {
            get { return GetString("HelpCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_chs()
        {
            return GetString("HelpCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string HelpCommandUsageExamples_cht
        {
            get { return GetString("HelpCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget help
        /// 
        /// nuget help push
        /// 
        /// nuget ?
        /// 
        /// nuget push -?
        /// </summary>
        internal static string FormatHelpCommandUsageExamples_cht()
        {
            return GetString("HelpCommandUsageExamples_cht");
        }

        /// <summary>
        /// [příkaz]
        /// </summary>
        internal static string HelpCommandUsageSummary_csy
        {
            get { return GetString("HelpCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// [příkaz]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_csy()
        {
            return GetString("HelpCommandUsageSummary_csy");
        }

        /// <summary>
        /// [Befehl]
        /// </summary>
        internal static string HelpCommandUsageSummary_deu
        {
            get { return GetString("HelpCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// [Befehl]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_deu()
        {
            return GetString("HelpCommandUsageSummary_deu");
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string HelpCommandUsageSummary_esp
        {
            get { return GetString("HelpCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_esp()
        {
            return GetString("HelpCommandUsageSummary_esp");
        }

        /// <summary>
        /// [@@@commande]
        /// </summary>
        internal static string HelpCommandUsageSummary_fra
        {
            get { return GetString("HelpCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// [@@@commande]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_fra()
        {
            return GetString("HelpCommandUsageSummary_fra");
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string HelpCommandUsageSummary_ita
        {
            get { return GetString("HelpCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_ita()
        {
            return GetString("HelpCommandUsageSummary_ita");
        }

        /// <summary>
        /// [command]
        /// </summary>
        internal static string HelpCommandUsageSummary_jpn
        {
            get { return GetString("HelpCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// [command]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_jpn()
        {
            return GetString("HelpCommandUsageSummary_jpn");
        }

        /// <summary>
        /// [명령]
        /// </summary>
        internal static string HelpCommandUsageSummary_kor
        {
            get { return GetString("HelpCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// [명령]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_kor()
        {
            return GetString("HelpCommandUsageSummary_kor");
        }

        /// <summary>
        /// [polecenie]
        /// </summary>
        internal static string HelpCommandUsageSummary_plk
        {
            get { return GetString("HelpCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// [polecenie]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_plk()
        {
            return GetString("HelpCommandUsageSummary_plk");
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string HelpCommandUsageSummary_ptb
        {
            get { return GetString("HelpCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// [comando]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_ptb()
        {
            return GetString("HelpCommandUsageSummary_ptb");
        }

        /// <summary>
        /// [команда]
        /// </summary>
        internal static string HelpCommandUsageSummary_rus
        {
            get { return GetString("HelpCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// [команда]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_rus()
        {
            return GetString("HelpCommandUsageSummary_rus");
        }

        /// <summary>
        /// [komut]
        /// </summary>
        internal static string HelpCommandUsageSummary_trk
        {
            get { return GetString("HelpCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// [komut]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_trk()
        {
            return GetString("HelpCommandUsageSummary_trk");
        }

        /// <summary>
        /// [命令]
        /// </summary>
        internal static string HelpCommandUsageSummary_chs
        {
            get { return GetString("HelpCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// [命令]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_chs()
        {
            return GetString("HelpCommandUsageSummary_chs");
        }

        /// <summary>
        /// [命令]
        /// </summary>
        internal static string HelpCommandUsageSummary_cht
        {
            get { return GetString("HelpCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// [命令]
        /// </summary>
        internal static string FormatHelpCommandUsageSummary_cht()
        {
            return GetString("HelpCommandUsageSummary_cht");
        }

        /// <summary>
        /// Nainstaluje balíček s využitím zadaným zdrojů. Pokud nejsou zadány žádné zdroje, použijí se všechny zdroje definované v konfiguračním souboru NuGet. Pokud konfigurační soubor nespecifikuje žádné zdroje, použije se výchozí informační kanál NuGet.
        /// </summary>
        internal static string InstallCommandDescription_csy
        {
            get { return GetString("InstallCommandDescription_csy"); }
        }

        /// <summary>
        /// Nainstaluje balíček s využitím zadaným zdrojů. Pokud nejsou zadány žádné zdroje, použijí se všechny zdroje definované v konfiguračním souboru NuGet. Pokud konfigurační soubor nespecifikuje žádné zdroje, použije se výchozí informační kanál NuGet.
        /// </summary>
        internal static string FormatInstallCommandDescription_csy()
        {
            return GetString("InstallCommandDescription_csy");
        }

        /// <summary>
        /// Installiert ein Paket mithilfe der angegebenen Quellen. Wenn keine Quellen angegeben werden, werden alle Quellen verwendet, die in der NuGet-Konfigurationsdatei definiert sind. Wenn die Konfigurationsdatei keine Quellen angibt, wird der NuGet-Standardfeed verwendet.
        /// </summary>
        internal static string InstallCommandDescription_deu
        {
            get { return GetString("InstallCommandDescription_deu"); }
        }

        /// <summary>
        /// Installiert ein Paket mithilfe der angegebenen Quellen. Wenn keine Quellen angegeben werden, werden alle Quellen verwendet, die in der NuGet-Konfigurationsdatei definiert sind. Wenn die Konfigurationsdatei keine Quellen angibt, wird der NuGet-Standardfeed verwendet.
        /// </summary>
        internal static string FormatInstallCommandDescription_deu()
        {
            return GetString("InstallCommandDescription_deu");
        }

        /// <summary>
        /// Instala un paquete usando los orígenes especificados. Si no se especifica ningún origen, se usan todos los orígenes definidos en la configuración de NuGet. Si el archivo de configuración no especifica ningún origen, se usa la fuente predeterminada de NuGet.
        /// </summary>
        internal static string InstallCommandDescription_esp
        {
            get { return GetString("InstallCommandDescription_esp"); }
        }

        /// <summary>
        /// Instala un paquete usando los orígenes especificados. Si no se especifica ningún origen, se usan todos los orígenes definidos en la configuración de NuGet. Si el archivo de configuración no especifica ningún origen, se usa la fuente predeterminada de NuGet.
        /// </summary>
        internal static string FormatInstallCommandDescription_esp()
        {
            return GetString("InstallCommandDescription_esp");
        }

        /// <summary>
        /// Installe un package à partir des sources spécifiées. Si aucune source n'est spécifiée, toutes les sources définies dans le fichier de configuration NuGet seront utilisées. Si le fichier de configuration ne spécifie aucune source, il s'alimentera du flux NuGet.
        /// </summary>
        internal static string InstallCommandDescription_fra
        {
            get { return GetString("InstallCommandDescription_fra"); }
        }

        /// <summary>
        /// Installe un package à partir des sources spécifiées. Si aucune source n'est spécifiée, toutes les sources définies dans le fichier de configuration NuGet seront utilisées. Si le fichier de configuration ne spécifie aucune source, il s'alimentera du flux NuGet.
        /// </summary>
        internal static string FormatInstallCommandDescription_fra()
        {
            return GetString("InstallCommandDescription_fra");
        }

        /// <summary>
        /// Installa un pacchetto usando le fonti specificate. Se non sono specificate fonti, tutte le fonti definite nella configurazione NuGet saranno usata. Se il file di configurazione non specifica fonti, usare NuGet feed di default.
        /// </summary>
        internal static string InstallCommandDescription_ita
        {
            get { return GetString("InstallCommandDescription_ita"); }
        }

        /// <summary>
        /// Installa un pacchetto usando le fonti specificate. Se non sono specificate fonti, tutte le fonti definite nella configurazione NuGet saranno usata. Se il file di configurazione non specifica fonti, usare NuGet feed di default.
        /// </summary>
        internal static string FormatInstallCommandDescription_ita()
        {
            return GetString("InstallCommandDescription_ita");
        }

        /// <summary>
        /// 指定されたソースを使用してパッケージをインストールします。ソースが指定されていない場合、NuGet 構成ファイルに定義されているすべてのソースが使用されます。構成ファイルにソースが指定されていない場合、既定の NuGet フィードが使用されます。
        /// </summary>
        internal static string InstallCommandDescription_jpn
        {
            get { return GetString("InstallCommandDescription_jpn"); }
        }

        /// <summary>
        /// 指定されたソースを使用してパッケージをインストールします。ソースが指定されていない場合、NuGet 構成ファイルに定義されているすべてのソースが使用されます。構成ファイルにソースが指定されていない場合、既定の NuGet フィードが使用されます。
        /// </summary>
        internal static string FormatInstallCommandDescription_jpn()
        {
            return GetString("InstallCommandDescription_jpn");
        }

        /// <summary>
        /// 지정된 소스를 사용하여 패키지를 설치합니다. 소스가 지정되지 않은 경우 NuGet 구성 파일에 정의된 모든 소스가 사용됩니다. 구성 파일로도 소스가 지정되지 않으면 기본 NuGet 피드가 사용됩니다.
        /// </summary>
        internal static string InstallCommandDescription_kor
        {
            get { return GetString("InstallCommandDescription_kor"); }
        }

        /// <summary>
        /// 지정된 소스를 사용하여 패키지를 설치합니다. 소스가 지정되지 않은 경우 NuGet 구성 파일에 정의된 모든 소스가 사용됩니다. 구성 파일로도 소스가 지정되지 않으면 기본 NuGet 피드가 사용됩니다.
        /// </summary>
        internal static string FormatInstallCommandDescription_kor()
        {
            return GetString("InstallCommandDescription_kor");
        }

        /// <summary>
        /// Instaluje pakiet przy użyciu określonych źródeł. Jeśli żadne źródło nie zostanie określone, są używane wszystkie źródła zdefiniowane w pliku konfiguracji pakietu NuGet. Jeśli w pliku konfiguracji nie zostaną określone żadne źródła, jest używane domyślne źródło NuGet.
        /// </summary>
        internal static string InstallCommandDescription_plk
        {
            get { return GetString("InstallCommandDescription_plk"); }
        }

        /// <summary>
        /// Instaluje pakiet przy użyciu określonych źródeł. Jeśli żadne źródło nie zostanie określone, są używane wszystkie źródła zdefiniowane w pliku konfiguracji pakietu NuGet. Jeśli w pliku konfiguracji nie zostaną określone żadne źródła, jest używane domyślne źródło NuGet.
        /// </summary>
        internal static string FormatInstallCommandDescription_plk()
        {
            return GetString("InstallCommandDescription_plk");
        }

        /// <summary>
        /// Instala um pacote usando as origens especificadas. Se não houver origens especificadas, são utilizadas todas as origens definidas no arquivo de configuração NuGet. Se o arquivo de configuração não especificar nenhuma origem, usa o feed NuGet padrão.
        /// </summary>
        internal static string InstallCommandDescription_ptb
        {
            get { return GetString("InstallCommandDescription_ptb"); }
        }

        /// <summary>
        /// Instala um pacote usando as origens especificadas. Se não houver origens especificadas, são utilizadas todas as origens definidas no arquivo de configuração NuGet. Se o arquivo de configuração não especificar nenhuma origem, usa o feed NuGet padrão.
        /// </summary>
        internal static string FormatInstallCommandDescription_ptb()
        {
            return GetString("InstallCommandDescription_ptb");
        }

        /// <summary>
        /// Устанавливает пакет с помощью указанных источников. Если они не указаны, используются все источники, определенные в файле конфигурации NuGet. Если в файле конфигурации не указаны источники, используется канал NuGet по умолчанию.
        /// </summary>
        internal static string InstallCommandDescription_rus
        {
            get { return GetString("InstallCommandDescription_rus"); }
        }

        /// <summary>
        /// Устанавливает пакет с помощью указанных источников. Если они не указаны, используются все источники, определенные в файле конфигурации NuGet. Если в файле конфигурации не указаны источники, используется канал NuGet по умолчанию.
        /// </summary>
        internal static string FormatInstallCommandDescription_rus()
        {
            return GetString("InstallCommandDescription_rus");
        }

        /// <summary>
        /// Belirtilen kaynakları kullanarak paketi yükler. Hiçbir kaynak belirtilmemişse, NuGet yapılandırma dosyasında belirtilen tüm kaynaklar kullanılır. Yapılandırma dosyasında hiçbir kaynak belirtilmemişse, varsayılan NuGet akışını kullanır.
        /// </summary>
        internal static string InstallCommandDescription_trk
        {
            get { return GetString("InstallCommandDescription_trk"); }
        }

        /// <summary>
        /// Belirtilen kaynakları kullanarak paketi yükler. Hiçbir kaynak belirtilmemişse, NuGet yapılandırma dosyasında belirtilen tüm kaynaklar kullanılır. Yapılandırma dosyasında hiçbir kaynak belirtilmemişse, varsayılan NuGet akışını kullanır.
        /// </summary>
        internal static string FormatInstallCommandDescription_trk()
        {
            return GetString("InstallCommandDescription_trk");
        }

        /// <summary>
        /// 使用指定的源安装程序包。如果未指定源，则将使用 NuGet 配置文件中定义的所有源。如果配置文件未指定源，则使用默认的 NuGet 源。
        /// </summary>
        internal static string InstallCommandDescription_chs
        {
            get { return GetString("InstallCommandDescription_chs"); }
        }

        /// <summary>
        /// 使用指定的源安装程序包。如果未指定源，则将使用 NuGet 配置文件中定义的所有源。如果配置文件未指定源，则使用默认的 NuGet 源。
        /// </summary>
        internal static string FormatInstallCommandDescription_chs()
        {
            return GetString("InstallCommandDescription_chs");
        }

        /// <summary>
        /// 使用指定來源安裝封裝。如果沒有指定來源，在 NuGet 設定檔中定義的所有來源均已使用。如果設定檔並未指定來源，請使用預設 NuGet 摘要。
        /// </summary>
        internal static string InstallCommandDescription_cht
        {
            get { return GetString("InstallCommandDescription_cht"); }
        }

        /// <summary>
        /// 使用指定來源安裝封裝。如果沒有指定來源，在 NuGet 設定檔中定義的所有來源均已使用。如果設定檔並未指定來源，請使用預設 NuGet 摘要。
        /// </summary>
        internal static string FormatInstallCommandDescription_cht()
        {
            return GetString("InstallCommandDescription_cht");
        }

        /// <summary>
        /// Pokud je tato možnost nastavena, cílová složka bude obsahovat pouze název balíčku, ale ne číslo verze.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_csy
        {
            get { return GetString("InstallCommandExcludeVersionDescription_csy"); }
        }

        /// <summary>
        /// Pokud je tato možnost nastavena, cílová složka bude obsahovat pouze název balíčku, ale ne číslo verze.
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_csy()
        {
            return GetString("InstallCommandExcludeVersionDescription_csy");
        }

        /// <summary>
        /// Wenn diese Option festgelegt ist, enthält der Zielordner nur den Paketnamen, nicht die Versionsnummer.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_deu
        {
            get { return GetString("InstallCommandExcludeVersionDescription_deu"); }
        }

        /// <summary>
        /// Wenn diese Option festgelegt ist, enthält der Zielordner nur den Paketnamen, nicht die Versionsnummer.
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_deu()
        {
            return GetString("InstallCommandExcludeVersionDescription_deu");
        }

        /// <summary>
        /// Si se configura, la carpeta de destino solo contendrá el nombre de paquete y no el número de versión
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_esp
        {
            get { return GetString("InstallCommandExcludeVersionDescription_esp"); }
        }

        /// <summary>
        /// Si se configura, la carpeta de destino solo contendrá el nombre de paquete y no el número de versión
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_esp()
        {
            return GetString("InstallCommandExcludeVersionDescription_esp");
        }

        /// <summary>
        /// Si défini, le dossier de destination ne contiendra que le nom de package et pas le numéro de version.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_fra
        {
            get { return GetString("InstallCommandExcludeVersionDescription_fra"); }
        }

        /// <summary>
        /// Si défini, le dossier de destination ne contiendra que le nom de package et pas le numéro de version.
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_fra()
        {
            return GetString("InstallCommandExcludeVersionDescription_fra");
        }

        /// <summary>
        /// Se impostata, la cartella di destinazione conterrà il nome del pacchetto, non il numero di versione
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_ita
        {
            get { return GetString("InstallCommandExcludeVersionDescription_ita"); }
        }

        /// <summary>
        /// Se impostata, la cartella di destinazione conterrà il nome del pacchetto, non il numero di versione
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_ita()
        {
            return GetString("InstallCommandExcludeVersionDescription_ita");
        }

        /// <summary>
        /// 設定すると、対象フォルダーにはバージョン番号ではなくパッケージ名のみが含まれます。
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_jpn
        {
            get { return GetString("InstallCommandExcludeVersionDescription_jpn"); }
        }

        /// <summary>
        /// 設定すると、対象フォルダーにはバージョン番号ではなくパッケージ名のみが含まれます。
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_jpn()
        {
            return GetString("InstallCommandExcludeVersionDescription_jpn");
        }

        /// <summary>
        /// 설정할 경우 대상 폴더에 패키지 이름만 포함되며 버전 이름은 포함되지 않습니다.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_kor
        {
            get { return GetString("InstallCommandExcludeVersionDescription_kor"); }
        }

        /// <summary>
        /// 설정할 경우 대상 폴더에 패키지 이름만 포함되며 버전 이름은 포함되지 않습니다.
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_kor()
        {
            return GetString("InstallCommandExcludeVersionDescription_kor");
        }

        /// <summary>
        /// Jeśli ta opcja zostanie ustawiona, folder docelowy będzie zawierał tylko nazwę pakietu, bez numeru wersji
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_plk
        {
            get { return GetString("InstallCommandExcludeVersionDescription_plk"); }
        }

        /// <summary>
        /// Jeśli ta opcja zostanie ustawiona, folder docelowy będzie zawierał tylko nazwę pakietu, bez numeru wersji
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_plk()
        {
            return GetString("InstallCommandExcludeVersionDescription_plk");
        }

        /// <summary>
        /// Se assim for definida, a pasta de destino conterá apenas o nome do pacote, e não o número da versão
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_ptb
        {
            get { return GetString("InstallCommandExcludeVersionDescription_ptb"); }
        }

        /// <summary>
        /// Se assim for definida, a pasta de destino conterá apenas o nome do pacote, e não o número da versão
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_ptb()
        {
            return GetString("InstallCommandExcludeVersionDescription_ptb");
        }

        /// <summary>
        /// Если этот параметр задан, папка назначения будет содержать только имя пакета, но не номер версии
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_rus
        {
            get { return GetString("InstallCommandExcludeVersionDescription_rus"); }
        }

        /// <summary>
        /// Если этот параметр задан, папка назначения будет содержать только имя пакета, но не номер версии
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_rus()
        {
            return GetString("InstallCommandExcludeVersionDescription_rus");
        }

        /// <summary>
        /// Ayarlanmışsa, hedef klasörde sürüm numarası değil, yalnızca paket adı bulunur.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_trk
        {
            get { return GetString("InstallCommandExcludeVersionDescription_trk"); }
        }

        /// <summary>
        /// Ayarlanmışsa, hedef klasörde sürüm numarası değil, yalnızca paket adı bulunur.
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_trk()
        {
            return GetString("InstallCommandExcludeVersionDescription_trk");
        }

        /// <summary>
        /// 如果已设置，则目标文件夹将只包含程序包名称，而不包含版本号
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_chs
        {
            get { return GetString("InstallCommandExcludeVersionDescription_chs"); }
        }

        /// <summary>
        /// 如果已设置，则目标文件夹将只包含程序包名称，而不包含版本号
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_chs()
        {
            return GetString("InstallCommandExcludeVersionDescription_chs");
        }

        /// <summary>
        /// 若設定，目的地資料夾僅會包含封裝名稱，而不會有版本號碼
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription_cht
        {
            get { return GetString("InstallCommandExcludeVersionDescription_cht"); }
        }

        /// <summary>
        /// 若設定，目的地資料夾僅會包含封裝名稱，而不會有版本號碼
        /// </summary>
        internal static string FormatInstallCommandExcludeVersionDescription_cht()
        {
            return GetString("InstallCommandExcludeVersionDescription_cht");
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string InstallCommandNoCache_csy
        {
            get { return GetString("InstallCommandNoCache_csy"); }
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string FormatInstallCommandNoCache_csy()
        {
            return GetString("InstallCommandNoCache_csy");
        }

        /// <summary>
        /// Verwenden des Computercaches als erste Paketquelle deaktivieren.
        /// </summary>
        internal static string InstallCommandNoCache_deu
        {
            get { return GetString("InstallCommandNoCache_deu"); }
        }

        /// <summary>
        /// Verwenden des Computercaches als erste Paketquelle deaktivieren.
        /// </summary>
        internal static string FormatInstallCommandNoCache_deu()
        {
            return GetString("InstallCommandNoCache_deu");
        }

        /// <summary>
        /// Deshabilitar el caché de la máquina como el origen del primer paquete.
        /// </summary>
        internal static string InstallCommandNoCache_esp
        {
            get { return GetString("InstallCommandNoCache_esp"); }
        }

        /// <summary>
        /// Deshabilitar el caché de la máquina como el origen del primer paquete.
        /// </summary>
        internal static string FormatInstallCommandNoCache_esp()
        {
            return GetString("InstallCommandNoCache_esp");
        }

        /// <summary>
        /// Désactivation grâce au cache de l'ordinateur, agissant comme première source du package.
        /// </summary>
        internal static string InstallCommandNoCache_fra
        {
            get { return GetString("InstallCommandNoCache_fra"); }
        }

        /// <summary>
        /// Désactivation grâce au cache de l'ordinateur, agissant comme première source du package.
        /// </summary>
        internal static string FormatInstallCommandNoCache_fra()
        {
            return GetString("InstallCommandNoCache_fra");
        }

        /// <summary>
        /// Disabilitare usando la cache della macchina come prima fonte pacchetto.
        /// </summary>
        internal static string InstallCommandNoCache_ita
        {
            get { return GetString("InstallCommandNoCache_ita"); }
        }

        /// <summary>
        /// Disabilitare usando la cache della macchina come prima fonte pacchetto.
        /// </summary>
        internal static string FormatInstallCommandNoCache_ita()
        {
            return GetString("InstallCommandNoCache_ita");
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてのコンピューター キャッシュの使用を無効にします。
        /// </summary>
        internal static string InstallCommandNoCache_jpn
        {
            get { return GetString("InstallCommandNoCache_jpn"); }
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてのコンピューター キャッシュの使用を無効にします。
        /// </summary>
        internal static string FormatInstallCommandNoCache_jpn()
        {
            return GetString("InstallCommandNoCache_jpn");
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string InstallCommandNoCache_kor
        {
            get { return GetString("InstallCommandNoCache_kor"); }
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatInstallCommandNoCache_kor()
        {
            return GetString("InstallCommandNoCache_kor");
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string InstallCommandNoCache_plk
        {
            get { return GetString("InstallCommandNoCache_plk"); }
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string FormatInstallCommandNoCache_plk()
        {
            return GetString("InstallCommandNoCache_plk");
        }

        /// <summary>
        /// Desative usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string InstallCommandNoCache_ptb
        {
            get { return GetString("InstallCommandNoCache_ptb"); }
        }

        /// <summary>
        /// Desative usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string FormatInstallCommandNoCache_ptb()
        {
            return GetString("InstallCommandNoCache_ptb");
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string InstallCommandNoCache_rus
        {
            get { return GetString("InstallCommandNoCache_rus"); }
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string FormatInstallCommandNoCache_rus()
        {
            return GetString("InstallCommandNoCache_rus");
        }

        /// <summary>
        /// Birinci paket kaynağı olarak makine önbelleğinin kullanılmasını devre dışı bırak.
        /// </summary>
        internal static string InstallCommandNoCache_trk
        {
            get { return GetString("InstallCommandNoCache_trk"); }
        }

        /// <summary>
        /// Birinci paket kaynağı olarak makine önbelleğinin kullanılmasını devre dışı bırak.
        /// </summary>
        internal static string FormatInstallCommandNoCache_trk()
        {
            return GetString("InstallCommandNoCache_trk");
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string InstallCommandNoCache_chs
        {
            get { return GetString("InstallCommandNoCache_chs"); }
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string FormatInstallCommandNoCache_chs()
        {
            return GetString("InstallCommandNoCache_chs");
        }

        /// <summary>
        /// 停用使用機器快取做為第一個封裝來源。
        /// </summary>
        internal static string InstallCommandNoCache_cht
        {
            get { return GetString("InstallCommandNoCache_cht"); }
        }

        /// <summary>
        /// 停用使用機器快取做為第一個封裝來源。
        /// </summary>
        internal static string FormatInstallCommandNoCache_cht()
        {
            return GetString("InstallCommandNoCache_cht");
        }

        /// <summary>
        /// Určuje adresář, do něhož budou nainstalovány balíčky. Není-li zadán, použije se aktuální adresář.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_csy
        {
            get { return GetString("InstallCommandOutputDirDescription_csy"); }
        }

        /// <summary>
        /// Určuje adresář, do něhož budou nainstalovány balíčky. Není-li zadán, použije se aktuální adresář.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_csy()
        {
            return GetString("InstallCommandOutputDirDescription_csy");
        }

        /// <summary>
        /// Gibt das Verzeichnis an, in dem Pakete installiert werden. Wenn kein Verzeichnis angegeben wird, wird das aktuelle Verzeichnis verwendet.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_deu
        {
            get { return GetString("InstallCommandOutputDirDescription_deu"); }
        }

        /// <summary>
        /// Gibt das Verzeichnis an, in dem Pakete installiert werden. Wenn kein Verzeichnis angegeben wird, wird das aktuelle Verzeichnis verwendet.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_deu()
        {
            return GetString("InstallCommandOutputDirDescription_deu");
        }

        /// <summary>
        /// Especifica el directorio en el que se instalarán los paquetes. Si no se especifica ninguno, se usa el directorio actual.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_esp
        {
            get { return GetString("InstallCommandOutputDirDescription_esp"); }
        }

        /// <summary>
        /// Especifica el directorio en el que se instalarán los paquetes. Si no se especifica ninguno, se usa el directorio actual.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_esp()
        {
            return GetString("InstallCommandOutputDirDescription_esp");
        }

        /// <summary>
        /// Spécifie le répertoire d'installation des packages. S'il n'est pas spécifié, le répertoire actuel sera utilisé.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_fra
        {
            get { return GetString("InstallCommandOutputDirDescription_fra"); }
        }

        /// <summary>
        /// Spécifie le répertoire d'installation des packages. S'il n'est pas spécifié, le répertoire actuel sera utilisé.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_fra()
        {
            return GetString("InstallCommandOutputDirDescription_fra");
        }

        /// <summary>
        /// Specifica la directory in cui i pacchetti saranno installati. Altrimenti, usare la directory attuale.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_ita
        {
            get { return GetString("InstallCommandOutputDirDescription_ita"); }
        }

        /// <summary>
        /// Specifica la directory in cui i pacchetti saranno installati. Altrimenti, usare la directory attuale.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_ita()
        {
            return GetString("InstallCommandOutputDirDescription_ita");
        }

        /// <summary>
        /// パッケージをインストールするディレクトリを指定します。指定しない場合、現在のディレクトリが使用されます。
        /// </summary>
        internal static string InstallCommandOutputDirDescription_jpn
        {
            get { return GetString("InstallCommandOutputDirDescription_jpn"); }
        }

        /// <summary>
        /// パッケージをインストールするディレクトリを指定します。指定しない場合、現在のディレクトリが使用されます。
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_jpn()
        {
            return GetString("InstallCommandOutputDirDescription_jpn");
        }

        /// <summary>
        /// 패키지가 설치될 디렉터리를 지정합니다. 지정되지 않은 경우 현재 디렉터리를 사용합니다.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_kor
        {
            get { return GetString("InstallCommandOutputDirDescription_kor"); }
        }

        /// <summary>
        /// 패키지가 설치될 디렉터리를 지정합니다. 지정되지 않은 경우 현재 디렉터리를 사용합니다.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_kor()
        {
            return GetString("InstallCommandOutputDirDescription_kor");
        }

        /// <summary>
        /// Określa katalog, w którym zostaną zainstalowane pakiety. Jeśli żaden nie zostanie określony, będzie używany katalog bieżący.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_plk
        {
            get { return GetString("InstallCommandOutputDirDescription_plk"); }
        }

        /// <summary>
        /// Określa katalog, w którym zostaną zainstalowane pakiety. Jeśli żaden nie zostanie określony, będzie używany katalog bieżący.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_plk()
        {
            return GetString("InstallCommandOutputDirDescription_plk");
        }

        /// <summary>
        /// Especifica o diretório em que os pacotes serão instalados. Se nenhum for especificado, usa o diretório atual.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_ptb
        {
            get { return GetString("InstallCommandOutputDirDescription_ptb"); }
        }

        /// <summary>
        /// Especifica o diretório em que os pacotes serão instalados. Se nenhum for especificado, usa o diretório atual.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_ptb()
        {
            return GetString("InstallCommandOutputDirDescription_ptb");
        }

        /// <summary>
        /// Задает каталог для установки пакетов. Если он не указан, используется текущий каталог.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_rus
        {
            get { return GetString("InstallCommandOutputDirDescription_rus"); }
        }

        /// <summary>
        /// Задает каталог для установки пакетов. Если он не указан, используется текущий каталог.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_rus()
        {
            return GetString("InstallCommandOutputDirDescription_rus");
        }

        /// <summary>
        /// Paketlerin yükleneceği dizini belirtir. Hiçbiri belirtilmemişse, geçerli dizini kullanır.
        /// </summary>
        internal static string InstallCommandOutputDirDescription_trk
        {
            get { return GetString("InstallCommandOutputDirDescription_trk"); }
        }

        /// <summary>
        /// Paketlerin yükleneceği dizini belirtir. Hiçbiri belirtilmemişse, geçerli dizini kullanır.
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_trk()
        {
            return GetString("InstallCommandOutputDirDescription_trk");
        }

        /// <summary>
        /// 指定将在其中安装程序包的目录。如果未指定，则使用当前目录。
        /// </summary>
        internal static string InstallCommandOutputDirDescription_chs
        {
            get { return GetString("InstallCommandOutputDirDescription_chs"); }
        }

        /// <summary>
        /// 指定将在其中安装程序包的目录。如果未指定，则使用当前目录。
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_chs()
        {
            return GetString("InstallCommandOutputDirDescription_chs");
        }

        /// <summary>
        /// 指定要安全的封裝中的目錄。若未指定，則使用目前的目錄。
        /// </summary>
        internal static string InstallCommandOutputDirDescription_cht
        {
            get { return GetString("InstallCommandOutputDirDescription_cht"); }
        }

        /// <summary>
        /// 指定要安全的封裝中的目錄。若未指定，則使用目前的目錄。
        /// </summary>
        internal static string FormatInstallCommandOutputDirDescription_cht()
        {
            return GetString("InstallCommandOutputDirDescription_cht");
        }

        /// <summary>
        /// Umožňuje nainstalovat předběžné verze balíčků. Tento příznak není vyžadován při obnově balíčků pomocí instalace ze souboru packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_csy
        {
            get { return GetString("InstallCommandPrerelease_csy"); }
        }

        /// <summary>
        /// Umožňuje nainstalovat předběžné verze balíčků. Tento příznak není vyžadován při obnově balíčků pomocí instalace ze souboru packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_csy()
        {
            return GetString("InstallCommandPrerelease_csy");
        }

        /// <summary>
        /// Ermöglicht die Installation von Vorabversionspaketen. Diese Kennzeichnung ist nicht erforderlich, wenn Pakete durch Installieren aus "packages.config" wiederhergestellt werden.
        /// </summary>
        internal static string InstallCommandPrerelease_deu
        {
            get { return GetString("InstallCommandPrerelease_deu"); }
        }

        /// <summary>
        /// Ermöglicht die Installation von Vorabversionspaketen. Diese Kennzeichnung ist nicht erforderlich, wenn Pakete durch Installieren aus "packages.config" wiederhergestellt werden.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_deu()
        {
            return GetString("InstallCommandPrerelease_deu");
        }

        /// <summary>
        /// Permite instalar paquetes de versión preliminar. Esta marca no es necesaria al restaurar paquetes mediante la instalación desde packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_esp
        {
            get { return GetString("InstallCommandPrerelease_esp"); }
        }

        /// <summary>
        /// Permite instalar paquetes de versión preliminar. Esta marca no es necesaria al restaurar paquetes mediante la instalación desde packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_esp()
        {
            return GetString("InstallCommandPrerelease_esp");
        }

        /// <summary>
        /// Permet l'installation de la version préliminaire des packages. Cet indicateur n'est pas requis lors de la restauration des packages depuis packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_fra
        {
            get { return GetString("InstallCommandPrerelease_fra"); }
        }

        /// <summary>
        /// Permet l'installation de la version préliminaire des packages. Cet indicateur n'est pas requis lors de la restauration des packages depuis packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_fra()
        {
            return GetString("InstallCommandPrerelease_fra");
        }

        /// <summary>
        /// Permette ai pacchetti prelease di essere installati. Questo flag non è richiesto quando si ripristinano pacchetti installando da packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_ita
        {
            get { return GetString("InstallCommandPrerelease_ita"); }
        }

        /// <summary>
        /// Permette ai pacchetti prelease di essere installati. Questo flag non è richiesto quando si ripristinano pacchetti installando da packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_ita()
        {
            return GetString("InstallCommandPrerelease_ita");
        }

        /// <summary>
        /// プレリリース パッケージのインストールを許可します。packages.config からインストールしてパッケージを復元する場合、このフラグは必要ありません。
        /// </summary>
        internal static string InstallCommandPrerelease_jpn
        {
            get { return GetString("InstallCommandPrerelease_jpn"); }
        }

        /// <summary>
        /// プレリリース パッケージのインストールを許可します。packages.config からインストールしてパッケージを復元する場合、このフラグは必要ありません。
        /// </summary>
        internal static string FormatInstallCommandPrerelease_jpn()
        {
            return GetString("InstallCommandPrerelease_jpn");
        }

        /// <summary>
        /// 시험판 패키지를 설치하도록 허용합니다. packages.config에서 설치하여 패키지를 복원하는 경우 이 플래그는 필요하지 않습니다.
        /// </summary>
        internal static string InstallCommandPrerelease_kor
        {
            get { return GetString("InstallCommandPrerelease_kor"); }
        }

        /// <summary>
        /// 시험판 패키지를 설치하도록 허용합니다. packages.config에서 설치하여 패키지를 복원하는 경우 이 플래그는 필요하지 않습니다.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_kor()
        {
            return GetString("InstallCommandPrerelease_kor");
        }

        /// <summary>
        /// Zezwala na zainstalowanie pakietów w wersji wstępnej. Ta flaga nie jest wymagana podczas przywracania pakietów przez instalację z pliku packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_plk
        {
            get { return GetString("InstallCommandPrerelease_plk"); }
        }

        /// <summary>
        /// Zezwala na zainstalowanie pakietów w wersji wstępnej. Ta flaga nie jest wymagana podczas przywracania pakietów przez instalację z pliku packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_plk()
        {
            return GetString("InstallCommandPrerelease_plk");
        }

        /// <summary>
        /// Permite que pacotes de pré-lançamento sejam instalados. Este sinal não é obrigatório ao restaurar pacotes pela instalação de packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_ptb
        {
            get { return GetString("InstallCommandPrerelease_ptb"); }
        }

        /// <summary>
        /// Permite que pacotes de pré-lançamento sejam instalados. Este sinal não é obrigatório ao restaurar pacotes pela instalação de packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_ptb()
        {
            return GetString("InstallCommandPrerelease_ptb");
        }

        /// <summary>
        /// Разрешает установку предварительных версий пакетов. Этот флаг не нужен при восстановлении пакетов путем установки из packages.config.
        /// </summary>
        internal static string InstallCommandPrerelease_rus
        {
            get { return GetString("InstallCommandPrerelease_rus"); }
        }

        /// <summary>
        /// Разрешает установку предварительных версий пакетов. Этот флаг не нужен при восстановлении пакетов путем установки из packages.config.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_rus()
        {
            return GetString("InstallCommandPrerelease_rus");
        }

        /// <summary>
        /// Önsürüm paketlerinin yüklenmesine izin verir. Paketler packages.config üzerinden geri yüklendiğinde bu bayrağa gerek duyulmaz.
        /// </summary>
        internal static string InstallCommandPrerelease_trk
        {
            get { return GetString("InstallCommandPrerelease_trk"); }
        }

        /// <summary>
        /// Önsürüm paketlerinin yüklenmesine izin verir. Paketler packages.config üzerinden geri yüklendiğinde bu bayrağa gerek duyulmaz.
        /// </summary>
        internal static string FormatInstallCommandPrerelease_trk()
        {
            return GetString("InstallCommandPrerelease_trk");
        }

        /// <summary>
        /// 允许安装预发布程序包。通过从 packages.config 安装来还原程序包时，不需要此标志。
        /// </summary>
        internal static string InstallCommandPrerelease_chs
        {
            get { return GetString("InstallCommandPrerelease_chs"); }
        }

        /// <summary>
        /// 允许安装预发布程序包。通过从 packages.config 安装来还原程序包时，不需要此标志。
        /// </summary>
        internal static string FormatInstallCommandPrerelease_chs()
        {
            return GetString("InstallCommandPrerelease_chs");
        }

        /// <summary>
        /// 允許安裝預先發行的封裝。若從 packages.config 安裝來還原封裝時則不需要此標幟。
        /// </summary>
        internal static string InstallCommandPrerelease_cht
        {
            get { return GetString("InstallCommandPrerelease_cht"); }
        }

        /// <summary>
        /// 允許安裝預先發行的封裝。若從 packages.config 安裝來還原封裝時則不需要此標幟。
        /// </summary>
        internal static string FormatInstallCommandPrerelease_cht()
        {
            return GetString("InstallCommandPrerelease_cht");
        }

        /// <summary>
        /// Seznam zdrojů balíčků pro použití při instalaci
        /// </summary>
        internal static string InstallCommandSourceDescription_csy
        {
            get { return GetString("InstallCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Seznam zdrojů balíčků pro použití při instalaci
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_csy()
        {
            return GetString("InstallCommandSourceDescription_csy");
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die für die Installation verwendet werden sollen.
        /// </summary>
        internal static string InstallCommandSourceDescription_deu
        {
            get { return GetString("InstallCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die für die Installation verwendet werden sollen.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_deu()
        {
            return GetString("InstallCommandSourceDescription_deu");
        }

        /// <summary>
        /// Lista de orígenes de paquetes que se usa para la instalación.
        /// </summary>
        internal static string InstallCommandSourceDescription_esp
        {
            get { return GetString("InstallCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Lista de orígenes de paquetes que se usa para la instalación.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_esp()
        {
            return GetString("InstallCommandSourceDescription_esp");
        }

        /// <summary>
        /// Liste de sources de packages à utiliser pour l'installation.
        /// </summary>
        internal static string InstallCommandSourceDescription_fra
        {
            get { return GetString("InstallCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Liste de sources de packages à utiliser pour l'installation.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_fra()
        {
            return GetString("InstallCommandSourceDescription_fra");
        }

        /// <summary>
        /// Lista di fonti pacchetto da usare per l'installazione.
        /// </summary>
        internal static string InstallCommandSourceDescription_ita
        {
            get { return GetString("InstallCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Lista di fonti pacchetto da usare per l'installazione.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_ita()
        {
            return GetString("InstallCommandSourceDescription_ita");
        }

        /// <summary>
        /// インストールに使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string InstallCommandSourceDescription_jpn
        {
            get { return GetString("InstallCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// インストールに使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_jpn()
        {
            return GetString("InstallCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 설치 시 사용되는 패키지 소스 목록입니다.
        /// </summary>
        internal static string InstallCommandSourceDescription_kor
        {
            get { return GetString("InstallCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 설치 시 사용되는 패키지 소스 목록입니다.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_kor()
        {
            return GetString("InstallCommandSourceDescription_kor");
        }

        /// <summary>
        /// Lista źródeł pakietów do użycia podczas instalacji.
        /// </summary>
        internal static string InstallCommandSourceDescription_plk
        {
            get { return GetString("InstallCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Lista źródeł pakietów do użycia podczas instalacji.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_plk()
        {
            return GetString("InstallCommandSourceDescription_plk");
        }

        /// <summary>
        /// Uma lista de origens de pacotes para usar para a instalação.
        /// </summary>
        internal static string InstallCommandSourceDescription_ptb
        {
            get { return GetString("InstallCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Uma lista de origens de pacotes para usar para a instalação.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_ptb()
        {
            return GetString("InstallCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Список источников пакетов, используемых для установки.
        /// </summary>
        internal static string InstallCommandSourceDescription_rus
        {
            get { return GetString("InstallCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Список источников пакетов, используемых для установки.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_rus()
        {
            return GetString("InstallCommandSourceDescription_rus");
        }

        /// <summary>
        /// Yükleme için kullanılacak paketlerin listesi.
        /// </summary>
        internal static string InstallCommandSourceDescription_trk
        {
            get { return GetString("InstallCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Yükleme için kullanılacak paketlerin listesi.
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_trk()
        {
            return GetString("InstallCommandSourceDescription_trk");
        }

        /// <summary>
        /// 要用于安装的程序包源列表。
        /// </summary>
        internal static string InstallCommandSourceDescription_chs
        {
            get { return GetString("InstallCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 要用于安装的程序包源列表。
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_chs()
        {
            return GetString("InstallCommandSourceDescription_chs");
        }

        /// <summary>
        /// 要用來安裝的封裝來源清單。
        /// </summary>
        internal static string InstallCommandSourceDescription_cht
        {
            get { return GetString("InstallCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 要用來安裝的封裝來源清單。
        /// </summary>
        internal static string FormatInstallCommandSourceDescription_cht()
        {
            return GetString("InstallCommandSourceDescription_cht");
        }

        /// <summary>
        /// Určuje ID a volitelně také verzi balíčku, který se má nainstalovat. Je-li místo ID použita cesta k souboru packages.config, jsou nainstalovány všechny zde obsažené balíčky.
        /// </summary>
        internal static string InstallCommandUsageDescription_csy
        {
            get { return GetString("InstallCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Určuje ID a volitelně také verzi balíčku, který se má nainstalovat. Je-li místo ID použita cesta k souboru packages.config, jsou nainstalovány všechny zde obsažené balíčky.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_csy()
        {
            return GetString("InstallCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie die ID und optional die Version des zu installierenden Pakets an. Wenn ein Pfad zu einer Datei "packages.config" anstelle einer ID verwendet wird, werden alle darin enthaltenen Pakete installiert.
        /// </summary>
        internal static string InstallCommandUsageDescription_deu
        {
            get { return GetString("InstallCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie die ID und optional die Version des zu installierenden Pakets an. Wenn ein Pfad zu einer Datei "packages.config" anstelle einer ID verwendet wird, werden alle darin enthaltenen Pakete installiert.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_deu()
        {
            return GetString("InstallCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar el id. y opcionalmente la versión del paquete que se va a instalar. Si se usa una ruta de acceso a un archivo packages.config en lugar de un id., se instalan todos los paquetes que contiene.
        /// </summary>
        internal static string InstallCommandUsageDescription_esp
        {
            get { return GetString("InstallCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar el id. y opcionalmente la versión del paquete que se va a instalar. Si se usa una ruta de acceso a un archivo packages.config en lugar de un id., se instalan todos los paquetes que contiene.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_esp()
        {
            return GetString("InstallCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez l'ID et, éventuellement, la version du package à installer. Si le chemin d'accès au fichier packages.config est utilisé au lieu de l'ID, tous les packages qu'il contient seront installés.
        /// </summary>
        internal static string InstallCommandUsageDescription_fra
        {
            get { return GetString("InstallCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez l'ID et, éventuellement, la version du package à installer. Si le chemin d'accès au fichier packages.config est utilisé au lieu de l'ID, tous les packages qu'il contient seront installés.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_fra()
        {
            return GetString("InstallCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specificare l'ID e la versione del pacchetto da installare. Se si usa un percorso a packages.config invece di un id, saranno installati tutti i pacchetti che contiene.
        /// </summary>
        internal static string InstallCommandUsageDescription_ita
        {
            get { return GetString("InstallCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specificare l'ID e la versione del pacchetto da installare. Se si usa un percorso a packages.config invece di un id, saranno installati tutti i pacchetti che contiene.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_ita()
        {
            return GetString("InstallCommandUsageDescription_ita");
        }

        /// <summary>
        /// インストールするパッケージの ID と、必要に応じてバージョンを指定します。ID ではなく packages.config ファイルのパスを使用する場合、そのパスに含まれるすべてのパッケージがインストールされます。
        /// </summary>
        internal static string InstallCommandUsageDescription_jpn
        {
            get { return GetString("InstallCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// インストールするパッケージの ID と、必要に応じてバージョンを指定します。ID ではなく packages.config ファイルのパスを使用する場合、そのパスに含まれるすべてのパッケージがインストールされます。
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_jpn()
        {
            return GetString("InstallCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 설치할 패키지의 ID 및 버전(선택적)을 지정합니다. ID 대신 packages.config 파일 경로가 사용되는 경우 이 파일에 포함된 모든 패키지가 설치됩니다.
        /// </summary>
        internal static string InstallCommandUsageDescription_kor
        {
            get { return GetString("InstallCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 설치할 패키지의 ID 및 버전(선택적)을 지정합니다. ID 대신 packages.config 파일 경로가 사용되는 경우 이 파일에 포함된 모든 패키지가 설치됩니다.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_kor()
        {
            return GetString("InstallCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określ identyfikator i opcjonalnie wersję pakietu do zainstalowania. Jeśli zamiast identyfikatora zostanie użyta ścieżka do pliku packages.config, zostaną zainstalowane wszystkie pakiety zawarte w tym pliku.
        /// </summary>
        internal static string InstallCommandUsageDescription_plk
        {
            get { return GetString("InstallCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określ identyfikator i opcjonalnie wersję pakietu do zainstalowania. Jeśli zamiast identyfikatora zostanie użyta ścieżka do pliku packages.config, zostaną zainstalowane wszystkie pakiety zawarte w tym pliku.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_plk()
        {
            return GetString("InstallCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especifique a ID e, opcionalmente, a versão do pacote a ser instalado. Se for usado um caminho para um arquivo packages.config em vez de uma id, todos os pacotes que ele contém serão instalados.
        /// </summary>
        internal static string InstallCommandUsageDescription_ptb
        {
            get { return GetString("InstallCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especifique a ID e, opcionalmente, a versão do pacote a ser instalado. Se for usado um caminho para um arquivo packages.config em vez de uma id, todos os pacotes que ele contém serão instalados.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_ptb()
        {
            return GetString("InstallCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Укажите идентификатор и версию (необязательно) устанавливаемого пакета. Если вместо идентификатора используется путь к файлу packages.config, будут установлены все содержащиеся в нем пакеты.
        /// </summary>
        internal static string InstallCommandUsageDescription_rus
        {
            get { return GetString("InstallCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Укажите идентификатор и версию (необязательно) устанавливаемого пакета. Если вместо идентификатора используется путь к файлу packages.config, будут установлены все содержащиеся в нем пакеты.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_rus()
        {
            return GetString("InstallCommandUsageDescription_rus");
        }

        /// <summary>
        /// Yüklenecek paketin kimliğini ve isteğe bağlı olarak sürümünü belirtin. Kimlik yerine packages.config dosyasının yolu kullanılırsa, burada bulunan tüm paketler yüklenir.
        /// </summary>
        internal static string InstallCommandUsageDescription_trk
        {
            get { return GetString("InstallCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Yüklenecek paketin kimliğini ve isteğe bağlı olarak sürümünü belirtin. Kimlik yerine packages.config dosyasının yolu kullanılırsa, burada bulunan tüm paketler yüklenir.
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_trk()
        {
            return GetString("InstallCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定要安装的程序包的 ID 和版本(可选)。如果使用的是 packages.config 文件的路径(而不是 ID)，则将安装该路径包含的所有程序包。
        /// </summary>
        internal static string InstallCommandUsageDescription_chs
        {
            get { return GetString("InstallCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定要安装的程序包的 ID 和版本(可选)。如果使用的是 packages.config 文件的路径(而不是 ID)，则将安装该路径包含的所有程序包。
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_chs()
        {
            return GetString("InstallCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定要安裝的封裝 ID 和版本 (選擇性)。如果使用 packages.config 檔案的路徑而非 ID，則會安裝其包含的所有封裝。
        /// </summary>
        internal static string InstallCommandUsageDescription_cht
        {
            get { return GetString("InstallCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定要安裝的封裝 ID 和版本 (選擇性)。如果使用 packages.config 檔案的路徑而非 ID，則會安裝其包含的所有封裝。
        /// </summary>
        internal static string FormatInstallCommandUsageDescription_cht()
        {
            return GetString("InstallCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_csy
        {
            get { return GetString("InstallCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_csy()
        {
            return GetString("InstallCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_deu
        {
            get { return GetString("InstallCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_deu()
        {
            return GetString("InstallCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_esp
        {
            get { return GetString("InstallCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_esp()
        {
            return GetString("InstallCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_fra
        {
            get { return GetString("InstallCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_fra()
        {
            return GetString("InstallCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_ita
        {
            get { return GetString("InstallCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_ita()
        {
            return GetString("InstallCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_jpn
        {
            get { return GetString("InstallCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_jpn()
        {
            return GetString("InstallCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_kor
        {
            get { return GetString("InstallCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_kor()
        {
            return GetString("InstallCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_plk
        {
            get { return GetString("InstallCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_plk()
        {
            return GetString("InstallCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_ptb
        {
            get { return GetString("InstallCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_ptb()
        {
            return GetString("InstallCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_rus
        {
            get { return GetString("InstallCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_rus()
        {
            return GetString("InstallCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_trk
        {
            get { return GetString("InstallCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_trk()
        {
            return GetString("InstallCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_chs
        {
            get { return GetString("InstallCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_chs()
        {
            return GetString("InstallCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string InstallCommandUsageExamples_cht
        {
            get { return GetString("InstallCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget install elmah
        /// 
        /// nuget install packages.config
        /// 
        /// nuget install ninject -o c:\foo
        /// </summary>
        internal static string FormatInstallCommandUsageExamples_cht()
        {
            return GetString("InstallCommandUsageExamples_cht");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [možnosti]
        /// </summary>
        internal static string InstallCommandUsageSummary_csy
        {
            get { return GetString("InstallCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [možnosti]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_csy()
        {
            return GetString("InstallCommandUsageSummary_csy");
        }

        /// <summary>
        /// PaketID|PfadzurPaketkonfiguration [Optionen]
        /// </summary>
        internal static string InstallCommandUsageSummary_deu
        {
            get { return GetString("InstallCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// PaketID|PfadzurPaketkonfiguration [Optionen]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_deu()
        {
            return GetString("InstallCommandUsageSummary_deu");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [opciones]
        /// </summary>
        internal static string InstallCommandUsageSummary_esp
        {
            get { return GetString("InstallCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [opciones]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_esp()
        {
            return GetString("InstallCommandUsageSummary_esp");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string InstallCommandUsageSummary_fra
        {
            get { return GetString("InstallCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_fra()
        {
            return GetString("InstallCommandUsageSummary_fra");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string InstallCommandUsageSummary_ita
        {
            get { return GetString("InstallCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_ita()
        {
            return GetString("InstallCommandUsageSummary_ita");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string InstallCommandUsageSummary_jpn
        {
            get { return GetString("InstallCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_jpn()
        {
            return GetString("InstallCommandUsageSummary_jpn");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [옵션]
        /// </summary>
        internal static string InstallCommandUsageSummary_kor
        {
            get { return GetString("InstallCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [옵션]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_kor()
        {
            return GetString("InstallCommandUsageSummary_kor");
        }

        /// <summary>
        /// identyfikator_pakietu|ścieżka_do_PackagesConfig [opcje]
        /// </summary>
        internal static string InstallCommandUsageSummary_plk
        {
            get { return GetString("InstallCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// identyfikator_pakietu|ścieżka_do_PackagesConfig [opcje]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_plk()
        {
            return GetString("InstallCommandUsageSummary_plk");
        }

        /// <summary>
        /// Idpacote|CaminhoParaConfigDePacotes [opções]
        /// </summary>
        internal static string InstallCommandUsageSummary_ptb
        {
            get { return GetString("InstallCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// Idpacote|CaminhoParaConfigDePacotes [opções]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_ptb()
        {
            return GetString("InstallCommandUsageSummary_ptb");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [параметры]
        /// </summary>
        internal static string InstallCommandUsageSummary_rus
        {
            get { return GetString("InstallCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [параметры]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_rus()
        {
            return GetString("InstallCommandUsageSummary_rus");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string InstallCommandUsageSummary_trk
        {
            get { return GetString("InstallCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [options]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_trk()
        {
            return GetString("InstallCommandUsageSummary_trk");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [选项]
        /// </summary>
        internal static string InstallCommandUsageSummary_chs
        {
            get { return GetString("InstallCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [选项]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_chs()
        {
            return GetString("InstallCommandUsageSummary_chs");
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [選項]
        /// </summary>
        internal static string InstallCommandUsageSummary_cht
        {
            get { return GetString("InstallCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// packageId|pathToPackagesConfig [選項]
        /// </summary>
        internal static string FormatInstallCommandUsageSummary_cht()
        {
            return GetString("InstallCommandUsageSummary_cht");
        }

        /// <summary>
        /// Verze balíčku, který se má nainstalovat
        /// </summary>
        internal static string InstallCommandVersionDescription_csy
        {
            get { return GetString("InstallCommandVersionDescription_csy"); }
        }

        /// <summary>
        /// Verze balíčku, který se má nainstalovat
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_csy()
        {
            return GetString("InstallCommandVersionDescription_csy");
        }

        /// <summary>
        /// Die Version des zu installierenden Pakets.
        /// </summary>
        internal static string InstallCommandVersionDescription_deu
        {
            get { return GetString("InstallCommandVersionDescription_deu"); }
        }

        /// <summary>
        /// Die Version des zu installierenden Pakets.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_deu()
        {
            return GetString("InstallCommandVersionDescription_deu");
        }

        /// <summary>
        /// Versión del paquete que se va a instalar.
        /// </summary>
        internal static string InstallCommandVersionDescription_esp
        {
            get { return GetString("InstallCommandVersionDescription_esp"); }
        }

        /// <summary>
        /// Versión del paquete que se va a instalar.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_esp()
        {
            return GetString("InstallCommandVersionDescription_esp");
        }

        /// <summary>
        /// Version du package à installer.
        /// </summary>
        internal static string InstallCommandVersionDescription_fra
        {
            get { return GetString("InstallCommandVersionDescription_fra"); }
        }

        /// <summary>
        /// Version du package à installer.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_fra()
        {
            return GetString("InstallCommandVersionDescription_fra");
        }

        /// <summary>
        /// La versione del pacchetto da installare.
        /// </summary>
        internal static string InstallCommandVersionDescription_ita
        {
            get { return GetString("InstallCommandVersionDescription_ita"); }
        }

        /// <summary>
        /// La versione del pacchetto da installare.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_ita()
        {
            return GetString("InstallCommandVersionDescription_ita");
        }

        /// <summary>
        /// インストールするパッケージのバージョン。
        /// </summary>
        internal static string InstallCommandVersionDescription_jpn
        {
            get { return GetString("InstallCommandVersionDescription_jpn"); }
        }

        /// <summary>
        /// インストールするパッケージのバージョン。
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_jpn()
        {
            return GetString("InstallCommandVersionDescription_jpn");
        }

        /// <summary>
        /// 설치할 패키지의 버전입니다.
        /// </summary>
        internal static string InstallCommandVersionDescription_kor
        {
            get { return GetString("InstallCommandVersionDescription_kor"); }
        }

        /// <summary>
        /// 설치할 패키지의 버전입니다.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_kor()
        {
            return GetString("InstallCommandVersionDescription_kor");
        }

        /// <summary>
        /// Wersja pakietu do zainstalowania.
        /// </summary>
        internal static string InstallCommandVersionDescription_plk
        {
            get { return GetString("InstallCommandVersionDescription_plk"); }
        }

        /// <summary>
        /// Wersja pakietu do zainstalowania.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_plk()
        {
            return GetString("InstallCommandVersionDescription_plk");
        }

        /// <summary>
        /// A versão do pacote a ser instalado.
        /// </summary>
        internal static string InstallCommandVersionDescription_ptb
        {
            get { return GetString("InstallCommandVersionDescription_ptb"); }
        }

        /// <summary>
        /// A versão do pacote a ser instalado.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_ptb()
        {
            return GetString("InstallCommandVersionDescription_ptb");
        }

        /// <summary>
        /// Версия устанавливаемого пакета.
        /// </summary>
        internal static string InstallCommandVersionDescription_rus
        {
            get { return GetString("InstallCommandVersionDescription_rus"); }
        }

        /// <summary>
        /// Версия устанавливаемого пакета.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_rus()
        {
            return GetString("InstallCommandVersionDescription_rus");
        }

        /// <summary>
        /// Yüklenecek paketin sürümü.
        /// </summary>
        internal static string InstallCommandVersionDescription_trk
        {
            get { return GetString("InstallCommandVersionDescription_trk"); }
        }

        /// <summary>
        /// Yüklenecek paketin sürümü.
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_trk()
        {
            return GetString("InstallCommandVersionDescription_trk");
        }

        /// <summary>
        /// 要安装的程序包的版本。
        /// </summary>
        internal static string InstallCommandVersionDescription_chs
        {
            get { return GetString("InstallCommandVersionDescription_chs"); }
        }

        /// <summary>
        /// 要安装的程序包的版本。
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_chs()
        {
            return GetString("InstallCommandVersionDescription_chs");
        }

        /// <summary>
        /// 要安裝的封裝版本。
        /// </summary>
        internal static string InstallCommandVersionDescription_cht
        {
            get { return GetString("InstallCommandVersionDescription_cht"); }
        }

        /// <summary>
        /// 要安裝的封裝版本。
        /// </summary>
        internal static string FormatInstallCommandVersionDescription_cht()
        {
            return GetString("InstallCommandVersionDescription_cht");
        }

        /// <summary>
        /// Zobrazí seznam všech verzí balíčku. Ve výchozím nastavení se zobrazí pouze nejnovější verze balíčku.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_csy
        {
            get { return GetString("ListCommandAllVersionsDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí seznam všech verzí balíčku. Ve výchozím nastavení se zobrazí pouze nejnovější verze balíčku.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_csy()
        {
            return GetString("ListCommandAllVersionsDescription_csy");
        }

        /// <summary>
        /// Listet alle Versionen eines Pakets auf. Standardmäßig wird nur die letzte Paketversion angezeigt.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_deu
        {
            get { return GetString("ListCommandAllVersionsDescription_deu"); }
        }

        /// <summary>
        /// Listet alle Versionen eines Pakets auf. Standardmäßig wird nur die letzte Paketversion angezeigt.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_deu()
        {
            return GetString("ListCommandAllVersionsDescription_deu");
        }

        /// <summary>
        /// Muestra todas las versiones de un paquete. De forma predeterminada, solo se muestra la versión del paquete más reciente.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_esp
        {
            get { return GetString("ListCommandAllVersionsDescription_esp"); }
        }

        /// <summary>
        /// Muestra todas las versiones de un paquete. De forma predeterminada, solo se muestra la versión del paquete más reciente.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_esp()
        {
            return GetString("ListCommandAllVersionsDescription_esp");
        }

        /// <summary>
        /// Répertorie toutes les versions d'un package. Seule la dernière version du package est affichée par défaut.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_fra
        {
            get { return GetString("ListCommandAllVersionsDescription_fra"); }
        }

        /// <summary>
        /// Répertorie toutes les versions d'un package. Seule la dernière version du package est affichée par défaut.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_fra()
        {
            return GetString("ListCommandAllVersionsDescription_fra");
        }

        /// <summary>
        /// Elencare tutte le versioni di un pacchetto. Per dafault, si visualizza solo l'ultima versione
        /// </summary>
        internal static string ListCommandAllVersionsDescription_ita
        {
            get { return GetString("ListCommandAllVersionsDescription_ita"); }
        }

        /// <summary>
        /// Elencare tutte le versioni di un pacchetto. Per dafault, si visualizza solo l'ultima versione
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_ita()
        {
            return GetString("ListCommandAllVersionsDescription_ita");
        }

        /// <summary>
        /// パッケージのすべてのバージョンを表示します。既定では、最新のパッケージ バージョンのみが表示されます。
        /// </summary>
        internal static string ListCommandAllVersionsDescription_jpn
        {
            get { return GetString("ListCommandAllVersionsDescription_jpn"); }
        }

        /// <summary>
        /// パッケージのすべてのバージョンを表示します。既定では、最新のパッケージ バージョンのみが表示されます。
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_jpn()
        {
            return GetString("ListCommandAllVersionsDescription_jpn");
        }

        /// <summary>
        /// 모든 패키지 버전을 나열합니다. 기본적으로 최신 패키지 버전만 표시됩니다.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_kor
        {
            get { return GetString("ListCommandAllVersionsDescription_kor"); }
        }

        /// <summary>
        /// 모든 패키지 버전을 나열합니다. 기본적으로 최신 패키지 버전만 표시됩니다.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_kor()
        {
            return GetString("ListCommandAllVersionsDescription_kor");
        }

        /// <summary>
        /// Lista wszystkich wersji pakietu. Domyślnie wyświetlana jest tylko najnowsza wersja pakietu.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_plk
        {
            get { return GetString("ListCommandAllVersionsDescription_plk"); }
        }

        /// <summary>
        /// Lista wszystkich wersji pakietu. Domyślnie wyświetlana jest tylko najnowsza wersja pakietu.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_plk()
        {
            return GetString("ListCommandAllVersionsDescription_plk");
        }

        /// <summary>
        /// Liste todas as versões de um pacote. Por padrão, apenas a versão mais recente do pacote é exibida.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_ptb
        {
            get { return GetString("ListCommandAllVersionsDescription_ptb"); }
        }

        /// <summary>
        /// Liste todas as versões de um pacote. Por padrão, apenas a versão mais recente do pacote é exibida.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_ptb()
        {
            return GetString("ListCommandAllVersionsDescription_ptb");
        }

        /// <summary>
        /// Выводит список всех версий пакета. По умолчанию отображается только последняя версия пакета.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_rus
        {
            get { return GetString("ListCommandAllVersionsDescription_rus"); }
        }

        /// <summary>
        /// Выводит список всех версий пакета. По умолчанию отображается только последняя версия пакета.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_rus()
        {
            return GetString("ListCommandAllVersionsDescription_rus");
        }

        /// <summary>
        /// Bir paketin tüm sürümlerini listele. Varsayılan olarak yalnızca son paket sürümü görüntülenir.
        /// </summary>
        internal static string ListCommandAllVersionsDescription_trk
        {
            get { return GetString("ListCommandAllVersionsDescription_trk"); }
        }

        /// <summary>
        /// Bir paketin tüm sürümlerini listele. Varsayılan olarak yalnızca son paket sürümü görüntülenir.
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_trk()
        {
            return GetString("ListCommandAllVersionsDescription_trk");
        }

        /// <summary>
        /// 列出程序包的所有版本。默认情况下，只显示最新程序包版本。
        /// </summary>
        internal static string ListCommandAllVersionsDescription_chs
        {
            get { return GetString("ListCommandAllVersionsDescription_chs"); }
        }

        /// <summary>
        /// 列出程序包的所有版本。默认情况下，只显示最新程序包版本。
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_chs()
        {
            return GetString("ListCommandAllVersionsDescription_chs");
        }

        /// <summary>
        /// 列出封裝的所有版本。依預設，僅會顯示最新的封裝版本。
        /// </summary>
        internal static string ListCommandAllVersionsDescription_cht
        {
            get { return GetString("ListCommandAllVersionsDescription_cht"); }
        }

        /// <summary>
        /// 列出封裝的所有版本。依預設，僅會顯示最新的封裝版本。
        /// </summary>
        internal static string FormatListCommandAllVersionsDescription_cht()
        {
            return GetString("ListCommandAllVersionsDescription_cht");
        }

        /// <summary>
        /// Zobrazí seznam balíčků ze zadaného zdroje. Pokud není zadán žádný zdroj, použijí se všechny zdroje definované v souboru %AppData%\NuGet\NuGet.config. Pokud soubor NuGet.config nespecifikuje žádné zdroje, použije se výchozí informační kanál NuGet.
        /// </summary>
        internal static string ListCommandDescription_csy
        {
            get { return GetString("ListCommandDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí seznam balíčků ze zadaného zdroje. Pokud není zadán žádný zdroj, použijí se všechny zdroje definované v souboru %AppData%\NuGet\NuGet.config. Pokud soubor NuGet.config nespecifikuje žádné zdroje, použije se výchozí informační kanál NuGet.
        /// </summary>
        internal static string FormatListCommandDescription_csy()
        {
            return GetString("ListCommandDescription_csy");
        }

        /// <summary>
        /// Zeigt eine Liste der Pakete aus einer angegebenen Quelle an. Wenn keine Quellen angegeben werden, werden alle in "%AppData%\NuGet\NuGet.config" definierten Quellen verwendet. Wenn "NuGet.config" keine Quellen angibt, wird der NuGet-Standardfeed verwendet.
        /// </summary>
        internal static string ListCommandDescription_deu
        {
            get { return GetString("ListCommandDescription_deu"); }
        }

        /// <summary>
        /// Zeigt eine Liste der Pakete aus einer angegebenen Quelle an. Wenn keine Quellen angegeben werden, werden alle in "%AppData%\NuGet\NuGet.config" definierten Quellen verwendet. Wenn "NuGet.config" keine Quellen angibt, wird der NuGet-Standardfeed verwendet.
        /// </summary>
        internal static string FormatListCommandDescription_deu()
        {
            return GetString("ListCommandDescription_deu");
        }

        /// <summary>
        /// Muestra una lista de paquetes de un origen especificado. Si no se especifican orígenes, se usan todos los orígenes definidos en %AppData%\NuGet\NuGet.config. Si NuGet.config no especifica ningún origen, usa la fuente NuGet predeterminada.
        /// </summary>
        internal static string ListCommandDescription_esp
        {
            get { return GetString("ListCommandDescription_esp"); }
        }

        /// <summary>
        /// Muestra una lista de paquetes de un origen especificado. Si no se especifican orígenes, se usan todos los orígenes definidos en %AppData%\NuGet\NuGet.config. Si NuGet.config no especifica ningún origen, usa la fuente NuGet predeterminada.
        /// </summary>
        internal static string FormatListCommandDescription_esp()
        {
            return GetString("ListCommandDescription_esp");
        }

        /// <summary>
        /// Affiche la liste des packages d'une source donnée. Si aucune source n'est spécifiée, toutes les sources définies dans %AppData%\NuGet\NuGet.config seront utilisées. Si NuGet.config ne spécifie aucune source, il s'alimentera du flux NuGet par défaut.
        /// </summary>
        internal static string ListCommandDescription_fra
        {
            get { return GetString("ListCommandDescription_fra"); }
        }

        /// <summary>
        /// Affiche la liste des packages d'une source donnée. Si aucune source n'est spécifiée, toutes les sources définies dans %AppData%\NuGet\NuGet.config seront utilisées. Si NuGet.config ne spécifie aucune source, il s'alimentera du flux NuGet par défaut.
        /// </summary>
        internal static string FormatListCommandDescription_fra()
        {
            return GetString("ListCommandDescription_fra");
        }

        /// <summary>
        /// Visualizza un elenco pacchetti da una data fonte. Se non è specificata alcuna fonta, tutte le fonti definite in %AppData%\NuGet\NuGet.config saranno usate. Se NuGet.config non specifica fonti. Usare il feed NuGet di default.
        /// </summary>
        internal static string ListCommandDescription_ita
        {
            get { return GetString("ListCommandDescription_ita"); }
        }

        /// <summary>
        /// Visualizza un elenco pacchetti da una data fonte. Se non è specificata alcuna fonta, tutte le fonti definite in %AppData%\NuGet\NuGet.config saranno usate. Se NuGet.config non specifica fonti. Usare il feed NuGet di default.
        /// </summary>
        internal static string FormatListCommandDescription_ita()
        {
            return GetString("ListCommandDescription_ita");
        }

        /// <summary>
        /// 指定したソースのパッケージ一覧を表示します。ソースが指定されていない場合、%AppData%\NuGet\NuGet.config に定義されているすべてのソースが使用されます。NuGet.config にソースが指定されていない場合、既定の NuGet フィードが使用されます。
        /// </summary>
        internal static string ListCommandDescription_jpn
        {
            get { return GetString("ListCommandDescription_jpn"); }
        }

        /// <summary>
        /// 指定したソースのパッケージ一覧を表示します。ソースが指定されていない場合、%AppData%\NuGet\NuGet.config に定義されているすべてのソースが使用されます。NuGet.config にソースが指定されていない場合、既定の NuGet フィードが使用されます。
        /// </summary>
        internal static string FormatListCommandDescription_jpn()
        {
            return GetString("ListCommandDescription_jpn");
        }

        /// <summary>
        /// 지정한 소스의 패키지 목록을 표시합니다. 소스가 지정되지 않은 경우 %AppData%\NuGet\NuGet.config에 정의된 모든 소스가 사용됩니다. NuGet.config로도 소스가 지정되지 않으면 기본 NuGet 피드가 사용됩니다.
        /// </summary>
        internal static string ListCommandDescription_kor
        {
            get { return GetString("ListCommandDescription_kor"); }
        }

        /// <summary>
        /// 지정한 소스의 패키지 목록을 표시합니다. 소스가 지정되지 않은 경우 %AppData%\NuGet\NuGet.config에 정의된 모든 소스가 사용됩니다. NuGet.config로도 소스가 지정되지 않으면 기본 NuGet 피드가 사용됩니다.
        /// </summary>
        internal static string FormatListCommandDescription_kor()
        {
            return GetString("ListCommandDescription_kor");
        }

        /// <summary>
        /// Wyświetla listę pakietów z danego źródła. Jeśli nie zostaną określone żadne źródła, są używane wszystkie źródła zdefiniowane w pliku %AppData%\NuGet\NuGet.config. Jeśli w pliku NuGet.config nie określono żadnych źródeł, jest używane domyślne źródło NuGet.
        /// </summary>
        internal static string ListCommandDescription_plk
        {
            get { return GetString("ListCommandDescription_plk"); }
        }

        /// <summary>
        /// Wyświetla listę pakietów z danego źródła. Jeśli nie zostaną określone żadne źródła, są używane wszystkie źródła zdefiniowane w pliku %AppData%\NuGet\NuGet.config. Jeśli w pliku NuGet.config nie określono żadnych źródeł, jest używane domyślne źródło NuGet.
        /// </summary>
        internal static string FormatListCommandDescription_plk()
        {
            return GetString("ListCommandDescription_plk");
        }

        /// <summary>
        /// Exibe uma lista de pacotes de uma determinada origem. Se não houver origens especificadas, todas as origens definidas em %AppData%\NuGet\NuGet.config serão usadas. Se NuGet.config não especificar nenhuma origem, usa o feed NuGet padrão.
        /// </summary>
        internal static string ListCommandDescription_ptb
        {
            get { return GetString("ListCommandDescription_ptb"); }
        }

        /// <summary>
        /// Exibe uma lista de pacotes de uma determinada origem. Se não houver origens especificadas, todas as origens definidas em %AppData%\NuGet\NuGet.config serão usadas. Se NuGet.config não especificar nenhuma origem, usa o feed NuGet padrão.
        /// </summary>
        internal static string FormatListCommandDescription_ptb()
        {
            return GetString("ListCommandDescription_ptb");
        }

        /// <summary>
        /// Отображает список пакетов из указанного источника. Если источники не указаны, используются все источники, определенные в %AppData%\NuGet\NuGet.config. Если источники не указаны в NuGet.config, используется канал NuGet по умолчанию.
        /// </summary>
        internal static string ListCommandDescription_rus
        {
            get { return GetString("ListCommandDescription_rus"); }
        }

        /// <summary>
        /// Отображает список пакетов из указанного источника. Если источники не указаны, используются все источники, определенные в %AppData%\NuGet\NuGet.config. Если источники не указаны в NuGet.config, используется канал NuGet по умолчанию.
        /// </summary>
        internal static string FormatListCommandDescription_rus()
        {
            return GetString("ListCommandDescription_rus");
        }

        /// <summary>
        /// Belirli bir kaynaktan paket listesini görüntüler. Hiçbir kaynak belirtilmemişse, %AppData%\NuGet\NuGet.config içinde belirtilen tüm kaynaklar kullanılır. NuGet.config hiçbir kaynak belirtmiyorsa, varsayılan NuGet akışını kullanır.
        /// </summary>
        internal static string ListCommandDescription_trk
        {
            get { return GetString("ListCommandDescription_trk"); }
        }

        /// <summary>
        /// Belirli bir kaynaktan paket listesini görüntüler. Hiçbir kaynak belirtilmemişse, %AppData%\NuGet\NuGet.config içinde belirtilen tüm kaynaklar kullanılır. NuGet.config hiçbir kaynak belirtmiyorsa, varsayılan NuGet akışını kullanır.
        /// </summary>
        internal static string FormatListCommandDescription_trk()
        {
            return GetString("ListCommandDescription_trk");
        }

        /// <summary>
        /// 显示给定源中的程序包列表。如果未指定源，则使用 %AppData%\NuGet\NuGet.config 中定义的所有源。如果 NuGet.config 未指定源，则使用默认 NuGet 源。
        /// </summary>
        internal static string ListCommandDescription_chs
        {
            get { return GetString("ListCommandDescription_chs"); }
        }

        /// <summary>
        /// 显示给定源中的程序包列表。如果未指定源，则使用 %AppData%\NuGet\NuGet.config 中定义的所有源。如果 NuGet.config 未指定源，则使用默认 NuGet 源。
        /// </summary>
        internal static string FormatListCommandDescription_chs()
        {
            return GetString("ListCommandDescription_chs");
        }

        /// <summary>
        /// 顯示給定來源的封裝清單。如果未指定來源，已使用 %AppData%\NuGet\NuGet.config 中定義的所有來源。如果 NuGet.config 並未指定來源，使用預設的 NuGet 摘要。
        /// </summary>
        internal static string ListCommandDescription_cht
        {
            get { return GetString("ListCommandDescription_cht"); }
        }

        /// <summary>
        /// 顯示給定來源的封裝清單。如果未指定來源，已使用 %AppData%\NuGet\NuGet.config 中定義的所有來源。如果 NuGet.config 並未指定來源，使用預設的 NuGet 摘要。
        /// </summary>
        internal static string FormatListCommandDescription_cht()
        {
            return GetString("ListCommandDescription_cht");
        }

        /// <summary>
        /// Umožňuje zobrazit předběžné verze balíčků.
        /// </summary>
        internal static string ListCommandPrerelease_csy
        {
            get { return GetString("ListCommandPrerelease_csy"); }
        }

        /// <summary>
        /// Umožňuje zobrazit předběžné verze balíčků.
        /// </summary>
        internal static string FormatListCommandPrerelease_csy()
        {
            return GetString("ListCommandPrerelease_csy");
        }

        /// <summary>
        /// Ermöglicht die Anzeige von Vorabversionspaketen.
        /// </summary>
        internal static string ListCommandPrerelease_deu
        {
            get { return GetString("ListCommandPrerelease_deu"); }
        }

        /// <summary>
        /// Ermöglicht die Anzeige von Vorabversionspaketen.
        /// </summary>
        internal static string FormatListCommandPrerelease_deu()
        {
            return GetString("ListCommandPrerelease_deu");
        }

        /// <summary>
        /// Permitir que se muestren los paquetes de versión preliminar.
        /// </summary>
        internal static string ListCommandPrerelease_esp
        {
            get { return GetString("ListCommandPrerelease_esp"); }
        }

        /// <summary>
        /// Permitir que se muestren los paquetes de versión preliminar.
        /// </summary>
        internal static string FormatListCommandPrerelease_esp()
        {
            return GetString("ListCommandPrerelease_esp");
        }

        /// <summary>
        /// Permet l'affichage de la version préliminaire des packages.
        /// </summary>
        internal static string ListCommandPrerelease_fra
        {
            get { return GetString("ListCommandPrerelease_fra"); }
        }

        /// <summary>
        /// Permet l'affichage de la version préliminaire des packages.
        /// </summary>
        internal static string FormatListCommandPrerelease_fra()
        {
            return GetString("ListCommandPrerelease_fra");
        }

        /// <summary>
        /// Permette di visualizzare i pacchetti prerelease.
        /// </summary>
        internal static string ListCommandPrerelease_ita
        {
            get { return GetString("ListCommandPrerelease_ita"); }
        }

        /// <summary>
        /// Permette di visualizzare i pacchetti prerelease.
        /// </summary>
        internal static string FormatListCommandPrerelease_ita()
        {
            return GetString("ListCommandPrerelease_ita");
        }

        /// <summary>
        /// プレリリース パッケージの表示を許可します。
        /// </summary>
        internal static string ListCommandPrerelease_jpn
        {
            get { return GetString("ListCommandPrerelease_jpn"); }
        }

        /// <summary>
        /// プレリリース パッケージの表示を許可します。
        /// </summary>
        internal static string FormatListCommandPrerelease_jpn()
        {
            return GetString("ListCommandPrerelease_jpn");
        }

        /// <summary>
        /// 시험판 패키지를 표시하도록 허용합니다.
        /// </summary>
        internal static string ListCommandPrerelease_kor
        {
            get { return GetString("ListCommandPrerelease_kor"); }
        }

        /// <summary>
        /// 시험판 패키지를 표시하도록 허용합니다.
        /// </summary>
        internal static string FormatListCommandPrerelease_kor()
        {
            return GetString("ListCommandPrerelease_kor");
        }

        /// <summary>
        /// Zezwala na wyświetlanie pakietów w wersji wstępnej.
        /// </summary>
        internal static string ListCommandPrerelease_plk
        {
            get { return GetString("ListCommandPrerelease_plk"); }
        }

        /// <summary>
        /// Zezwala na wyświetlanie pakietów w wersji wstępnej.
        /// </summary>
        internal static string FormatListCommandPrerelease_plk()
        {
            return GetString("ListCommandPrerelease_plk");
        }

        /// <summary>
        /// Permita que os pacotes de pré-lançamento sejam mostrados.
        /// </summary>
        internal static string ListCommandPrerelease_ptb
        {
            get { return GetString("ListCommandPrerelease_ptb"); }
        }

        /// <summary>
        /// Permita que os pacotes de pré-lançamento sejam mostrados.
        /// </summary>
        internal static string FormatListCommandPrerelease_ptb()
        {
            return GetString("ListCommandPrerelease_ptb");
        }

        /// <summary>
        /// Разрешает отображение предварительных версий пакетов.
        /// </summary>
        internal static string ListCommandPrerelease_rus
        {
            get { return GetString("ListCommandPrerelease_rus"); }
        }

        /// <summary>
        /// Разрешает отображение предварительных версий пакетов.
        /// </summary>
        internal static string FormatListCommandPrerelease_rus()
        {
            return GetString("ListCommandPrerelease_rus");
        }

        /// <summary>
        /// Önsürüm paketlerinin gösterilmesine izin verir.
        /// </summary>
        internal static string ListCommandPrerelease_trk
        {
            get { return GetString("ListCommandPrerelease_trk"); }
        }

        /// <summary>
        /// Önsürüm paketlerinin gösterilmesine izin verir.
        /// </summary>
        internal static string FormatListCommandPrerelease_trk()
        {
            return GetString("ListCommandPrerelease_trk");
        }

        /// <summary>
        /// 允许显示预发布程序包。
        /// </summary>
        internal static string ListCommandPrerelease_chs
        {
            get { return GetString("ListCommandPrerelease_chs"); }
        }

        /// <summary>
        /// 允许显示预发布程序包。
        /// </summary>
        internal static string FormatListCommandPrerelease_chs()
        {
            return GetString("ListCommandPrerelease_chs");
        }

        /// <summary>
        /// 允許顯示預先發行的封裝。
        /// </summary>
        internal static string ListCommandPrerelease_cht
        {
            get { return GetString("ListCommandPrerelease_cht"); }
        }

        /// <summary>
        /// 允許顯示預先發行的封裝。
        /// </summary>
        internal static string FormatListCommandPrerelease_cht()
        {
            return GetString("ListCommandPrerelease_cht");
        }

        /// <summary>
        /// Seznam zdrojů balíčků k prohledání
        /// </summary>
        internal static string ListCommandSourceDescription_csy
        {
            get { return GetString("ListCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Seznam zdrojů balíčků k prohledání
        /// </summary>
        internal static string FormatListCommandSourceDescription_csy()
        {
            return GetString("ListCommandSourceDescription_csy");
        }

        /// <summary>
        /// Eine Liste der zu durchsuchenden Paketquellen.
        /// </summary>
        internal static string ListCommandSourceDescription_deu
        {
            get { return GetString("ListCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Eine Liste der zu durchsuchenden Paketquellen.
        /// </summary>
        internal static string FormatListCommandSourceDescription_deu()
        {
            return GetString("ListCommandSourceDescription_deu");
        }

        /// <summary>
        /// Lista de orígenes de paquetes para buscar.
        /// </summary>
        internal static string ListCommandSourceDescription_esp
        {
            get { return GetString("ListCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Lista de orígenes de paquetes para buscar.
        /// </summary>
        internal static string FormatListCommandSourceDescription_esp()
        {
            return GetString("ListCommandSourceDescription_esp");
        }

        /// <summary>
        /// Liste de sources de packages à rechercher.
        /// </summary>
        internal static string ListCommandSourceDescription_fra
        {
            get { return GetString("ListCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Liste de sources de packages à rechercher.
        /// </summary>
        internal static string FormatListCommandSourceDescription_fra()
        {
            return GetString("ListCommandSourceDescription_fra");
        }

        /// <summary>
        /// Un elenco di fonti pacchetti da ricercare.
        /// </summary>
        internal static string ListCommandSourceDescription_ita
        {
            get { return GetString("ListCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Un elenco di fonti pacchetti da ricercare.
        /// </summary>
        internal static string FormatListCommandSourceDescription_ita()
        {
            return GetString("ListCommandSourceDescription_ita");
        }

        /// <summary>
        /// 検索するパッケージ ソースの一覧。
        /// </summary>
        internal static string ListCommandSourceDescription_jpn
        {
            get { return GetString("ListCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// 検索するパッケージ ソースの一覧。
        /// </summary>
        internal static string FormatListCommandSourceDescription_jpn()
        {
            return GetString("ListCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 검색할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string ListCommandSourceDescription_kor
        {
            get { return GetString("ListCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 검색할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string FormatListCommandSourceDescription_kor()
        {
            return GetString("ListCommandSourceDescription_kor");
        }

        /// <summary>
        /// Lista źródeł pakietów do przeszukania.
        /// </summary>
        internal static string ListCommandSourceDescription_plk
        {
            get { return GetString("ListCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Lista źródeł pakietów do przeszukania.
        /// </summary>
        internal static string FormatListCommandSourceDescription_plk()
        {
            return GetString("ListCommandSourceDescription_plk");
        }

        /// <summary>
        /// Uma lista de origens de pacotes para pesquisar.
        /// </summary>
        internal static string ListCommandSourceDescription_ptb
        {
            get { return GetString("ListCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Uma lista de origens de pacotes para pesquisar.
        /// </summary>
        internal static string FormatListCommandSourceDescription_ptb()
        {
            return GetString("ListCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Список источников пакетов для поиска.
        /// </summary>
        internal static string ListCommandSourceDescription_rus
        {
            get { return GetString("ListCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Список источников пакетов для поиска.
        /// </summary>
        internal static string FormatListCommandSourceDescription_rus()
        {
            return GetString("ListCommandSourceDescription_rus");
        }

        /// <summary>
        /// Aranacak paket kaynaklarının listesi.
        /// </summary>
        internal static string ListCommandSourceDescription_trk
        {
            get { return GetString("ListCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Aranacak paket kaynaklarının listesi.
        /// </summary>
        internal static string FormatListCommandSourceDescription_trk()
        {
            return GetString("ListCommandSourceDescription_trk");
        }

        /// <summary>
        /// 要搜索的程序包源的列表。
        /// </summary>
        internal static string ListCommandSourceDescription_chs
        {
            get { return GetString("ListCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 要搜索的程序包源的列表。
        /// </summary>
        internal static string FormatListCommandSourceDescription_chs()
        {
            return GetString("ListCommandSourceDescription_chs");
        }

        /// <summary>
        /// 要搜尋的封裝來源清單。
        /// </summary>
        internal static string ListCommandSourceDescription_cht
        {
            get { return GetString("ListCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 要搜尋的封裝來源清單。
        /// </summary>
        internal static string FormatListCommandSourceDescription_cht()
        {
            return GetString("ListCommandSourceDescription_cht");
        }

        /// <summary>
        /// Zadejte volitelné hledané termíny.
        /// </summary>
        internal static string ListCommandUsageDescription_csy
        {
            get { return GetString("ListCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Zadejte volitelné hledané termíny.
        /// </summary>
        internal static string FormatListCommandUsageDescription_csy()
        {
            return GetString("ListCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie optionale Suchbegriffe an.
        /// </summary>
        internal static string ListCommandUsageDescription_deu
        {
            get { return GetString("ListCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie optionale Suchbegriffe an.
        /// </summary>
        internal static string FormatListCommandUsageDescription_deu()
        {
            return GetString("ListCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar términos de búsqueda opcionales.
        /// </summary>
        internal static string ListCommandUsageDescription_esp
        {
            get { return GetString("ListCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar términos de búsqueda opcionales.
        /// </summary>
        internal static string FormatListCommandUsageDescription_esp()
        {
            return GetString("ListCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez les termes optionnels recherchés.
        /// </summary>
        internal static string ListCommandUsageDescription_fra
        {
            get { return GetString("ListCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez les termes optionnels recherchés.
        /// </summary>
        internal static string FormatListCommandUsageDescription_fra()
        {
            return GetString("ListCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specifica i termini di ricerca opzionali.
        /// </summary>
        internal static string ListCommandUsageDescription_ita
        {
            get { return GetString("ListCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specifica i termini di ricerca opzionali.
        /// </summary>
        internal static string FormatListCommandUsageDescription_ita()
        {
            return GetString("ListCommandUsageDescription_ita");
        }

        /// <summary>
        /// 検索用語を指定します (省略可能)。
        /// </summary>
        internal static string ListCommandUsageDescription_jpn
        {
            get { return GetString("ListCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// 検索用語を指定します (省略可能)。
        /// </summary>
        internal static string FormatListCommandUsageDescription_jpn()
        {
            return GetString("ListCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 검색어를 지정합니다(선택적).
        /// </summary>
        internal static string ListCommandUsageDescription_kor
        {
            get { return GetString("ListCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 검색어를 지정합니다(선택적).
        /// </summary>
        internal static string FormatListCommandUsageDescription_kor()
        {
            return GetString("ListCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określ opcjonalne terminy wyszukiwania.
        /// </summary>
        internal static string ListCommandUsageDescription_plk
        {
            get { return GetString("ListCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określ opcjonalne terminy wyszukiwania.
        /// </summary>
        internal static string FormatListCommandUsageDescription_plk()
        {
            return GetString("ListCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especificar os termos de pesquisa opcionais.
        /// </summary>
        internal static string ListCommandUsageDescription_ptb
        {
            get { return GetString("ListCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especificar os termos de pesquisa opcionais.
        /// </summary>
        internal static string FormatListCommandUsageDescription_ptb()
        {
            return GetString("ListCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Выбор дополнительныех условий поиска.
        /// </summary>
        internal static string ListCommandUsageDescription_rus
        {
            get { return GetString("ListCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Выбор дополнительныех условий поиска.
        /// </summary>
        internal static string FormatListCommandUsageDescription_rus()
        {
            return GetString("ListCommandUsageDescription_rus");
        }

        /// <summary>
        /// İsteğe bağlı arama terimlerini belirtir.
        /// </summary>
        internal static string ListCommandUsageDescription_trk
        {
            get { return GetString("ListCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// İsteğe bağlı arama terimlerini belirtir.
        /// </summary>
        internal static string FormatListCommandUsageDescription_trk()
        {
            return GetString("ListCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定可选的搜索词。
        /// </summary>
        internal static string ListCommandUsageDescription_chs
        {
            get { return GetString("ListCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定可选的搜索词。
        /// </summary>
        internal static string FormatListCommandUsageDescription_chs()
        {
            return GetString("ListCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定選擇性的搜尋字詞。
        /// </summary>
        internal static string ListCommandUsageDescription_cht
        {
            get { return GetString("ListCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定選擇性的搜尋字詞。
        /// </summary>
        internal static string FormatListCommandUsageDescription_cht()
        {
            return GetString("ListCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_csy
        {
            get { return GetString("ListCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_csy()
        {
            return GetString("ListCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_deu
        {
            get { return GetString("ListCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_deu()
        {
            return GetString("ListCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_esp
        {
            get { return GetString("ListCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_esp()
        {
            return GetString("ListCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_fra
        {
            get { return GetString("ListCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_fra()
        {
            return GetString("ListCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_ita
        {
            get { return GetString("ListCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_ita()
        {
            return GetString("ListCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_jpn
        {
            get { return GetString("ListCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_jpn()
        {
            return GetString("ListCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_kor
        {
            get { return GetString("ListCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_kor()
        {
            return GetString("ListCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_plk
        {
            get { return GetString("ListCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_plk()
        {
            return GetString("ListCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_ptb
        {
            get { return GetString("ListCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_ptb()
        {
            return GetString("ListCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_rus
        {
            get { return GetString("ListCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_rus()
        {
            return GetString("ListCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_trk
        {
            get { return GetString("ListCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_trk()
        {
            return GetString("ListCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_chs
        {
            get { return GetString("ListCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_chs()
        {
            return GetString("ListCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string ListCommandUsageExamples_cht
        {
            get { return GetString("ListCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget list
        /// 
        /// nuget list -verbose -allversions
        /// </summary>
        internal static string FormatListCommandUsageExamples_cht()
        {
            return GetString("ListCommandUsageExamples_cht");
        }

        /// <summary>
        /// [hledané termíny] [možnosti]
        /// </summary>
        internal static string ListCommandUsageSummary_csy
        {
            get { return GetString("ListCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// [hledané termíny] [možnosti]
        /// </summary>
        internal static string FormatListCommandUsageSummary_csy()
        {
            return GetString("ListCommandUsageSummary_csy");
        }

        /// <summary>
        /// [Suchbegriffe] [Optionen]
        /// </summary>
        internal static string ListCommandUsageSummary_deu
        {
            get { return GetString("ListCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// [Suchbegriffe] [Optionen]
        /// </summary>
        internal static string FormatListCommandUsageSummary_deu()
        {
            return GetString("ListCommandUsageSummary_deu");
        }

        /// <summary>
        /// [buscar términos] [opciones]
        /// </summary>
        internal static string ListCommandUsageSummary_esp
        {
            get { return GetString("ListCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// [buscar términos] [opciones]
        /// </summary>
        internal static string FormatListCommandUsageSummary_esp()
        {
            return GetString("ListCommandUsageSummary_esp");
        }

        /// <summary>
        /// [@@@termes recherchés] [@@@options]
        /// </summary>
        internal static string ListCommandUsageSummary_fra
        {
            get { return GetString("ListCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// [@@@termes recherchés] [@@@options]
        /// </summary>
        internal static string FormatListCommandUsageSummary_fra()
        {
            return GetString("ListCommandUsageSummary_fra");
        }

        /// <summary>
        /// [ricerca termini] [opzioni]
        /// </summary>
        internal static string ListCommandUsageSummary_ita
        {
            get { return GetString("ListCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// [ricerca termini] [opzioni]
        /// </summary>
        internal static string FormatListCommandUsageSummary_ita()
        {
            return GetString("ListCommandUsageSummary_ita");
        }

        /// <summary>
        /// [search terms] [options]
        /// </summary>
        internal static string ListCommandUsageSummary_jpn
        {
            get { return GetString("ListCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// [search terms] [options]
        /// </summary>
        internal static string FormatListCommandUsageSummary_jpn()
        {
            return GetString("ListCommandUsageSummary_jpn");
        }

        /// <summary>
        /// [검색어] [옵션]
        /// </summary>
        internal static string ListCommandUsageSummary_kor
        {
            get { return GetString("ListCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// [검색어] [옵션]
        /// </summary>
        internal static string FormatListCommandUsageSummary_kor()
        {
            return GetString("ListCommandUsageSummary_kor");
        }

        /// <summary>
        /// [terminy wyszukiwania] [opcje]
        /// </summary>
        internal static string ListCommandUsageSummary_plk
        {
            get { return GetString("ListCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// [terminy wyszukiwania] [opcje]
        /// </summary>
        internal static string FormatListCommandUsageSummary_plk()
        {
            return GetString("ListCommandUsageSummary_plk");
        }

        /// <summary>
        /// [termos de pesquisa] [opções]
        /// </summary>
        internal static string ListCommandUsageSummary_ptb
        {
            get { return GetString("ListCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// [termos de pesquisa] [opções]
        /// </summary>
        internal static string FormatListCommandUsageSummary_ptb()
        {
            return GetString("ListCommandUsageSummary_ptb");
        }

        /// <summary>
        /// [условия поиска] [параметры]
        /// </summary>
        internal static string ListCommandUsageSummary_rus
        {
            get { return GetString("ListCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// [условия поиска] [параметры]
        /// </summary>
        internal static string FormatListCommandUsageSummary_rus()
        {
            return GetString("ListCommandUsageSummary_rus");
        }

        /// <summary>
        /// [arama terimleri] [seçenekler]
        /// </summary>
        internal static string ListCommandUsageSummary_trk
        {
            get { return GetString("ListCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// [arama terimleri] [seçenekler]
        /// </summary>
        internal static string FormatListCommandUsageSummary_trk()
        {
            return GetString("ListCommandUsageSummary_trk");
        }

        /// <summary>
        /// [搜索词] [选项]
        /// </summary>
        internal static string ListCommandUsageSummary_chs
        {
            get { return GetString("ListCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// [搜索词] [选项]
        /// </summary>
        internal static string FormatListCommandUsageSummary_chs()
        {
            return GetString("ListCommandUsageSummary_chs");
        }

        /// <summary>
        /// 搜尋字詞] [選項]
        /// </summary>
        internal static string ListCommandUsageSummary_cht
        {
            get { return GetString("ListCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// 搜尋字詞] [選項]
        /// </summary>
        internal static string FormatListCommandUsageSummary_cht()
        {
            return GetString("ListCommandUsageSummary_cht");
        }

        /// <summary>
        /// Zobrazí podrobný seznam informací pro každý balíček.
        /// </summary>
        internal static string ListCommandVerboseListDescription_csy
        {
            get { return GetString("ListCommandVerboseListDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí podrobný seznam informací pro každý balíček.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_csy()
        {
            return GetString("ListCommandVerboseListDescription_csy");
        }

        /// <summary>
        /// Zeigt eine detaillierte Liste mit Informationen zu jedem Paket an.
        /// </summary>
        internal static string ListCommandVerboseListDescription_deu
        {
            get { return GetString("ListCommandVerboseListDescription_deu"); }
        }

        /// <summary>
        /// Zeigt eine detaillierte Liste mit Informationen zu jedem Paket an.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_deu()
        {
            return GetString("ListCommandVerboseListDescription_deu");
        }

        /// <summary>
        /// Muestra una lista detallada de información para cada paquete.
        /// </summary>
        internal static string ListCommandVerboseListDescription_esp
        {
            get { return GetString("ListCommandVerboseListDescription_esp"); }
        }

        /// <summary>
        /// Muestra una lista detallada de información para cada paquete.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_esp()
        {
            return GetString("ListCommandVerboseListDescription_esp");
        }

        /// <summary>
        /// Affiche une liste détaillée d'informations pour chaque package.
        /// </summary>
        internal static string ListCommandVerboseListDescription_fra
        {
            get { return GetString("ListCommandVerboseListDescription_fra"); }
        }

        /// <summary>
        /// Affiche une liste détaillée d'informations pour chaque package.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_fra()
        {
            return GetString("ListCommandVerboseListDescription_fra");
        }

        /// <summary>
        /// Visualizza un elenco dettagliato di informazioni per ogni pacchetto.
        /// </summary>
        internal static string ListCommandVerboseListDescription_ita
        {
            get { return GetString("ListCommandVerboseListDescription_ita"); }
        }

        /// <summary>
        /// Visualizza un elenco dettagliato di informazioni per ogni pacchetto.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_ita()
        {
            return GetString("ListCommandVerboseListDescription_ita");
        }

        /// <summary>
        /// 各パッケージの情報の詳細な一覧を表示します。
        /// </summary>
        internal static string ListCommandVerboseListDescription_jpn
        {
            get { return GetString("ListCommandVerboseListDescription_jpn"); }
        }

        /// <summary>
        /// 各パッケージの情報の詳細な一覧を表示します。
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_jpn()
        {
            return GetString("ListCommandVerboseListDescription_jpn");
        }

        /// <summary>
        /// 각 패키지에 대한 자세한 정보 목록을 표시합니다.
        /// </summary>
        internal static string ListCommandVerboseListDescription_kor
        {
            get { return GetString("ListCommandVerboseListDescription_kor"); }
        }

        /// <summary>
        /// 각 패키지에 대한 자세한 정보 목록을 표시합니다.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_kor()
        {
            return GetString("ListCommandVerboseListDescription_kor");
        }

        /// <summary>
        /// Wyświetla szczegółową listę informacji dla każdego pakietu.
        /// </summary>
        internal static string ListCommandVerboseListDescription_plk
        {
            get { return GetString("ListCommandVerboseListDescription_plk"); }
        }

        /// <summary>
        /// Wyświetla szczegółową listę informacji dla każdego pakietu.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_plk()
        {
            return GetString("ListCommandVerboseListDescription_plk");
        }

        /// <summary>
        /// Exibe uma lista detalhada de informações para cada pacote.
        /// </summary>
        internal static string ListCommandVerboseListDescription_ptb
        {
            get { return GetString("ListCommandVerboseListDescription_ptb"); }
        }

        /// <summary>
        /// Exibe uma lista detalhada de informações para cada pacote.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_ptb()
        {
            return GetString("ListCommandVerboseListDescription_ptb");
        }

        /// <summary>
        /// Отображает подробный список сведений о каждом пакете.
        /// </summary>
        internal static string ListCommandVerboseListDescription_rus
        {
            get { return GetString("ListCommandVerboseListDescription_rus"); }
        }

        /// <summary>
        /// Отображает подробный список сведений о каждом пакете.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_rus()
        {
            return GetString("ListCommandVerboseListDescription_rus");
        }

        /// <summary>
        /// Her paket için ayrıntılı bilgi listesini görüntüler.
        /// </summary>
        internal static string ListCommandVerboseListDescription_trk
        {
            get { return GetString("ListCommandVerboseListDescription_trk"); }
        }

        /// <summary>
        /// Her paket için ayrıntılı bilgi listesini görüntüler.
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_trk()
        {
            return GetString("ListCommandVerboseListDescription_trk");
        }

        /// <summary>
        /// 显示每个程序包的详细信息列表。
        /// </summary>
        internal static string ListCommandVerboseListDescription_chs
        {
            get { return GetString("ListCommandVerboseListDescription_chs"); }
        }

        /// <summary>
        /// 显示每个程序包的详细信息列表。
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_chs()
        {
            return GetString("ListCommandVerboseListDescription_chs");
        }

        /// <summary>
        /// 顯示為每個封裝的資訊詳細清單。
        /// </summary>
        internal static string ListCommandVerboseListDescription_cht
        {
            get { return GetString("ListCommandVerboseListDescription_cht"); }
        }

        /// <summary>
        /// 顯示為每個封裝的資訊詳細清單。
        /// </summary>
        internal static string FormatListCommandVerboseListDescription_cht()
        {
            return GetString("ListCommandVerboseListDescription_cht");
        }

        /// <summary>
        /// Nezobrazovat výzvu pro uživatelský vstup nebo potvrzení
        /// </summary>
        internal static string Option_NonInteractive_csy
        {
            get { return GetString("Option_NonInteractive_csy"); }
        }

        /// <summary>
        /// Nezobrazovat výzvu pro uživatelský vstup nebo potvrzení
        /// </summary>
        internal static string FormatOption_NonInteractive_csy()
        {
            return GetString("Option_NonInteractive_csy");
        }

        /// <summary>
        /// Keine Eingabeaufforderung für Benutzereingaben oder Bestätigungen.
        /// </summary>
        internal static string Option_NonInteractive_deu
        {
            get { return GetString("Option_NonInteractive_deu"); }
        }

        /// <summary>
        /// Keine Eingabeaufforderung für Benutzereingaben oder Bestätigungen.
        /// </summary>
        internal static string FormatOption_NonInteractive_deu()
        {
            return GetString("Option_NonInteractive_deu");
        }

        /// <summary>
        /// No solicitar la entrada del usuario o confirmaciones.
        /// </summary>
        internal static string Option_NonInteractive_esp
        {
            get { return GetString("Option_NonInteractive_esp"); }
        }

        /// <summary>
        /// No solicitar la entrada del usuario o confirmaciones.
        /// </summary>
        internal static string FormatOption_NonInteractive_esp()
        {
            return GetString("Option_NonInteractive_esp");
        }

        /// <summary>
        /// N'affichez pas d'invites de saisies ou de confirmations faites à l'utilisateur.
        /// </summary>
        internal static string Option_NonInteractive_fra
        {
            get { return GetString("Option_NonInteractive_fra"); }
        }

        /// <summary>
        /// N'affichez pas d'invites de saisies ou de confirmations faites à l'utilisateur.
        /// </summary>
        internal static string FormatOption_NonInteractive_fra()
        {
            return GetString("Option_NonInteractive_fra");
        }

        /// <summary>
        /// Non richiedere input o conferma dell'utente.
        /// </summary>
        internal static string Option_NonInteractive_ita
        {
            get { return GetString("Option_NonInteractive_ita"); }
        }

        /// <summary>
        /// Non richiedere input o conferma dell'utente.
        /// </summary>
        internal static string FormatOption_NonInteractive_ita()
        {
            return GetString("Option_NonInteractive_ita");
        }

        /// <summary>
        /// ユーザー入力または確認のプロンプトを表示しません。
        /// </summary>
        internal static string Option_NonInteractive_jpn
        {
            get { return GetString("Option_NonInteractive_jpn"); }
        }

        /// <summary>
        /// ユーザー入力または確認のプロンプトを表示しません。
        /// </summary>
        internal static string FormatOption_NonInteractive_jpn()
        {
            return GetString("Option_NonInteractive_jpn");
        }

        /// <summary>
        /// 사용자 입력 또는 확인 시 메시지를 표시하지 않습니다.
        /// </summary>
        internal static string Option_NonInteractive_kor
        {
            get { return GetString("Option_NonInteractive_kor"); }
        }

        /// <summary>
        /// 사용자 입력 또는 확인 시 메시지를 표시하지 않습니다.
        /// </summary>
        internal static string FormatOption_NonInteractive_kor()
        {
            return GetString("Option_NonInteractive_kor");
        }

        /// <summary>
        /// Bez monitów o dane wejściowe użytkownika i potwierdzenia.
        /// </summary>
        internal static string Option_NonInteractive_plk
        {
            get { return GetString("Option_NonInteractive_plk"); }
        }

        /// <summary>
        /// Bez monitów o dane wejściowe użytkownika i potwierdzenia.
        /// </summary>
        internal static string FormatOption_NonInteractive_plk()
        {
            return GetString("Option_NonInteractive_plk");
        }

        /// <summary>
        /// 
        /// </summary>
        internal static string Option_NonInteractive_ptb
        {
            get { return GetString("Option_NonInteractive_ptb"); }
        }

        /// <summary>
        /// 
        /// </summary>
        internal static string FormatOption_NonInteractive_ptb()
        {
            return GetString("Option_NonInteractive_ptb");
        }

        /// <summary>
        /// Отключение запросов ввода или подтверждения пользователя.
        /// </summary>
        internal static string Option_NonInteractive_rus
        {
            get { return GetString("Option_NonInteractive_rus"); }
        }

        /// <summary>
        /// Отключение запросов ввода или подтверждения пользователя.
        /// </summary>
        internal static string FormatOption_NonInteractive_rus()
        {
            return GetString("Option_NonInteractive_rus");
        }

        /// <summary>
        /// Kullanıcı girişi veya onayları istenmez.
        /// </summary>
        internal static string Option_NonInteractive_trk
        {
            get { return GetString("Option_NonInteractive_trk"); }
        }

        /// <summary>
        /// Kullanıcı girişi veya onayları istenmez.
        /// </summary>
        internal static string FormatOption_NonInteractive_trk()
        {
            return GetString("Option_NonInteractive_trk");
        }

        /// <summary>
        /// 不提示用户进行输入或确认。
        /// </summary>
        internal static string Option_NonInteractive_chs
        {
            get { return GetString("Option_NonInteractive_chs"); }
        }

        /// <summary>
        /// 不提示用户进行输入或确认。
        /// </summary>
        internal static string FormatOption_NonInteractive_chs()
        {
            return GetString("Option_NonInteractive_chs");
        }

        /// <summary>
        /// 不要提供使用者輸入或確認。
        /// </summary>
        internal static string Option_NonInteractive_cht
        {
            get { return GetString("Option_NonInteractive_cht"); }
        }

        /// <summary>
        /// 不要提供使用者輸入或確認。
        /// </summary>
        internal static string FormatOption_NonInteractive_cht()
        {
            return GetString("Option_NonInteractive_cht");
        }

        /// <summary>
        /// Zobrazí odpovídající úroveň informací ve výstupu: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_csy
        {
            get { return GetString("Option_Verbosity_csy"); }
        }

        /// <summary>
        /// Zobrazí odpovídající úroveň informací ve výstupu: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_csy()
        {
            return GetString("Option_Verbosity_csy");
        }

        /// <summary>
        /// Diesen Detailgrad in der Ausgabe anzeigen: "normal", "quiet", "detailed".
        /// </summary>
        internal static string Option_Verbosity_deu
        {
            get { return GetString("Option_Verbosity_deu"); }
        }

        /// <summary>
        /// Diesen Detailgrad in der Ausgabe anzeigen: "normal", "quiet", "detailed".
        /// </summary>
        internal static string FormatOption_Verbosity_deu()
        {
            return GetString("Option_Verbosity_deu");
        }

        /// <summary>
        /// Mostrar esta cantidad de detalles en la salida: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_esp
        {
            get { return GetString("Option_Verbosity_esp"); }
        }

        /// <summary>
        /// Mostrar esta cantidad de detalles en la salida: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_esp()
        {
            return GetString("Option_Verbosity_esp");
        }

        /// <summary>
        /// Niveau de détail du résultat affiché : normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_fra
        {
            get { return GetString("Option_Verbosity_fra"); }
        }

        /// <summary>
        /// Niveau de détail du résultat affiché : normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_fra()
        {
            return GetString("Option_Verbosity_fra");
        }

        /// <summary>
        /// Visualizza i dettagli nell'outputt: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_ita
        {
            get { return GetString("Option_Verbosity_ita"); }
        }

        /// <summary>
        /// Visualizza i dettagli nell'outputt: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_ita()
        {
            return GetString("Option_Verbosity_ita");
        }

        /// <summary>
        /// 出力に表示する詳細情報の量:normal、quiet、detailed。
        /// </summary>
        internal static string Option_Verbosity_jpn
        {
            get { return GetString("Option_Verbosity_jpn"); }
        }

        /// <summary>
        /// 出力に表示する詳細情報の量:normal、quiet、detailed。
        /// </summary>
        internal static string FormatOption_Verbosity_jpn()
        {
            return GetString("Option_Verbosity_jpn");
        }

        /// <summary>
        /// 출력에 사용되는 세부 정보의 양을 표시합니다(normal, quiet, detailed).
        /// </summary>
        internal static string Option_Verbosity_kor
        {
            get { return GetString("Option_Verbosity_kor"); }
        }

        /// <summary>
        /// 출력에 사용되는 세부 정보의 양을 표시합니다(normal, quiet, detailed).
        /// </summary>
        internal static string FormatOption_Verbosity_kor()
        {
            return GetString("Option_Verbosity_kor");
        }

        /// <summary>
        /// Wyświetlaj taki poziom szczegółów w danych wyjściowych: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_plk
        {
            get { return GetString("Option_Verbosity_plk"); }
        }

        /// <summary>
        /// Wyświetlaj taki poziom szczegółów w danych wyjściowych: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_plk()
        {
            return GetString("Option_Verbosity_plk");
        }

        /// <summary>
        /// Exibir essa quantidade de detalhes na saída: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_ptb
        {
            get { return GetString("Option_Verbosity_ptb"); }
        }

        /// <summary>
        /// Exibir essa quantidade de detalhes na saída: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_ptb()
        {
            return GetString("Option_Verbosity_ptb");
        }

        /// <summary>
        /// Отображение следующего уровня подробности при выводе: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_rus
        {
            get { return GetString("Option_Verbosity_rus"); }
        }

        /// <summary>
        /// Отображение следующего уровня подробности при выводе: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_rus()
        {
            return GetString("Option_Verbosity_rus");
        }

        /// <summary>
        /// Çıktıdaki ayrıntı miktarı buna göre belirlenir: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_trk
        {
            get { return GetString("Option_Verbosity_trk"); }
        }

        /// <summary>
        /// Çıktıdaki ayrıntı miktarı buna göre belirlenir: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_trk()
        {
            return GetString("Option_Verbosity_trk");
        }

        /// <summary>
        /// 在输出中显示以下数量的详细信息: normal、quiet、detailed。
        /// </summary>
        internal static string Option_Verbosity_chs
        {
            get { return GetString("Option_Verbosity_chs"); }
        }

        /// <summary>
        /// 在输出中显示以下数量的详细信息: normal、quiet、detailed。
        /// </summary>
        internal static string FormatOption_Verbosity_chs()
        {
            return GetString("Option_Verbosity_chs");
        }

        /// <summary>
        /// 在輸出中顯示詳細資料的數量: normal, quiet, detailed.
        /// </summary>
        internal static string Option_Verbosity_cht
        {
            get { return GetString("Option_Verbosity_cht"); }
        }

        /// <summary>
        /// 在輸出中顯示詳細資料的數量: normal, quiet, detailed.
        /// </summary>
        internal static string FormatOption_Verbosity_cht()
        {
            return GetString("Option_Verbosity_cht");
        }

        /// <summary>
        /// Základní cesta souborů definovaná v souboru nuspec
        /// </summary>
        internal static string PackageCommandBasePathDescription_csy
        {
            get { return GetString("PackageCommandBasePathDescription_csy"); }
        }

        /// <summary>
        /// Základní cesta souborů definovaná v souboru nuspec
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_csy()
        {
            return GetString("PackageCommandBasePathDescription_csy");
        }

        /// <summary>
        /// Der Basispfad der in der nuspec-Datei definierten Dateien.
        /// </summary>
        internal static string PackageCommandBasePathDescription_deu
        {
            get { return GetString("PackageCommandBasePathDescription_deu"); }
        }

        /// <summary>
        /// Der Basispfad der in der nuspec-Datei definierten Dateien.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_deu()
        {
            return GetString("PackageCommandBasePathDescription_deu");
        }

        /// <summary>
        /// La ruta de acceso base de los archivos definida en el archivo nuspec.
        /// </summary>
        internal static string PackageCommandBasePathDescription_esp
        {
            get { return GetString("PackageCommandBasePathDescription_esp"); }
        }

        /// <summary>
        /// La ruta de acceso base de los archivos definida en el archivo nuspec.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_esp()
        {
            return GetString("PackageCommandBasePathDescription_esp");
        }

        /// <summary>
        /// Chemins d'accès de base aux fichiers définis dans le fichier .nuspec.
        /// </summary>
        internal static string PackageCommandBasePathDescription_fra
        {
            get { return GetString("PackageCommandBasePathDescription_fra"); }
        }

        /// <summary>
        /// Chemins d'accès de base aux fichiers définis dans le fichier .nuspec.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_fra()
        {
            return GetString("PackageCommandBasePathDescription_fra");
        }

        /// <summary>
        /// Il percorso base dei file definito nel file nuspec.
        /// </summary>
        internal static string PackageCommandBasePathDescription_ita
        {
            get { return GetString("PackageCommandBasePathDescription_ita"); }
        }

        /// <summary>
        /// Il percorso base dei file definito nel file nuspec.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_ita()
        {
            return GetString("PackageCommandBasePathDescription_ita");
        }

        /// <summary>
        /// nuspec ファイルに定義されているファイルの基本パス。
        /// </summary>
        internal static string PackageCommandBasePathDescription_jpn
        {
            get { return GetString("PackageCommandBasePathDescription_jpn"); }
        }

        /// <summary>
        /// nuspec ファイルに定義されているファイルの基本パス。
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_jpn()
        {
            return GetString("PackageCommandBasePathDescription_jpn");
        }

        /// <summary>
        /// nuspec 파일에 정의된 파일의 기본 경로입니다.
        /// </summary>
        internal static string PackageCommandBasePathDescription_kor
        {
            get { return GetString("PackageCommandBasePathDescription_kor"); }
        }

        /// <summary>
        /// nuspec 파일에 정의된 파일의 기본 경로입니다.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_kor()
        {
            return GetString("PackageCommandBasePathDescription_kor");
        }

        /// <summary>
        /// Ścieżka podstawowa plików zdefiniowanych w pliku nuspec.
        /// </summary>
        internal static string PackageCommandBasePathDescription_plk
        {
            get { return GetString("PackageCommandBasePathDescription_plk"); }
        }

        /// <summary>
        /// Ścieżka podstawowa plików zdefiniowanych w pliku nuspec.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_plk()
        {
            return GetString("PackageCommandBasePathDescription_plk");
        }

        /// <summary>
        /// O caminho base dos arquivos definidos no arquivo nuspec.
        /// </summary>
        internal static string PackageCommandBasePathDescription_ptb
        {
            get { return GetString("PackageCommandBasePathDescription_ptb"); }
        }

        /// <summary>
        /// O caminho base dos arquivos definidos no arquivo nuspec.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_ptb()
        {
            return GetString("PackageCommandBasePathDescription_ptb");
        }

        /// <summary>
        /// Базовый путь к файлам, определенным в NUSPEC-файле.
        /// </summary>
        internal static string PackageCommandBasePathDescription_rus
        {
            get { return GetString("PackageCommandBasePathDescription_rus"); }
        }

        /// <summary>
        /// Базовый путь к файлам, определенным в NUSPEC-файле.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_rus()
        {
            return GetString("PackageCommandBasePathDescription_rus");
        }

        /// <summary>
        /// Nuspec dosyasında tanımlanan dosyaların taban yolu.
        /// </summary>
        internal static string PackageCommandBasePathDescription_trk
        {
            get { return GetString("PackageCommandBasePathDescription_trk"); }
        }

        /// <summary>
        /// Nuspec dosyasında tanımlanan dosyaların taban yolu.
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_trk()
        {
            return GetString("PackageCommandBasePathDescription_trk");
        }

        /// <summary>
        /// nuspec 文件中定义的文件的基本路径。
        /// </summary>
        internal static string PackageCommandBasePathDescription_chs
        {
            get { return GetString("PackageCommandBasePathDescription_chs"); }
        }

        /// <summary>
        /// nuspec 文件中定义的文件的基本路径。
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_chs()
        {
            return GetString("PackageCommandBasePathDescription_chs");
        }

        /// <summary>
        /// nuspec 檔案中定義檔案基本路徑。
        /// </summary>
        internal static string PackageCommandBasePathDescription_cht
        {
            get { return GetString("PackageCommandBasePathDescription_cht"); }
        }

        /// <summary>
        /// nuspec 檔案中定義檔案基本路徑。
        /// </summary>
        internal static string FormatPackageCommandBasePathDescription_cht()
        {
            return GetString("PackageCommandBasePathDescription_cht");
        }

        /// <summary>
        /// Určuje, zda projekt má být sestaven před sestavením balíčku.
        /// </summary>
        internal static string PackageCommandBuildDescription_csy
        {
            get { return GetString("PackageCommandBuildDescription_csy"); }
        }

        /// <summary>
        /// Určuje, zda projekt má být sestaven před sestavením balíčku.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_csy()
        {
            return GetString("PackageCommandBuildDescription_csy");
        }

        /// <summary>
        /// Ermittelt, ob das Projekt vor dem Erstellen des Pakets erstellt werden soll.
        /// </summary>
        internal static string PackageCommandBuildDescription_deu
        {
            get { return GetString("PackageCommandBuildDescription_deu"); }
        }

        /// <summary>
        /// Ermittelt, ob das Projekt vor dem Erstellen des Pakets erstellt werden soll.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_deu()
        {
            return GetString("PackageCommandBuildDescription_deu");
        }

        /// <summary>
        /// Determina si se debería compilar el proyecto antes de la compilación del paquete.
        /// </summary>
        internal static string PackageCommandBuildDescription_esp
        {
            get { return GetString("PackageCommandBuildDescription_esp"); }
        }

        /// <summary>
        /// Determina si se debería compilar el proyecto antes de la compilación del paquete.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_esp()
        {
            return GetString("PackageCommandBuildDescription_esp");
        }

        /// <summary>
        /// Détermine si le projet doit être créé avant la création du package.
        /// </summary>
        internal static string PackageCommandBuildDescription_fra
        {
            get { return GetString("PackageCommandBuildDescription_fra"); }
        }

        /// <summary>
        /// Détermine si le projet doit être créé avant la création du package.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_fra()
        {
            return GetString("PackageCommandBuildDescription_fra");
        }

        /// <summary>
        /// Determina se il progetto sarà creatp prima del pacchetto.
        /// </summary>
        internal static string PackageCommandBuildDescription_ita
        {
            get { return GetString("PackageCommandBuildDescription_ita"); }
        }

        /// <summary>
        /// Determina se il progetto sarà creatp prima del pacchetto.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_ita()
        {
            return GetString("PackageCommandBuildDescription_ita");
        }

        /// <summary>
        /// パッケージのビルド前に、プロジェクトのビルドが必要かどうかを決定します。
        /// </summary>
        internal static string PackageCommandBuildDescription_jpn
        {
            get { return GetString("PackageCommandBuildDescription_jpn"); }
        }

        /// <summary>
        /// パッケージのビルド前に、プロジェクトのビルドが必要かどうかを決定します。
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_jpn()
        {
            return GetString("PackageCommandBuildDescription_jpn");
        }

        /// <summary>
        /// 패키지를 빌드하기 전에 프로젝트를 빌드해야 하는지 확인합니다.
        /// </summary>
        internal static string PackageCommandBuildDescription_kor
        {
            get { return GetString("PackageCommandBuildDescription_kor"); }
        }

        /// <summary>
        /// 패키지를 빌드하기 전에 프로젝트를 빌드해야 하는지 확인합니다.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_kor()
        {
            return GetString("PackageCommandBuildDescription_kor");
        }

        /// <summary>
        /// Określa, czy przed kompilacją pakietu trzeba skompilować projekt.
        /// </summary>
        internal static string PackageCommandBuildDescription_plk
        {
            get { return GetString("PackageCommandBuildDescription_plk"); }
        }

        /// <summary>
        /// Określa, czy przed kompilacją pakietu trzeba skompilować projekt.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_plk()
        {
            return GetString("PackageCommandBuildDescription_plk");
        }

        /// <summary>
        /// Determina se o projeto deve ser construído antes de construir o pacote.
        /// </summary>
        internal static string PackageCommandBuildDescription_ptb
        {
            get { return GetString("PackageCommandBuildDescription_ptb"); }
        }

        /// <summary>
        /// Determina se o projeto deve ser construído antes de construir o pacote.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_ptb()
        {
            return GetString("PackageCommandBuildDescription_ptb");
        }

        /// <summary>
        /// Определяет, следует ли выполнить сборку проекта перед сборкой пакета.
        /// </summary>
        internal static string PackageCommandBuildDescription_rus
        {
            get { return GetString("PackageCommandBuildDescription_rus"); }
        }

        /// <summary>
        /// Определяет, следует ли выполнить сборку проекта перед сборкой пакета.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_rus()
        {
            return GetString("PackageCommandBuildDescription_rus");
        }

        /// <summary>
        /// Projenin paketten önce oluşturulması gerekip gerekmediğini belirler.
        /// </summary>
        internal static string PackageCommandBuildDescription_trk
        {
            get { return GetString("PackageCommandBuildDescription_trk"); }
        }

        /// <summary>
        /// Projenin paketten önce oluşturulması gerekip gerekmediğini belirler.
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_trk()
        {
            return GetString("PackageCommandBuildDescription_trk");
        }

        /// <summary>
        /// 确定是否应在生成程序包之前生成项目。
        /// </summary>
        internal static string PackageCommandBuildDescription_chs
        {
            get { return GetString("PackageCommandBuildDescription_chs"); }
        }

        /// <summary>
        /// 确定是否应在生成程序包之前生成项目。
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_chs()
        {
            return GetString("PackageCommandBuildDescription_chs");
        }

        /// <summary>
        /// 判斷是否要在建置封裝之前建置專案。
        /// </summary>
        internal static string PackageCommandBuildDescription_cht
        {
            get { return GetString("PackageCommandBuildDescription_cht"); }
        }

        /// <summary>
        /// 判斷是否要在建置封裝之前建置專案。
        /// </summary>
        internal static string FormatPackageCommandBuildDescription_cht()
        {
            return GetString("PackageCommandBuildDescription_cht");
        }

        /// <summary>
        /// Vytvoří balíček NuGet na základě zadaného souboru nuspec nebo souboru projektu.
        /// </summary>
        internal static string PackageCommandDescription_csy
        {
            get { return GetString("PackageCommandDescription_csy"); }
        }

        /// <summary>
        /// Vytvoří balíček NuGet na základě zadaného souboru nuspec nebo souboru projektu.
        /// </summary>
        internal static string FormatPackageCommandDescription_csy()
        {
            return GetString("PackageCommandDescription_csy");
        }

        /// <summary>
        /// Erstellt ein NuGet-Paket basierend auf der angegebenen nuspec- oder Projektdatei.
        /// </summary>
        internal static string PackageCommandDescription_deu
        {
            get { return GetString("PackageCommandDescription_deu"); }
        }

        /// <summary>
        /// Erstellt ein NuGet-Paket basierend auf der angegebenen nuspec- oder Projektdatei.
        /// </summary>
        internal static string FormatPackageCommandDescription_deu()
        {
            return GetString("PackageCommandDescription_deu");
        }

        /// <summary>
        /// Crea un paquete NuGet basado en el archivo de proyecto o el nuspec especificado.
        /// </summary>
        internal static string PackageCommandDescription_esp
        {
            get { return GetString("PackageCommandDescription_esp"); }
        }

        /// <summary>
        /// Crea un paquete NuGet basado en el archivo de proyecto o el nuspec especificado.
        /// </summary>
        internal static string FormatPackageCommandDescription_esp()
        {
            return GetString("PackageCommandDescription_esp");
        }

        /// <summary>
        /// Crée un package NuGet en fonction du fichier .nuspec ou projet spécifié.
        /// </summary>
        internal static string PackageCommandDescription_fra
        {
            get { return GetString("PackageCommandDescription_fra"); }
        }

        /// <summary>
        /// Crée un package NuGet en fonction du fichier .nuspec ou projet spécifié.
        /// </summary>
        internal static string FormatPackageCommandDescription_fra()
        {
            return GetString("PackageCommandDescription_fra");
        }

        /// <summary>
        /// Crea un pacchetto NuGet in base al file progetto o nuspec specificato.
        /// </summary>
        internal static string PackageCommandDescription_ita
        {
            get { return GetString("PackageCommandDescription_ita"); }
        }

        /// <summary>
        /// Crea un pacchetto NuGet in base al file progetto o nuspec specificato.
        /// </summary>
        internal static string FormatPackageCommandDescription_ita()
        {
            return GetString("PackageCommandDescription_ita");
        }

        /// <summary>
        /// 指定された nuspec または project ファイルに基づいて、NuGet パッケージを作成します。
        /// </summary>
        internal static string PackageCommandDescription_jpn
        {
            get { return GetString("PackageCommandDescription_jpn"); }
        }

        /// <summary>
        /// 指定された nuspec または project ファイルに基づいて、NuGet パッケージを作成します。
        /// </summary>
        internal static string FormatPackageCommandDescription_jpn()
        {
            return GetString("PackageCommandDescription_jpn");
        }

        /// <summary>
        /// 지정된 nuspec 또는 프로젝트 파일을 기반으로 NuGet 패키지를 만듭니다.
        /// </summary>
        internal static string PackageCommandDescription_kor
        {
            get { return GetString("PackageCommandDescription_kor"); }
        }

        /// <summary>
        /// 지정된 nuspec 또는 프로젝트 파일을 기반으로 NuGet 패키지를 만듭니다.
        /// </summary>
        internal static string FormatPackageCommandDescription_kor()
        {
            return GetString("PackageCommandDescription_kor");
        }

        /// <summary>
        /// Tworzy pakiet NuGet na podstawie określonego pliku nuspec lub pliku projektu.
        /// </summary>
        internal static string PackageCommandDescription_plk
        {
            get { return GetString("PackageCommandDescription_plk"); }
        }

        /// <summary>
        /// Tworzy pakiet NuGet na podstawie określonego pliku nuspec lub pliku projektu.
        /// </summary>
        internal static string FormatPackageCommandDescription_plk()
        {
            return GetString("PackageCommandDescription_plk");
        }

        /// <summary>
        /// Cria um pacote NuGet com base no nuspec especificado ou no arquivo de projeto.
        /// </summary>
        internal static string PackageCommandDescription_ptb
        {
            get { return GetString("PackageCommandDescription_ptb"); }
        }

        /// <summary>
        /// Cria um pacote NuGet com base no nuspec especificado ou no arquivo de projeto.
        /// </summary>
        internal static string FormatPackageCommandDescription_ptb()
        {
            return GetString("PackageCommandDescription_ptb");
        }

        /// <summary>
        /// Создает пакет NuGet при помощи указанного NUSPEC-файла или файла проекта.
        /// </summary>
        internal static string PackageCommandDescription_rus
        {
            get { return GetString("PackageCommandDescription_rus"); }
        }

        /// <summary>
        /// Создает пакет NuGet при помощи указанного NUSPEC-файла или файла проекта.
        /// </summary>
        internal static string FormatPackageCommandDescription_rus()
        {
            return GetString("PackageCommandDescription_rus");
        }

        /// <summary>
        /// Belirtilen nuspec veya proje dosyasını temel alarak NuGet paketi oluşturur.
        /// </summary>
        internal static string PackageCommandDescription_trk
        {
            get { return GetString("PackageCommandDescription_trk"); }
        }

        /// <summary>
        /// Belirtilen nuspec veya proje dosyasını temel alarak NuGet paketi oluşturur.
        /// </summary>
        internal static string FormatPackageCommandDescription_trk()
        {
            return GetString("PackageCommandDescription_trk");
        }

        /// <summary>
        /// 基于指定的 nuspec 或项目文件创建 NuGet 程序包。
        /// </summary>
        internal static string PackageCommandDescription_chs
        {
            get { return GetString("PackageCommandDescription_chs"); }
        }

        /// <summary>
        /// 基于指定的 nuspec 或项目文件创建 NuGet 程序包。
        /// </summary>
        internal static string FormatPackageCommandDescription_chs()
        {
            return GetString("PackageCommandDescription_chs");
        }

        /// <summary>
        /// 依指定的 nuspec 或專案檔建立 NuGet 封裝。
        /// </summary>
        internal static string PackageCommandDescription_cht
        {
            get { return GetString("PackageCommandDescription_cht"); }
        }

        /// <summary>
        /// 依指定的 nuspec 或專案檔建立 NuGet 封裝。
        /// </summary>
        internal static string FormatPackageCommandDescription_cht()
        {
            return GetString("PackageCommandDescription_cht");
        }

        /// <summary>
        /// Určuje jeden nebo více vzorů zástupných znaků pro vyloučení při vytváření balíčku.
        /// </summary>
        internal static string PackageCommandExcludeDescription_csy
        {
            get { return GetString("PackageCommandExcludeDescription_csy"); }
        }

        /// <summary>
        /// Určuje jeden nebo více vzorů zástupných znaků pro vyloučení při vytváření balíčku.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_csy()
        {
            return GetString("PackageCommandExcludeDescription_csy");
        }

        /// <summary>
        /// Gibt mindestens ein Platzhaltermuster ein, das beim Erstellen eines Pakets ausgeschlossen werden soll.
        /// </summary>
        internal static string PackageCommandExcludeDescription_deu
        {
            get { return GetString("PackageCommandExcludeDescription_deu"); }
        }

        /// <summary>
        /// Gibt mindestens ein Platzhaltermuster ein, das beim Erstellen eines Pakets ausgeschlossen werden soll.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_deu()
        {
            return GetString("PackageCommandExcludeDescription_deu");
        }

        /// <summary>
        /// Especifica uno o más patrones de caracteres comodín que se deben excluir al crear un paquete.
        /// </summary>
        internal static string PackageCommandExcludeDescription_esp
        {
            get { return GetString("PackageCommandExcludeDescription_esp"); }
        }

        /// <summary>
        /// Especifica uno o más patrones de caracteres comodín que se deben excluir al crear un paquete.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_esp()
        {
            return GetString("PackageCommandExcludeDescription_esp");
        }

        /// <summary>
        /// Spécifie un ou plusieurs modèles à caractère générique à exclure lors de la création du package.
        /// </summary>
        internal static string PackageCommandExcludeDescription_fra
        {
            get { return GetString("PackageCommandExcludeDescription_fra"); }
        }

        /// <summary>
        /// Spécifie un ou plusieurs modèles à caractère générique à exclure lors de la création du package.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_fra()
        {
            return GetString("PackageCommandExcludeDescription_fra");
        }

        /// <summary>
        /// Specifica uno o più pattern wildcard da escludere nella creazione di un pacchetto.
        /// </summary>
        internal static string PackageCommandExcludeDescription_ita
        {
            get { return GetString("PackageCommandExcludeDescription_ita"); }
        }

        /// <summary>
        /// Specifica uno o più pattern wildcard da escludere nella creazione di un pacchetto.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_ita()
        {
            return GetString("PackageCommandExcludeDescription_ita");
        }

        /// <summary>
        /// パッケージの作成時に除外するには、1 つまたは複数のワイルドカード パターンを指定します。
        /// </summary>
        internal static string PackageCommandExcludeDescription_jpn
        {
            get { return GetString("PackageCommandExcludeDescription_jpn"); }
        }

        /// <summary>
        /// パッケージの作成時に除外するには、1 つまたは複数のワイルドカード パターンを指定します。
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_jpn()
        {
            return GetString("PackageCommandExcludeDescription_jpn");
        }

        /// <summary>
        /// 패키지를 만들 때 제외할 와일드카드 패턴을 하나 이상 지정합니다.
        /// </summary>
        internal static string PackageCommandExcludeDescription_kor
        {
            get { return GetString("PackageCommandExcludeDescription_kor"); }
        }

        /// <summary>
        /// 패키지를 만들 때 제외할 와일드카드 패턴을 하나 이상 지정합니다.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_kor()
        {
            return GetString("PackageCommandExcludeDescription_kor");
        }

        /// <summary>
        /// Określa jeden lub więcej wzorców symboli wieloznacznych, które mają zostać wykluczone podczas tworzenia pakietu.
        /// </summary>
        internal static string PackageCommandExcludeDescription_plk
        {
            get { return GetString("PackageCommandExcludeDescription_plk"); }
        }

        /// <summary>
        /// Określa jeden lub więcej wzorców symboli wieloznacznych, które mają zostać wykluczone podczas tworzenia pakietu.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_plk()
        {
            return GetString("PackageCommandExcludeDescription_plk");
        }

        /// <summary>
        /// Especifica um ou mais padrões curinga a excluir ao criar um pacote.
        /// </summary>
        internal static string PackageCommandExcludeDescription_ptb
        {
            get { return GetString("PackageCommandExcludeDescription_ptb"); }
        }

        /// <summary>
        /// Especifica um ou mais padrões curinga a excluir ao criar um pacote.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_ptb()
        {
            return GetString("PackageCommandExcludeDescription_ptb");
        }

        /// <summary>
        /// Указывает один или несколько шаблонов подстановочных знаков, исключаемых при создании пакета.
        /// </summary>
        internal static string PackageCommandExcludeDescription_rus
        {
            get { return GetString("PackageCommandExcludeDescription_rus"); }
        }

        /// <summary>
        /// Указывает один или несколько шаблонов подстановочных знаков, исключаемых при создании пакета.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_rus()
        {
            return GetString("PackageCommandExcludeDescription_rus");
        }

        /// <summary>
        /// Paket oluşturulurken hariç tutulacak bir veya daha fazla joker karakter desenini belirtir.
        /// </summary>
        internal static string PackageCommandExcludeDescription_trk
        {
            get { return GetString("PackageCommandExcludeDescription_trk"); }
        }

        /// <summary>
        /// Paket oluşturulurken hariç tutulacak bir veya daha fazla joker karakter desenini belirtir.
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_trk()
        {
            return GetString("PackageCommandExcludeDescription_trk");
        }

        /// <summary>
        /// 指定创建程序包时要排除的一个或多个通配符模式。
        /// </summary>
        internal static string PackageCommandExcludeDescription_chs
        {
            get { return GetString("PackageCommandExcludeDescription_chs"); }
        }

        /// <summary>
        /// 指定创建程序包时要排除的一个或多个通配符模式。
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_chs()
        {
            return GetString("PackageCommandExcludeDescription_chs");
        }

        /// <summary>
        /// 指定建立封裝時要排除的一或多個萬用字元模式。
        /// </summary>
        internal static string PackageCommandExcludeDescription_cht
        {
            get { return GetString("PackageCommandExcludeDescription_cht"); }
        }

        /// <summary>
        /// 指定建立封裝時要排除的一或多個萬用字元模式。
        /// </summary>
        internal static string FormatPackageCommandExcludeDescription_cht()
        {
            return GetString("PackageCommandExcludeDescription_cht");
        }

        /// <summary>
        /// Zabrání zahrnutí prázdných adresářů při sestavování balíčku.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_csy
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_csy"); }
        }

        /// <summary>
        /// Zabrání zahrnutí prázdných adresářů při sestavování balíčku.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_csy()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_csy");
        }

        /// <summary>
        /// Den Einschluss leerer Verzeichnisse beim Erstellen des Pakets verhindern.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_deu
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_deu"); }
        }

        /// <summary>
        /// Den Einschluss leerer Verzeichnisse beim Erstellen des Pakets verhindern.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_deu()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_deu");
        }

        /// <summary>
        /// Impedir la inclusión de directorios vacíos al compilar el paquete.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_esp
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_esp"); }
        }

        /// <summary>
        /// Impedir la inclusión de directorios vacíos al compilar el paquete.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_esp()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_esp");
        }

        /// <summary>
        /// Empêche l'inclusion de répertoires vides lors de la création du package.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_fra
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_fra"); }
        }

        /// <summary>
        /// Empêche l'inclusion de répertoires vides lors de la création du package.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_fra()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_fra");
        }

        /// <summary>
        /// Evita l'inclusione di directory vuote nella costruzione di un pacchetto.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_ita
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_ita"); }
        }

        /// <summary>
        /// Evita l'inclusione di directory vuote nella costruzione di un pacchetto.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_ita()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_ita");
        }

        /// <summary>
        /// パッケージのビルド時には、空のディレクトリを含めないでください。
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_jpn
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_jpn"); }
        }

        /// <summary>
        /// パッケージのビルド時には、空のディレクトリを含めないでください。
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_jpn()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_jpn");
        }

        /// <summary>
        /// 패키지 빌드 시 빈 디렉터리를 포함하지 않도록 합니다.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_kor
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_kor"); }
        }

        /// <summary>
        /// 패키지 빌드 시 빈 디렉터리를 포함하지 않도록 합니다.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_kor()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_kor");
        }

        /// <summary>
        /// Zapobiega dołączaniu pustych katalogów podczas kompilowania pakietu.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_plk
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_plk"); }
        }

        /// <summary>
        /// Zapobiega dołączaniu pustych katalogów podczas kompilowania pakietu.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_plk()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_plk");
        }

        /// <summary>
        /// Evite a inclusão de diretórios vazios durante a construção do pacote.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_ptb
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_ptb"); }
        }

        /// <summary>
        /// Evite a inclusão de diretórios vazios durante a construção do pacote.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_ptb()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_ptb");
        }

        /// <summary>
        /// Предотвращает добавление пустых каталогов при выполнении сборки пакета.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_rus
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_rus"); }
        }

        /// <summary>
        /// Предотвращает добавление пустых каталогов при выполнении сборки пакета.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_rus()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_rus");
        }

        /// <summary>
        /// Paket oluşturulurken boş dizinlerin eklenmesini önle.
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_trk
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_trk"); }
        }

        /// <summary>
        /// Paket oluşturulurken boş dizinlerin eklenmesini önle.
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_trk()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_trk");
        }

        /// <summary>
        /// 防止在生成程序包时包含空目录。
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_chs
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_chs"); }
        }

        /// <summary>
        /// 防止在生成程序包时包含空目录。
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_chs()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_chs");
        }

        /// <summary>
        /// 建置封裝時不包含空目錄。
        /// </summary>
        internal static string PackageCommandExcludeEmptyDirectories_cht
        {
            get { return GetString("PackageCommandExcludeEmptyDirectories_cht"); }
        }

        /// <summary>
        /// 建置封裝時不包含空目錄。
        /// </summary>
        internal static string FormatPackageCommandExcludeEmptyDirectories_cht()
        {
            return GetString("PackageCommandExcludeEmptyDirectories_cht");
        }

        /// <summary>
        /// Zabrání výchozímu vyloučení souborů balíčku NuGet a souborů a složek, jejichž název začíná tečkou, např. .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_csy
        {
            get { return GetString("PackageCommandNoDefaultExcludes_csy"); }
        }

        /// <summary>
        /// Zabrání výchozímu vyloučení souborů balíčku NuGet a souborů a složek, jejichž název začíná tečkou, např. .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_csy()
        {
            return GetString("PackageCommandNoDefaultExcludes_csy");
        }

        /// <summary>
        /// Den Standardausschluss von NuGet-Paketdateien und Dateien und Ordnern verhindern, die mit einem Punkt beginnen, z. B. ".svn".
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_deu
        {
            get { return GetString("PackageCommandNoDefaultExcludes_deu"); }
        }

        /// <summary>
        /// Den Standardausschluss von NuGet-Paketdateien und Dateien und Ordnern verhindern, die mit einem Punkt beginnen, z. B. ".svn".
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_deu()
        {
            return GetString("PackageCommandNoDefaultExcludes_deu");
        }

        /// <summary>
        /// Impedir la exclusión predeterminada de los archivos del proyecto NuGet y los archivos y carpetas que empiecen con un punto, por ej. .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_esp
        {
            get { return GetString("PackageCommandNoDefaultExcludes_esp"); }
        }

        /// <summary>
        /// Impedir la exclusión predeterminada de los archivos del proyecto NuGet y los archivos y carpetas que empiecen con un punto, por ej. .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_esp()
        {
            return GetString("PackageCommandNoDefaultExcludes_esp");
        }

        /// <summary>
        /// Empêchez l'exclusion par défaut des fichiers du package NuGet et des fichiers et dossiers dont le nom commence par un point (.svn par exemple).
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_fra
        {
            get { return GetString("PackageCommandNoDefaultExcludes_fra"); }
        }

        /// <summary>
        /// Empêchez l'exclusion par défaut des fichiers du package NuGet et des fichiers et dossiers dont le nom commence par un point (.svn par exemple).
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_fra()
        {
            return GetString("PackageCommandNoDefaultExcludes_fra");
        }

        /// <summary>
        /// Evita l'esclusione per default di NuGet e file e cartelle a partire da dot e.g. .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_ita
        {
            get { return GetString("PackageCommandNoDefaultExcludes_ita"); }
        }

        /// <summary>
        /// Evita l'esclusione per default di NuGet e file e cartelle a partire da dot e.g. .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_ita()
        {
            return GetString("PackageCommandNoDefaultExcludes_ita");
        }

        /// <summary>
        /// NuGet パッケージ ファイルと、ドットで始まるファイルやフォルダー (.svn など) は、既定の除外に指定しないでください。
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_jpn
        {
            get { return GetString("PackageCommandNoDefaultExcludes_jpn"); }
        }

        /// <summary>
        /// NuGet パッケージ ファイルと、ドットで始まるファイルやフォルダー (.svn など) は、既定の除外に指定しないでください。
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_jpn()
        {
            return GetString("PackageCommandNoDefaultExcludes_jpn");
        }

        /// <summary>
        /// 점으로 시작하는 NuGet 패키지 파일 및 파일과 폴더가 기본적으로 제외되지 않도록 합니다(예: .svn).
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_kor
        {
            get { return GetString("PackageCommandNoDefaultExcludes_kor"); }
        }

        /// <summary>
        /// 점으로 시작하는 NuGet 패키지 파일 및 파일과 폴더가 기본적으로 제외되지 않도록 합니다(예: .svn).
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_kor()
        {
            return GetString("PackageCommandNoDefaultExcludes_kor");
        }

        /// <summary>
        /// Zapobiega domyślnemu wykluczeniu plików pakietów NuGet i plików oraz folderów, których nazwy zaczynają się kropką, np. .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_plk
        {
            get { return GetString("PackageCommandNoDefaultExcludes_plk"); }
        }

        /// <summary>
        /// Zapobiega domyślnemu wykluczeniu plików pakietów NuGet i plików oraz folderów, których nazwy zaczynają się kropką, np. .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_plk()
        {
            return GetString("PackageCommandNoDefaultExcludes_plk");
        }

        /// <summary>
        /// Evite a exclusão padrão de arquivos de pacotes NuGet e arquivos e pastas começando com um ponto, por exemplo .svn.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_ptb
        {
            get { return GetString("PackageCommandNoDefaultExcludes_ptb"); }
        }

        /// <summary>
        /// Evite a exclusão padrão de arquivos de pacotes NuGet e arquivos e pastas começando com um ponto, por exemplo .svn.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_ptb()
        {
            return GetString("PackageCommandNoDefaultExcludes_ptb");
        }

        /// <summary>
        /// Предотвращение используемого по умолчанию исключения файлов и папок пакета NuGet, начинающихся с точки, например ".svn".
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_rus
        {
            get { return GetString("PackageCommandNoDefaultExcludes_rus"); }
        }

        /// <summary>
        /// Предотвращение используемого по умолчанию исключения файлов и папок пакета NuGet, начинающихся с точки, например ".svn".
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_rus()
        {
            return GetString("PackageCommandNoDefaultExcludes_rus");
        }

        /// <summary>
        /// NuGet paket dosyalarının ve nokta ile başlayan .svn gibi dosya ve klasörlerin varsayılan olarak hariç tutulmasını önle.
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_trk
        {
            get { return GetString("PackageCommandNoDefaultExcludes_trk"); }
        }

        /// <summary>
        /// NuGet paket dosyalarının ve nokta ile başlayan .svn gibi dosya ve klasörlerin varsayılan olarak hariç tutulmasını önle.
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_trk()
        {
            return GetString("PackageCommandNoDefaultExcludes_trk");
        }

        /// <summary>
        /// 防止默认排除 NuGet 程序包文件以及以点开头的文件和文件夹(例如 .svn)。
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_chs
        {
            get { return GetString("PackageCommandNoDefaultExcludes_chs"); }
        }

        /// <summary>
        /// 防止默认排除 NuGet 程序包文件以及以点开头的文件和文件夹(例如 .svn)。
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_chs()
        {
            return GetString("PackageCommandNoDefaultExcludes_chs");
        }

        /// <summary>
        /// 防止預設執行以小數點開頭的 NuGet 封裝檔案和資料夾，例如 .svn。
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes_cht
        {
            get { return GetString("PackageCommandNoDefaultExcludes_cht"); }
        }

        /// <summary>
        /// 防止預設執行以小數點開頭的 NuGet 封裝檔案和資料夾，例如 .svn。
        /// </summary>
        internal static string FormatPackageCommandNoDefaultExcludes_cht()
        {
            return GetString("PackageCommandNoDefaultExcludes_cht");
        }

        /// <summary>
        /// Určuje, zda příkaz nemá po sestavení balíčku spustit jeho analýzu.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_csy
        {
            get { return GetString("PackageCommandNoRunAnalysis_csy"); }
        }

        /// <summary>
        /// Určuje, zda příkaz nemá po sestavení balíčku spustit jeho analýzu.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_csy()
        {
            return GetString("PackageCommandNoRunAnalysis_csy");
        }

        /// <summary>
        /// Geben Sie an, ob der Befehl keine Paketanalyse nach dem Erstellen des Pakets ausführen soll.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_deu
        {
            get { return GetString("PackageCommandNoRunAnalysis_deu"); }
        }

        /// <summary>
        /// Geben Sie an, ob der Befehl keine Paketanalyse nach dem Erstellen des Pakets ausführen soll.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_deu()
        {
            return GetString("PackageCommandNoRunAnalysis_deu");
        }

        /// <summary>
        /// Especificar si el comando no debe ejecutar el análisis del paquete antes de compilar el paquete.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_esp
        {
            get { return GetString("PackageCommandNoRunAnalysis_esp"); }
        }

        /// <summary>
        /// Especificar si el comando no debe ejecutar el análisis del paquete antes de compilar el paquete.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_esp()
        {
            return GetString("PackageCommandNoRunAnalysis_esp");
        }

        /// <summary>
        /// Spécifiez si la commande ne doit pas exécuter une analyse du package après la création de celui-ci.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_fra
        {
            get { return GetString("PackageCommandNoRunAnalysis_fra"); }
        }

        /// <summary>
        /// Spécifiez si la commande ne doit pas exécuter une analyse du package après la création de celui-ci.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_fra()
        {
            return GetString("PackageCommandNoRunAnalysis_fra");
        }

        /// <summary>
        /// Specificare se il comando non deve eseguire l'analisi del pacchetto dopo la creazione.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_ita
        {
            get { return GetString("PackageCommandNoRunAnalysis_ita"); }
        }

        /// <summary>
        /// Specificare se il comando non deve eseguire l'analisi del pacchetto dopo la creazione.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_ita()
        {
            return GetString("PackageCommandNoRunAnalysis_ita");
        }

        /// <summary>
        /// パッケージのビルド後に、コマンドでパッケージの分析を実行しないかどうかを指定します。
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_jpn
        {
            get { return GetString("PackageCommandNoRunAnalysis_jpn"); }
        }

        /// <summary>
        /// パッケージのビルド後に、コマンドでパッケージの分析を実行しないかどうかを指定します。
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_jpn()
        {
            return GetString("PackageCommandNoRunAnalysis_jpn");
        }

        /// <summary>
        /// 패키지 빌드 후 명령이 패키지 분석을 실행해야 하는지 여부를 지정합니다.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_kor
        {
            get { return GetString("PackageCommandNoRunAnalysis_kor"); }
        }

        /// <summary>
        /// 패키지 빌드 후 명령이 패키지 분석을 실행해야 하는지 여부를 지정합니다.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_kor()
        {
            return GetString("PackageCommandNoRunAnalysis_kor");
        }

        /// <summary>
        /// Określ, czy polecenie nie powinno uruchamiać analizy pakietu po kompilacji pakietu.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_plk
        {
            get { return GetString("PackageCommandNoRunAnalysis_plk"); }
        }

        /// <summary>
        /// Określ, czy polecenie nie powinno uruchamiać analizy pakietu po kompilacji pakietu.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_plk()
        {
            return GetString("PackageCommandNoRunAnalysis_plk");
        }

        /// <summary>
        /// Especifique se o comando não deve executar a análise do pacote depois de construir o pacote.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_ptb
        {
            get { return GetString("PackageCommandNoRunAnalysis_ptb"); }
        }

        /// <summary>
        /// Especifique se o comando não deve executar a análise do pacote depois de construir o pacote.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_ptb()
        {
            return GetString("PackageCommandNoRunAnalysis_ptb");
        }

        /// <summary>
        /// Указывает, следует ли команде запустить анализ пакета после его сборки.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_rus
        {
            get { return GetString("PackageCommandNoRunAnalysis_rus"); }
        }

        /// <summary>
        /// Указывает, следует ли команде запустить анализ пакета после его сборки.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_rus()
        {
            return GetString("PackageCommandNoRunAnalysis_rus");
        }

        /// <summary>
        /// Komutun paket oluşturulduktan sonra paket analizini çalıştırması gerekip gerekmediğini belirtin.
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_trk
        {
            get { return GetString("PackageCommandNoRunAnalysis_trk"); }
        }

        /// <summary>
        /// Komutun paket oluşturulduktan sonra paket analizini çalıştırması gerekip gerekmediğini belirtin.
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_trk()
        {
            return GetString("PackageCommandNoRunAnalysis_trk");
        }

        /// <summary>
        /// 指定命令在生成程序包后，是否不应运行程序包分析。
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_chs
        {
            get { return GetString("PackageCommandNoRunAnalysis_chs"); }
        }

        /// <summary>
        /// 指定命令在生成程序包后，是否不应运行程序包分析。
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_chs()
        {
            return GetString("PackageCommandNoRunAnalysis_chs");
        }

        /// <summary>
        /// 指定命令是否不應該在建置封裝之後執行封裝分析。
        /// </summary>
        internal static string PackageCommandNoRunAnalysis_cht
        {
            get { return GetString("PackageCommandNoRunAnalysis_cht"); }
        }

        /// <summary>
        /// 指定命令是否不應該在建置封裝之後執行封裝分析。
        /// </summary>
        internal static string FormatPackageCommandNoRunAnalysis_cht()
        {
            return GetString("PackageCommandNoRunAnalysis_cht");
        }

        /// <summary>
        /// Určuje adresář pro vytvořený soubor balíčku NuGet. Není-li zadán, použije se aktuální adresář.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_csy
        {
            get { return GetString("PackageCommandOutputDirDescription_csy"); }
        }

        /// <summary>
        /// Určuje adresář pro vytvořený soubor balíčku NuGet. Není-li zadán, použije se aktuální adresář.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_csy()
        {
            return GetString("PackageCommandOutputDirDescription_csy");
        }

        /// <summary>
        /// Gibt das Verzeichnis für die erstellte NuGet-Paketdatei an. Erfolgt keine Angabe, wird das aktuelle Verzeichnis verwendet.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_deu
        {
            get { return GetString("PackageCommandOutputDirDescription_deu"); }
        }

        /// <summary>
        /// Gibt das Verzeichnis für die erstellte NuGet-Paketdatei an. Erfolgt keine Angabe, wird das aktuelle Verzeichnis verwendet.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_deu()
        {
            return GetString("PackageCommandOutputDirDescription_deu");
        }

        /// <summary>
        /// Especifica el directorio para el archivo del paquete NuGet creado. Si no se especifica, usa el directorio actual.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_esp
        {
            get { return GetString("PackageCommandOutputDirDescription_esp"); }
        }

        /// <summary>
        /// Especifica el directorio para el archivo del paquete NuGet creado. Si no se especifica, usa el directorio actual.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_esp()
        {
            return GetString("PackageCommandOutputDirDescription_esp");
        }

        /// <summary>
        /// Spécifie le répertoire du fichier du package NuGet créé. S'il n'est pas spécifié, le répertoire actuel sera utilisé.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_fra
        {
            get { return GetString("PackageCommandOutputDirDescription_fra"); }
        }

        /// <summary>
        /// Spécifie le répertoire du fichier du package NuGet créé. S'il n'est pas spécifié, le répertoire actuel sera utilisé.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_fra()
        {
            return GetString("PackageCommandOutputDirDescription_fra");
        }

        /// <summary>
        /// Specifica la directory per il file NuGet creato. Se non specificato, usare la directory attuale.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_ita
        {
            get { return GetString("PackageCommandOutputDirDescription_ita"); }
        }

        /// <summary>
        /// Specifica la directory per il file NuGet creato. Se non specificato, usare la directory attuale.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_ita()
        {
            return GetString("PackageCommandOutputDirDescription_ita");
        }

        /// <summary>
        /// 作成される NuGet パッケージ ファイルのディレクトリを指定します。指定しない場合、現在のディレクトリが使用されます。
        /// </summary>
        internal static string PackageCommandOutputDirDescription_jpn
        {
            get { return GetString("PackageCommandOutputDirDescription_jpn"); }
        }

        /// <summary>
        /// 作成される NuGet パッケージ ファイルのディレクトリを指定します。指定しない場合、現在のディレクトリが使用されます。
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_jpn()
        {
            return GetString("PackageCommandOutputDirDescription_jpn");
        }

        /// <summary>
        /// 만든 NuGet 패키지 파일의 디렉터리를 지정합니다. 지정되지 않은 경우 현재 디렉터리를 사용합니다.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_kor
        {
            get { return GetString("PackageCommandOutputDirDescription_kor"); }
        }

        /// <summary>
        /// 만든 NuGet 패키지 파일의 디렉터리를 지정합니다. 지정되지 않은 경우 현재 디렉터리를 사용합니다.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_kor()
        {
            return GetString("PackageCommandOutputDirDescription_kor");
        }

        /// <summary>
        /// Określa katalog dla utworzonego pliku pakietu NuGet. Jeśli nie zostanie on określony, jest używany katalog bieżący.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_plk
        {
            get { return GetString("PackageCommandOutputDirDescription_plk"); }
        }

        /// <summary>
        /// Określa katalog dla utworzonego pliku pakietu NuGet. Jeśli nie zostanie on określony, jest używany katalog bieżący.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_plk()
        {
            return GetString("PackageCommandOutputDirDescription_plk");
        }

        /// <summary>
        /// Especifica o diretório para o arquivo do pacote NuGet criado. Se não for especificado, usa o diretório atual.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_ptb
        {
            get { return GetString("PackageCommandOutputDirDescription_ptb"); }
        }

        /// <summary>
        /// Especifica o diretório para o arquivo do pacote NuGet criado. Se não for especificado, usa o diretório atual.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_ptb()
        {
            return GetString("PackageCommandOutputDirDescription_ptb");
        }

        /// <summary>
        /// Указывает каталог для созданного файла пакета NuGet. Если не указан, используется текущий каталог.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_rus
        {
            get { return GetString("PackageCommandOutputDirDescription_rus"); }
        }

        /// <summary>
        /// Указывает каталог для созданного файла пакета NuGet. Если не указан, используется текущий каталог.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_rus()
        {
            return GetString("PackageCommandOutputDirDescription_rus");
        }

        /// <summary>
        /// Oluşturulan NuGet paket dosyasının dizinini belirtir. Belirtilmemişse, geçerli dizin kullanılır.
        /// </summary>
        internal static string PackageCommandOutputDirDescription_trk
        {
            get { return GetString("PackageCommandOutputDirDescription_trk"); }
        }

        /// <summary>
        /// Oluşturulan NuGet paket dosyasının dizinini belirtir. Belirtilmemişse, geçerli dizin kullanılır.
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_trk()
        {
            return GetString("PackageCommandOutputDirDescription_trk");
        }

        /// <summary>
        /// 为创建的 NuGet 程序包文件指定目录。如果未指定，则使用当前目录。
        /// </summary>
        internal static string PackageCommandOutputDirDescription_chs
        {
            get { return GetString("PackageCommandOutputDirDescription_chs"); }
        }

        /// <summary>
        /// 为创建的 NuGet 程序包文件指定目录。如果未指定，则使用当前目录。
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_chs()
        {
            return GetString("PackageCommandOutputDirDescription_chs");
        }

        /// <summary>
        /// 指定已建立的 NuGet package 檔案的目錄。若未指定，請使用目前的目錄。
        /// </summary>
        internal static string PackageCommandOutputDirDescription_cht
        {
            get { return GetString("PackageCommandOutputDirDescription_cht"); }
        }

        /// <summary>
        /// 指定已建立的 NuGet package 檔案的目錄。若未指定，請使用目前的目錄。
        /// </summary>
        internal static string FormatPackageCommandOutputDirDescription_cht()
        {
            return GetString("PackageCommandOutputDirDescription_cht");
        }

        /// <summary>
        /// Poskytuje možnost zadat při vytváření balíčku seznam vlastností oddělených středníkem (;).
        /// </summary>
        internal static string PackageCommandPropertiesDescription_csy
        {
            get { return GetString("PackageCommandPropertiesDescription_csy"); }
        }

        /// <summary>
        /// Poskytuje možnost zadat při vytváření balíčku seznam vlastností oddělených středníkem (;).
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_csy()
        {
            return GetString("PackageCommandPropertiesDescription_csy");
        }

        /// <summary>
        /// Stellt die Möglichkeit zur Verfügung, eine durch Semikolons (";") getrennte Liste der Eigenschaften beim Erstellen eines Pakets anzugeben.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_deu
        {
            get { return GetString("PackageCommandPropertiesDescription_deu"); }
        }

        /// <summary>
        /// Stellt die Möglichkeit zur Verfügung, eine durch Semikolons (";") getrennte Liste der Eigenschaften beim Erstellen eines Pakets anzugeben.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_deu()
        {
            return GetString("PackageCommandPropertiesDescription_deu");
        }

        /// <summary>
        /// Proporciona la capacidad de especificar una lista de propiedades delimitada con un punto y coma ";" al crear un paquete.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_esp
        {
            get { return GetString("PackageCommandPropertiesDescription_esp"); }
        }

        /// <summary>
        /// Proporciona la capacidad de especificar una lista de propiedades delimitada con un punto y coma ";" al crear un paquete.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_esp()
        {
            return GetString("PackageCommandPropertiesDescription_esp");
        }

        /// <summary>
        /// Permet de spécifier une liste des propriétés, délimitée par des points-virgules « ; », lors de la création du package.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_fra
        {
            get { return GetString("PackageCommandPropertiesDescription_fra"); }
        }

        /// <summary>
        /// Permet de spécifier une liste des propriétés, délimitée par des points-virgules « ; », lors de la création du package.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_fra()
        {
            return GetString("PackageCommandPropertiesDescription_fra");
        }

        /// <summary>
        /// Fornisce l'abilità di specificare un ";" una lista delimitata di proprietà nella creazione di un pacchetto.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_ita
        {
            get { return GetString("PackageCommandPropertiesDescription_ita"); }
        }

        /// <summary>
        /// Fornisce l'abilità di specificare un ";" una lista delimitata di proprietà nella creazione di un pacchetto.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_ita()
        {
            return GetString("PackageCommandPropertiesDescription_ita");
        }

        /// <summary>
        /// パッケージの作成時に、セミコロン (";") 区切りのプロパティ一覧を指定することができます。
        /// </summary>
        internal static string PackageCommandPropertiesDescription_jpn
        {
            get { return GetString("PackageCommandPropertiesDescription_jpn"); }
        }

        /// <summary>
        /// パッケージの作成時に、セミコロン (";") 区切りのプロパティ一覧を指定することができます。
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_jpn()
        {
            return GetString("PackageCommandPropertiesDescription_jpn");
        }

        /// <summary>
        /// 패키지를 만들 때 세미콜론(";")으로 구분된 속성 목록을 지정할 수 있는 기능을 제공합니다.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_kor
        {
            get { return GetString("PackageCommandPropertiesDescription_kor"); }
        }

        /// <summary>
        /// 패키지를 만들 때 세미콜론(";")으로 구분된 속성 목록을 지정할 수 있는 기능을 제공합니다.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_kor()
        {
            return GetString("PackageCommandPropertiesDescription_kor");
        }

        /// <summary>
        /// Zapewnia możliwość określenia listy właściwości rozdzielonych średnikami „;” podczas tworzenia pakietu.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_plk
        {
            get { return GetString("PackageCommandPropertiesDescription_plk"); }
        }

        /// <summary>
        /// Zapewnia możliwość określenia listy właściwości rozdzielonych średnikami „;” podczas tworzenia pakietu.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_plk()
        {
            return GetString("PackageCommandPropertiesDescription_plk");
        }

        /// <summary>
        /// Fornece a capacidade para especificar uma  lista delimitada de propriedades com ponto e vírgula ";" ao criar um pacote.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_ptb
        {
            get { return GetString("PackageCommandPropertiesDescription_ptb"); }
        }

        /// <summary>
        /// Fornece a capacidade para especificar uma  lista delimitada de propriedades com ponto e vírgula ";" ao criar um pacote.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_ptb()
        {
            return GetString("PackageCommandPropertiesDescription_ptb");
        }

        /// <summary>
        /// Дает возможность указать список свойств, разделенных точкой с запятой (;), при создании пакета.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_rus
        {
            get { return GetString("PackageCommandPropertiesDescription_rus"); }
        }

        /// <summary>
        /// Дает возможность указать список свойств, разделенных точкой с запятой (;), при создании пакета.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_rus()
        {
            return GetString("PackageCommandPropertiesDescription_rus");
        }

        /// <summary>
        /// Paket oluşturulurken, özelliklerin noktalı virgülle ";" ayrılmış listesinin belirtilebilmesini sağlar.
        /// </summary>
        internal static string PackageCommandPropertiesDescription_trk
        {
            get { return GetString("PackageCommandPropertiesDescription_trk"); }
        }

        /// <summary>
        /// Paket oluşturulurken, özelliklerin noktalı virgülle ";" ayrılmış listesinin belirtilebilmesini sağlar.
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_trk()
        {
            return GetString("PackageCommandPropertiesDescription_trk");
        }

        /// <summary>
        /// 在创建程序包时，可以指定以分号 ";" 分隔的属性列表。
        /// </summary>
        internal static string PackageCommandPropertiesDescription_chs
        {
            get { return GetString("PackageCommandPropertiesDescription_chs"); }
        }

        /// <summary>
        /// 在创建程序包时，可以指定以分号 ";" 分隔的属性列表。
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_chs()
        {
            return GetString("PackageCommandPropertiesDescription_chs");
        }

        /// <summary>
        /// 建立封裝時，提供可指定屬性分號 ";" 分隔清單的功能。
        /// </summary>
        internal static string PackageCommandPropertiesDescription_cht
        {
            get { return GetString("PackageCommandPropertiesDescription_cht"); }
        }

        /// <summary>
        /// 建立封裝時，提供可指定屬性分號 ";" 分隔清單的功能。
        /// </summary>
        internal static string FormatPackageCommandPropertiesDescription_cht()
        {
            return GetString("PackageCommandPropertiesDescription_cht");
        }

        /// <summary>
        /// Určuje, zda by měl být vytvořen balíček obsahující zdroje a symboly. Při zadání pomocí souboru nuspec vytvoří běžný soubor balíčku NuGet a odpovídající balíček symbolů.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_csy
        {
            get { return GetString("PackageCommandSymbolsDescription_csy"); }
        }

        /// <summary>
        /// Určuje, zda by měl být vytvořen balíček obsahující zdroje a symboly. Při zadání pomocí souboru nuspec vytvoří běžný soubor balíčku NuGet a odpovídající balíček symbolů.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_csy()
        {
            return GetString("PackageCommandSymbolsDescription_csy");
        }

        /// <summary>
        /// Legt fest, ob ein Paket erstellt werden soll, das Quellen und Symbole enthält. Wenn die Angabe mit einer nuspec-Datei erfolgt, werden eine reguläre NuGet-Paketdatei und das zugehörige Symbolpaket erstellt.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_deu
        {
            get { return GetString("PackageCommandSymbolsDescription_deu"); }
        }

        /// <summary>
        /// Legt fest, ob ein Paket erstellt werden soll, das Quellen und Symbole enthält. Wenn die Angabe mit einer nuspec-Datei erfolgt, werden eine reguläre NuGet-Paketdatei und das zugehörige Symbolpaket erstellt.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_deu()
        {
            return GetString("PackageCommandSymbolsDescription_deu");
        }

        /// <summary>
        /// Determina si se debe crear un paquete que contiene orígenes y símbolos. Cuando se especifica con un nuspec, se crea un archivo de proyecto NuGet regular y el paquete de símbolos correspondiente.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_esp
        {
            get { return GetString("PackageCommandSymbolsDescription_esp"); }
        }

        /// <summary>
        /// Determina si se debe crear un paquete que contiene orígenes y símbolos. Cuando se especifica con un nuspec, se crea un archivo de proyecto NuGet regular y el paquete de símbolos correspondiente.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_esp()
        {
            return GetString("PackageCommandSymbolsDescription_esp");
        }

        /// <summary>
        /// Détermine si un package contenant sources et symboles doit être créé. Lorsqu'il est spécifié avec un nuspec, il crée un fichier de package NuGet normal et le package de symboles correspondant.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_fra
        {
            get { return GetString("PackageCommandSymbolsDescription_fra"); }
        }

        /// <summary>
        /// Détermine si un package contenant sources et symboles doit être créé. Lorsqu'il est spécifié avec un nuspec, il crée un fichier de package NuGet normal et le package de symboles correspondant.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_fra()
        {
            return GetString("PackageCommandSymbolsDescription_fra");
        }

        /// <summary>
        /// Determina se il pacchetto contiene fonti e simboli da creare. Quando specificato con nuspec, creare un file NuGet e il corrispondente pacchetto di simboli.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_ita
        {
            get { return GetString("PackageCommandSymbolsDescription_ita"); }
        }

        /// <summary>
        /// Determina se il pacchetto contiene fonti e simboli da creare. Quando specificato con nuspec, creare un file NuGet e il corrispondente pacchetto di simboli.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_ita()
        {
            return GetString("PackageCommandSymbolsDescription_ita");
        }

        /// <summary>
        /// ソースとシンボルを含むパッケージを作成する必要があるかどうかを決定します。nuspec と共に使用すると、通常の NuGet パッケージ ファイルと対応するシンボル パッケージが作成されます。
        /// </summary>
        internal static string PackageCommandSymbolsDescription_jpn
        {
            get { return GetString("PackageCommandSymbolsDescription_jpn"); }
        }

        /// <summary>
        /// ソースとシンボルを含むパッケージを作成する必要があるかどうかを決定します。nuspec と共に使用すると、通常の NuGet パッケージ ファイルと対応するシンボル パッケージが作成されます。
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_jpn()
        {
            return GetString("PackageCommandSymbolsDescription_jpn");
        }

        /// <summary>
        /// 소스 및 기호가 포함된 패키지를 만들어야 하는지 여부를 결정합니다. nuspec으로 지정된 경우 일반 NuGet 패키지 파일 및 해당 기호 패키지를 만듭니다.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_kor
        {
            get { return GetString("PackageCommandSymbolsDescription_kor"); }
        }

        /// <summary>
        /// 소스 및 기호가 포함된 패키지를 만들어야 하는지 여부를 결정합니다. nuspec으로 지정된 경우 일반 NuGet 패키지 파일 및 해당 기호 패키지를 만듭니다.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_kor()
        {
            return GetString("PackageCommandSymbolsDescription_kor");
        }

        /// <summary>
        /// Określa, czy powinien zostać utworzony pakiet zawierający źródła i symbole. W przypadku określenia za pomocą pliku nuspec jest tworzony normalny plik pakietu NuGet i odpowiadający mu pakiet symboli.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_plk
        {
            get { return GetString("PackageCommandSymbolsDescription_plk"); }
        }

        /// <summary>
        /// Określa, czy powinien zostać utworzony pakiet zawierający źródła i symbole. W przypadku określenia za pomocą pliku nuspec jest tworzony normalny plik pakietu NuGet i odpowiadający mu pakiet symboli.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_plk()
        {
            return GetString("PackageCommandSymbolsDescription_plk");
        }

        /// <summary>
        /// Determina se um pacote contendo origens e símbolos deve ser criado. Quando especificado com um nuspec, cria um arquivo de pacote NuGet comum e o pacote de símbolos correspondente.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_ptb
        {
            get { return GetString("PackageCommandSymbolsDescription_ptb"); }
        }

        /// <summary>
        /// Determina se um pacote contendo origens e símbolos deve ser criado. Quando especificado com um nuspec, cria um arquivo de pacote NuGet comum e o pacote de símbolos correspondente.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_ptb()
        {
            return GetString("PackageCommandSymbolsDescription_ptb");
        }

        /// <summary>
        /// Определяет, следует ли создать пакет, содержащий источники и символы. Если задан посредством NUSPEC-файла, создает обычный файл пакета NuGet и соответствующий пакет символов.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_rus
        {
            get { return GetString("PackageCommandSymbolsDescription_rus"); }
        }

        /// <summary>
        /// Определяет, следует ли создать пакет, содержащий источники и символы. Если задан посредством NUSPEC-файла, создает обычный файл пакета NuGet и соответствующий пакет символов.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_rus()
        {
            return GetString("PackageCommandSymbolsDescription_rus");
        }

        /// <summary>
        /// Kaynakları ve simgeleri içeren bir paket oluşturulması gerekip gerekmediğini belirler. Bir nuspec ile belirtildiğinde, normal NuGet paket dosyasını ve ilgili simge paketini oluşturur.
        /// </summary>
        internal static string PackageCommandSymbolsDescription_trk
        {
            get { return GetString("PackageCommandSymbolsDescription_trk"); }
        }

        /// <summary>
        /// Kaynakları ve simgeleri içeren bir paket oluşturulması gerekip gerekmediğini belirler. Bir nuspec ile belirtildiğinde, normal NuGet paket dosyasını ve ilgili simge paketini oluşturur.
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_trk()
        {
            return GetString("PackageCommandSymbolsDescription_trk");
        }

        /// <summary>
        /// 确定是否应创建包含源和符号的程序包。当使用 nuspec 指定时，创建常规 NuGet 程序包文件和相应的符号程序包。
        /// </summary>
        internal static string PackageCommandSymbolsDescription_chs
        {
            get { return GetString("PackageCommandSymbolsDescription_chs"); }
        }

        /// <summary>
        /// 确定是否应创建包含源和符号的程序包。当使用 nuspec 指定时，创建常规 NuGet 程序包文件和相应的符号程序包。
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_chs()
        {
            return GetString("PackageCommandSymbolsDescription_chs");
        }

        /// <summary>
        /// 判斷是否應該建立包含來源和符號的封裝。以 nuspec 指定時，建立一班 NuGet 封裝檔以及相對應的符號封裝。
        /// </summary>
        internal static string PackageCommandSymbolsDescription_cht
        {
            get { return GetString("PackageCommandSymbolsDescription_cht"); }
        }

        /// <summary>
        /// 判斷是否應該建立包含來源和符號的封裝。以 nuspec 指定時，建立一班 NuGet 封裝檔以及相對應的符號封裝。
        /// </summary>
        internal static string FormatPackageCommandSymbolsDescription_cht()
        {
            return GetString("PackageCommandSymbolsDescription_cht");
        }

        /// <summary>
        /// Určuje, zda výstupní soubory projektu mají být uloženy ve složce nástrojů. 
        /// </summary>
        internal static string PackageCommandToolDescription_csy
        {
            get { return GetString("PackageCommandToolDescription_csy"); }
        }

        /// <summary>
        /// Určuje, zda výstupní soubory projektu mají být uloženy ve složce nástrojů. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_csy()
        {
            return GetString("PackageCommandToolDescription_csy");
        }

        /// <summary>
        /// Legt fest, ob sich die Ausgabedateien des Projekts im Ordner "tool" befinden sollen. 
        /// </summary>
        internal static string PackageCommandToolDescription_deu
        {
            get { return GetString("PackageCommandToolDescription_deu"); }
        }

        /// <summary>
        /// Legt fest, ob sich die Ausgabedateien des Projekts im Ordner "tool" befinden sollen. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_deu()
        {
            return GetString("PackageCommandToolDescription_deu");
        }

        /// <summary>
        /// Determina si los archivos de salida del proyecto deben estar en la carpeta de herramientas.
        /// </summary>
        internal static string PackageCommandToolDescription_esp
        {
            get { return GetString("PackageCommandToolDescription_esp"); }
        }

        /// <summary>
        /// Determina si los archivos de salida del proyecto deben estar en la carpeta de herramientas.
        /// </summary>
        internal static string FormatPackageCommandToolDescription_esp()
        {
            return GetString("PackageCommandToolDescription_esp");
        }

        /// <summary>
        /// Détermine si les fichiers de sortie du projet doivent se trouver dans le dossier de l'outil. 
        /// </summary>
        internal static string PackageCommandToolDescription_fra
        {
            get { return GetString("PackageCommandToolDescription_fra"); }
        }

        /// <summary>
        /// Détermine si les fichiers de sortie du projet doivent se trouver dans le dossier de l'outil. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_fra()
        {
            return GetString("PackageCommandToolDescription_fra");
        }

        /// <summary>
        /// Determina se il file d'uscita del progetto deve trovarsi nella cartella strumenti.
        /// </summary>
        internal static string PackageCommandToolDescription_ita
        {
            get { return GetString("PackageCommandToolDescription_ita"); }
        }

        /// <summary>
        /// Determina se il file d'uscita del progetto deve trovarsi nella cartella strumenti.
        /// </summary>
        internal static string FormatPackageCommandToolDescription_ita()
        {
            return GetString("PackageCommandToolDescription_ita");
        }

        /// <summary>
        /// プロジェクトの出力ファイルをツール フォルダーにする必要があるかどうかを決定します。
        /// </summary>
        internal static string PackageCommandToolDescription_jpn
        {
            get { return GetString("PackageCommandToolDescription_jpn"); }
        }

        /// <summary>
        /// プロジェクトの出力ファイルをツール フォルダーにする必要があるかどうかを決定します。
        /// </summary>
        internal static string FormatPackageCommandToolDescription_jpn()
        {
            return GetString("PackageCommandToolDescription_jpn");
        }

        /// <summary>
        /// 프로젝트의 출력 파일이 도구 폴더에 있어야 하는지 여부를 결정합니다. 
        /// </summary>
        internal static string PackageCommandToolDescription_kor
        {
            get { return GetString("PackageCommandToolDescription_kor"); }
        }

        /// <summary>
        /// 프로젝트의 출력 파일이 도구 폴더에 있어야 하는지 여부를 결정합니다. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_kor()
        {
            return GetString("PackageCommandToolDescription_kor");
        }

        /// <summary>
        /// Określa, czy pliki wyjściowe projektu powinny znajdować się z folderze narzędzi. 
        /// </summary>
        internal static string PackageCommandToolDescription_plk
        {
            get { return GetString("PackageCommandToolDescription_plk"); }
        }

        /// <summary>
        /// Określa, czy pliki wyjściowe projektu powinny znajdować się z folderze narzędzi. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_plk()
        {
            return GetString("PackageCommandToolDescription_plk");
        }

        /// <summary>
        /// Determina se os arquivos de saída do projeto devem estar na pasta da ferramenta.
        /// </summary>
        internal static string PackageCommandToolDescription_ptb
        {
            get { return GetString("PackageCommandToolDescription_ptb"); }
        }

        /// <summary>
        /// Determina se os arquivos de saída do projeto devem estar na pasta da ferramenta.
        /// </summary>
        internal static string FormatPackageCommandToolDescription_ptb()
        {
            return GetString("PackageCommandToolDescription_ptb");
        }

        /// <summary>
        /// Определяет, должны ли выходные файлы проекта находиться в папке средства. 
        /// </summary>
        internal static string PackageCommandToolDescription_rus
        {
            get { return GetString("PackageCommandToolDescription_rus"); }
        }

        /// <summary>
        /// Определяет, должны ли выходные файлы проекта находиться в папке средства. 
        /// </summary>
        internal static string FormatPackageCommandToolDescription_rus()
        {
            return GetString("PackageCommandToolDescription_rus");
        }

        /// <summary>
        /// Projenin çıktı dosyalarının araç klasöründe olması gerekip gerekmediğini belirler.
        /// </summary>
        internal static string PackageCommandToolDescription_trk
        {
            get { return GetString("PackageCommandToolDescription_trk"); }
        }

        /// <summary>
        /// Projenin çıktı dosyalarının araç klasöründe olması gerekip gerekmediğini belirler.
        /// </summary>
        internal static string FormatPackageCommandToolDescription_trk()
        {
            return GetString("PackageCommandToolDescription_trk");
        }

        /// <summary>
        /// 确定项目的输出文件是否应在工具文件夹中。
        /// </summary>
        internal static string PackageCommandToolDescription_chs
        {
            get { return GetString("PackageCommandToolDescription_chs"); }
        }

        /// <summary>
        /// 确定项目的输出文件是否应在工具文件夹中。
        /// </summary>
        internal static string FormatPackageCommandToolDescription_chs()
        {
            return GetString("PackageCommandToolDescription_chs");
        }

        /// <summary>
        /// 判斷專案的輸出檔是否應該放在工具資料夾中。
        /// </summary>
        internal static string PackageCommandToolDescription_cht
        {
            get { return GetString("PackageCommandToolDescription_cht"); }
        }

        /// <summary>
        /// 判斷專案的輸出檔是否應該放在工具資料夾中。
        /// </summary>
        internal static string FormatPackageCommandToolDescription_cht()
        {
            return GetString("PackageCommandToolDescription_cht");
        }

        /// <summary>
        /// Určuje umístění souboru nuspec nebo souboru projektu pro vytvoření balíčku.
        /// </summary>
        internal static string PackageCommandUsageDescription_csy
        {
            get { return GetString("PackageCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Určuje umístění souboru nuspec nebo souboru projektu pro vytvoření balíčku.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_csy()
        {
            return GetString("PackageCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie den Speicherort der nuspec- oder Projektdatei an, um ein Paket zu erstellen.
        /// </summary>
        internal static string PackageCommandUsageDescription_deu
        {
            get { return GetString("PackageCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie den Speicherort der nuspec- oder Projektdatei an, um ein Paket zu erstellen.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_deu()
        {
            return GetString("PackageCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar la ubicación del archivo nuspec o de proyecto para crear un paquete.
        /// </summary>
        internal static string PackageCommandUsageDescription_esp
        {
            get { return GetString("PackageCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar la ubicación del archivo nuspec o de proyecto para crear un paquete.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_esp()
        {
            return GetString("PackageCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez l'emplacement du fichier .nuspec ou projet pour créer un package.
        /// </summary>
        internal static string PackageCommandUsageDescription_fra
        {
            get { return GetString("PackageCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez l'emplacement du fichier .nuspec ou projet pour créer un package.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_fra()
        {
            return GetString("PackageCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specificare la posizione del file di progetto nuspec o file fi progetto per creare il pacchetto.
        /// </summary>
        internal static string PackageCommandUsageDescription_ita
        {
            get { return GetString("PackageCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specificare la posizione del file di progetto nuspec o file fi progetto per creare il pacchetto.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_ita()
        {
            return GetString("PackageCommandUsageDescription_ita");
        }

        /// <summary>
        /// パッケージを作成する nuspec または project ファイルの場所を指定します。
        /// </summary>
        internal static string PackageCommandUsageDescription_jpn
        {
            get { return GetString("PackageCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// パッケージを作成する nuspec または project ファイルの場所を指定します。
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_jpn()
        {
            return GetString("PackageCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 패키지를 만들 nuspec 또는 프로젝트 파일의 위치를 지정합니다.
        /// </summary>
        internal static string PackageCommandUsageDescription_kor
        {
            get { return GetString("PackageCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 패키지를 만들 nuspec 또는 프로젝트 파일의 위치를 지정합니다.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_kor()
        {
            return GetString("PackageCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określa lokalizację pliku nuspec lub pliku projektu na potrzeby utworzenia pakietu.
        /// </summary>
        internal static string PackageCommandUsageDescription_plk
        {
            get { return GetString("PackageCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określa lokalizację pliku nuspec lub pliku projektu na potrzeby utworzenia pakietu.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_plk()
        {
            return GetString("PackageCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especifique o local do arquivo nuspec ou de projeto para criar um pacote.
        /// </summary>
        internal static string PackageCommandUsageDescription_ptb
        {
            get { return GetString("PackageCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especifique o local do arquivo nuspec ou de projeto para criar um pacote.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_ptb()
        {
            return GetString("PackageCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Задание расположения NUSPEC-файла или файла проекта для создания пакета.
        /// </summary>
        internal static string PackageCommandUsageDescription_rus
        {
            get { return GetString("PackageCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Задание расположения NUSPEC-файла или файла проекта для создания пакета.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_rus()
        {
            return GetString("PackageCommandUsageDescription_rus");
        }

        /// <summary>
        /// Paket oluşturmak için nuspec veya proje dosyalarının konumunu belirtir.
        /// </summary>
        internal static string PackageCommandUsageDescription_trk
        {
            get { return GetString("PackageCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Paket oluşturmak için nuspec veya proje dosyalarının konumunu belirtir.
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_trk()
        {
            return GetString("PackageCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定用于创建程序包的 nuspec 或项目文件的位置。
        /// </summary>
        internal static string PackageCommandUsageDescription_chs
        {
            get { return GetString("PackageCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定用于创建程序包的 nuspec 或项目文件的位置。
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_chs()
        {
            return GetString("PackageCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定 nuspec 位置或專案檔以建立封裝。
        /// </summary>
        internal static string PackageCommandUsageDescription_cht
        {
            get { return GetString("PackageCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定 nuspec 位置或專案檔以建立封裝。
        /// </summary>
        internal static string FormatPackageCommandUsageDescription_cht()
        {
            return GetString("PackageCommandUsageDescription_cht");
        }

        /// <summary>
        /// &lt;nuspec | projekt&gt; [možnosti]
        /// </summary>
        internal static string PackageCommandUsageSummary_csy
        {
            get { return GetString("PackageCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// &lt;nuspec | projekt&gt; [možnosti]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_csy()
        {
            return GetString("PackageCommandUsageSummary_csy");
        }

        /// <summary>
        /// &lt;nuspec | Projekt&gt; [Optionen]
        /// </summary>
        internal static string PackageCommandUsageSummary_deu
        {
            get { return GetString("PackageCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// &lt;nuspec | Projekt&gt; [Optionen]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_deu()
        {
            return GetString("PackageCommandUsageSummary_deu");
        }

        /// <summary>
        /// &lt;nuspec | proyecto&gt; [options]
        /// </summary>
        internal static string PackageCommandUsageSummary_esp
        {
            get { return GetString("PackageCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// &lt;nuspec | proyecto&gt; [options]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_esp()
        {
            return GetString("PackageCommandUsageSummary_esp");
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string PackageCommandUsageSummary_fra
        {
            get { return GetString("PackageCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_fra()
        {
            return GetString("PackageCommandUsageSummary_fra");
        }

        /// <summary>
        /// &lt;nuspec | progettot&gt; [opzioni]
        /// </summary>
        internal static string PackageCommandUsageSummary_ita
        {
            get { return GetString("PackageCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// &lt;nuspec | progettot&gt; [opzioni]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_ita()
        {
            return GetString("PackageCommandUsageSummary_ita");
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string PackageCommandUsageSummary_jpn
        {
            get { return GetString("PackageCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [options]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_jpn()
        {
            return GetString("PackageCommandUsageSummary_jpn");
        }

        /// <summary>
        /// &lt;nuspec | 프로젝트&gt; [옵션]
        /// </summary>
        internal static string PackageCommandUsageSummary_kor
        {
            get { return GetString("PackageCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// &lt;nuspec | 프로젝트&gt; [옵션]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_kor()
        {
            return GetString("PackageCommandUsageSummary_kor");
        }

        /// <summary>
        /// &lt;nuspec | projekt&gt; [opcje]
        /// </summary>
        internal static string PackageCommandUsageSummary_plk
        {
            get { return GetString("PackageCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// &lt;nuspec | projekt&gt; [opcje]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_plk()
        {
            return GetString("PackageCommandUsageSummary_plk");
        }

        /// <summary>
        /// &lt;nuspec | projeto&gt; [opções]
        /// </summary>
        internal static string PackageCommandUsageSummary_ptb
        {
            get { return GetString("PackageCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// &lt;nuspec | projeto&gt; [opções]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_ptb()
        {
            return GetString("PackageCommandUsageSummary_ptb");
        }

        /// <summary>
        /// &lt;nuspec-файл | проект&gt; [параметры]
        /// </summary>
        internal static string PackageCommandUsageSummary_rus
        {
            get { return GetString("PackageCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// &lt;nuspec-файл | проект&gt; [параметры]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_rus()
        {
            return GetString("PackageCommandUsageSummary_rus");
        }

        /// <summary>
        /// &lt;nuspec | proje&gt; [seçenekler]
        /// </summary>
        internal static string PackageCommandUsageSummary_trk
        {
            get { return GetString("PackageCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// &lt;nuspec | proje&gt; [seçenekler]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_trk()
        {
            return GetString("PackageCommandUsageSummary_trk");
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [选项]
        /// </summary>
        internal static string PackageCommandUsageSummary_chs
        {
            get { return GetString("PackageCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// &lt;nuspec | project&gt; [选项]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_chs()
        {
            return GetString("PackageCommandUsageSummary_chs");
        }

        /// <summary>
        /// &lt;nuspec | 專案&gt; [選項]
        /// </summary>
        internal static string PackageCommandUsageSummary_cht
        {
            get { return GetString("PackageCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// &lt;nuspec | 專案&gt; [選項]
        /// </summary>
        internal static string FormatPackageCommandUsageSummary_cht()
        {
            return GetString("PackageCommandUsageSummary_cht");
        }

        /// <summary>
        /// Zobrazí podrobný výstup pro sestavování balíčků.
        /// </summary>
        internal static string PackageCommandVerboseDescription_csy
        {
            get { return GetString("PackageCommandVerboseDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí podrobný výstup pro sestavování balíčků.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_csy()
        {
            return GetString("PackageCommandVerboseDescription_csy");
        }

        /// <summary>
        /// Zeigt die ausführliche Ausgabe für die Paketerstellung an.
        /// </summary>
        internal static string PackageCommandVerboseDescription_deu
        {
            get { return GetString("PackageCommandVerboseDescription_deu"); }
        }

        /// <summary>
        /// Zeigt die ausführliche Ausgabe für die Paketerstellung an.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_deu()
        {
            return GetString("PackageCommandVerboseDescription_deu");
        }

        /// <summary>
        /// Muestra los resultados detallados de la compilación del paquete.
        /// </summary>
        internal static string PackageCommandVerboseDescription_esp
        {
            get { return GetString("PackageCommandVerboseDescription_esp"); }
        }

        /// <summary>
        /// Muestra los resultados detallados de la compilación del paquete.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_esp()
        {
            return GetString("PackageCommandVerboseDescription_esp");
        }

        /// <summary>
        /// Affiche la sortie détaillée de création du package.
        /// </summary>
        internal static string PackageCommandVerboseDescription_fra
        {
            get { return GetString("PackageCommandVerboseDescription_fra"); }
        }

        /// <summary>
        /// Affiche la sortie détaillée de création du package.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_fra()
        {
            return GetString("PackageCommandVerboseDescription_fra");
        }

        /// <summary>
        /// Mostra l'uscita ridondante del pacchetto
        /// </summary>
        internal static string PackageCommandVerboseDescription_ita
        {
            get { return GetString("PackageCommandVerboseDescription_ita"); }
        }

        /// <summary>
        /// Mostra l'uscita ridondante del pacchetto
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_ita()
        {
            return GetString("PackageCommandVerboseDescription_ita");
        }

        /// <summary>
        /// パッケージ ビルドの詳細な出力を表示します。
        /// </summary>
        internal static string PackageCommandVerboseDescription_jpn
        {
            get { return GetString("PackageCommandVerboseDescription_jpn"); }
        }

        /// <summary>
        /// パッケージ ビルドの詳細な出力を表示します。
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_jpn()
        {
            return GetString("PackageCommandVerboseDescription_jpn");
        }

        /// <summary>
        /// 패키지 빌드에 대한 자세한 출력을 표시합니다.
        /// </summary>
        internal static string PackageCommandVerboseDescription_kor
        {
            get { return GetString("PackageCommandVerboseDescription_kor"); }
        }

        /// <summary>
        /// 패키지 빌드에 대한 자세한 출력을 표시합니다.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_kor()
        {
            return GetString("PackageCommandVerboseDescription_kor");
        }

        /// <summary>
        /// Pokazuje dane wyjściowe w trybie pełnym na potrzeby kompilacji pakietu.
        /// </summary>
        internal static string PackageCommandVerboseDescription_plk
        {
            get { return GetString("PackageCommandVerboseDescription_plk"); }
        }

        /// <summary>
        /// Pokazuje dane wyjściowe w trybie pełnym na potrzeby kompilacji pakietu.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_plk()
        {
            return GetString("PackageCommandVerboseDescription_plk");
        }

        /// <summary>
        /// Mostra a saída detalhada para a construção do pacote.
        /// </summary>
        internal static string PackageCommandVerboseDescription_ptb
        {
            get { return GetString("PackageCommandVerboseDescription_ptb"); }
        }

        /// <summary>
        /// Mostra a saída detalhada para a construção do pacote.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_ptb()
        {
            return GetString("PackageCommandVerboseDescription_ptb");
        }

        /// <summary>
        /// Отображает подробные выходные данные при сборке пакета.
        /// </summary>
        internal static string PackageCommandVerboseDescription_rus
        {
            get { return GetString("PackageCommandVerboseDescription_rus"); }
        }

        /// <summary>
        /// Отображает подробные выходные данные при сборке пакета.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_rus()
        {
            return GetString("PackageCommandVerboseDescription_rus");
        }

        /// <summary>
        /// Paket oluşturma için ayrıntılı çıktıyı gösterir.
        /// </summary>
        internal static string PackageCommandVerboseDescription_trk
        {
            get { return GetString("PackageCommandVerboseDescription_trk"); }
        }

        /// <summary>
        /// Paket oluşturma için ayrıntılı çıktıyı gösterir.
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_trk()
        {
            return GetString("PackageCommandVerboseDescription_trk");
        }

        /// <summary>
        /// 显示程序包生成的详细输出。
        /// </summary>
        internal static string PackageCommandVerboseDescription_chs
        {
            get { return GetString("PackageCommandVerboseDescription_chs"); }
        }

        /// <summary>
        /// 显示程序包生成的详细输出。
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_chs()
        {
            return GetString("PackageCommandVerboseDescription_chs");
        }

        /// <summary>
        /// 顯示封裝建置的詳細資料輸出。
        /// </summary>
        internal static string PackageCommandVerboseDescription_cht
        {
            get { return GetString("PackageCommandVerboseDescription_cht"); }
        }

        /// <summary>
        /// 顯示封裝建置的詳細資料輸出。
        /// </summary>
        internal static string FormatPackageCommandVerboseDescription_cht()
        {
            return GetString("PackageCommandVerboseDescription_cht");
        }

        /// <summary>
        /// Přepíše číslo verze ze souboru nuspec.
        /// </summary>
        internal static string PackageCommandVersionDescription_csy
        {
            get { return GetString("PackageCommandVersionDescription_csy"); }
        }

        /// <summary>
        /// Přepíše číslo verze ze souboru nuspec.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_csy()
        {
            return GetString("PackageCommandVersionDescription_csy");
        }

        /// <summary>
        /// Setzt die Versionsnummer aus der nuspec-Datei außer Kraft.
        /// </summary>
        internal static string PackageCommandVersionDescription_deu
        {
            get { return GetString("PackageCommandVersionDescription_deu"); }
        }

        /// <summary>
        /// Setzt die Versionsnummer aus der nuspec-Datei außer Kraft.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_deu()
        {
            return GetString("PackageCommandVersionDescription_deu");
        }

        /// <summary>
        /// Reemplaza el número de versión del archivo nuspec.
        /// </summary>
        internal static string PackageCommandVersionDescription_esp
        {
            get { return GetString("PackageCommandVersionDescription_esp"); }
        }

        /// <summary>
        /// Reemplaza el número de versión del archivo nuspec.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_esp()
        {
            return GetString("PackageCommandVersionDescription_esp");
        }

        /// <summary>
        /// Remplace le numéro de version provenant du fichier .nuspec.
        /// </summary>
        internal static string PackageCommandVersionDescription_fra
        {
            get { return GetString("PackageCommandVersionDescription_fra"); }
        }

        /// <summary>
        /// Remplace le numéro de version provenant du fichier .nuspec.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_fra()
        {
            return GetString("PackageCommandVersionDescription_fra");
        }

        /// <summary>
        /// 
        /// </summary>
        internal static string PackageCommandVersionDescription_ita
        {
            get { return GetString("PackageCommandVersionDescription_ita"); }
        }

        /// <summary>
        /// 
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_ita()
        {
            return GetString("PackageCommandVersionDescription_ita");
        }

        /// <summary>
        /// nuspec ファイルのバージョン番号を上書きします。
        /// </summary>
        internal static string PackageCommandVersionDescription_jpn
        {
            get { return GetString("PackageCommandVersionDescription_jpn"); }
        }

        /// <summary>
        /// nuspec ファイルのバージョン番号を上書きします。
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_jpn()
        {
            return GetString("PackageCommandVersionDescription_jpn");
        }

        /// <summary>
        /// nuspec 파일의 버전 번호를 재정의합니다.
        /// </summary>
        internal static string PackageCommandVersionDescription_kor
        {
            get { return GetString("PackageCommandVersionDescription_kor"); }
        }

        /// <summary>
        /// nuspec 파일의 버전 번호를 재정의합니다.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_kor()
        {
            return GetString("PackageCommandVersionDescription_kor");
        }

        /// <summary>
        /// Przesłania numer wersji z pliku nuspec.
        /// </summary>
        internal static string PackageCommandVersionDescription_plk
        {
            get { return GetString("PackageCommandVersionDescription_plk"); }
        }

        /// <summary>
        /// Przesłania numer wersji z pliku nuspec.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_plk()
        {
            return GetString("PackageCommandVersionDescription_plk");
        }

        /// <summary>
        /// Substitui o número da versão do arquivo nuspec.
        /// </summary>
        internal static string PackageCommandVersionDescription_ptb
        {
            get { return GetString("PackageCommandVersionDescription_ptb"); }
        }

        /// <summary>
        /// Substitui o número da versão do arquivo nuspec.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_ptb()
        {
            return GetString("PackageCommandVersionDescription_ptb");
        }

        /// <summary>
        /// Переопределяет номер версии из NUSPEC-файла.
        /// </summary>
        internal static string PackageCommandVersionDescription_rus
        {
            get { return GetString("PackageCommandVersionDescription_rus"); }
        }

        /// <summary>
        /// Переопределяет номер версии из NUSPEC-файла.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_rus()
        {
            return GetString("PackageCommandVersionDescription_rus");
        }

        /// <summary>
        /// Nuspec dosyasındaki sürüm numarasını geçersiz kılar.
        /// </summary>
        internal static string PackageCommandVersionDescription_trk
        {
            get { return GetString("PackageCommandVersionDescription_trk"); }
        }

        /// <summary>
        /// Nuspec dosyasındaki sürüm numarasını geçersiz kılar.
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_trk()
        {
            return GetString("PackageCommandVersionDescription_trk");
        }

        /// <summary>
        /// 覆盖 nuspec 文件中的版本号。
        /// </summary>
        internal static string PackageCommandVersionDescription_chs
        {
            get { return GetString("PackageCommandVersionDescription_chs"); }
        }

        /// <summary>
        /// 覆盖 nuspec 文件中的版本号。
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_chs()
        {
            return GetString("PackageCommandVersionDescription_chs");
        }

        /// <summary>
        /// 覆寫 nuspec 檔案的版本號碼。
        /// </summary>
        internal static string PackageCommandVersionDescription_cht
        {
            get { return GetString("PackageCommandVersionDescription_cht"); }
        }

        /// <summary>
        /// 覆寫 nuspec 檔案的版本號碼。
        /// </summary>
        internal static string FormatPackageCommandVersionDescription_cht()
        {
            return GetString("PackageCommandVersionDescription_cht");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_csy
        {
            get { return GetString("PackCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_csy()
        {
            return GetString("PackCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_deu
        {
            get { return GetString("PackCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_deu()
        {
            return GetString("PackCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_esp
        {
            get { return GetString("PackCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_esp()
        {
            return GetString("PackCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_fra
        {
            get { return GetString("PackCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_fra()
        {
            return GetString("PackCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_ita
        {
            get { return GetString("PackCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_ita()
        {
            return GetString("PackCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_jpn
        {
            get { return GetString("PackCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_jpn()
        {
            return GetString("PackCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_kor
        {
            get { return GetString("PackCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_kor()
        {
            return GetString("PackCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_plk
        {
            get { return GetString("PackCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_plk()
        {
            return GetString("PackCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_ptb
        {
            get { return GetString("PackCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_ptb()
        {
            return GetString("PackCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_rus
        {
            get { return GetString("PackCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_rus()
        {
            return GetString("PackCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_trk
        {
            get { return GetString("PackCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_trk()
        {
            return GetString("PackCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_chs
        {
            get { return GetString("PackCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_chs()
        {
            return GetString("PackCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string PackCommandUsageExamples_cht
        {
            get { return GetString("PackCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget pack
        /// 
        /// nuget pack foo.nuspec
        /// 
        /// nuget pack foo.csproj
        /// 
        /// nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        /// 
        /// nuget pack foo.nuspec -Version 2.1.0
        /// </summary>
        internal static string FormatPackCommandUsageExamples_cht()
        {
            return GetString("PackCommandUsageExamples_cht");
        }

        /// <summary>
        /// Určuje adresu URL serveru. Není-li zadána, použije se adresa nuget.org, pokud v konfiguračním souboru NuGet není nastavena konfigurační hodnota DefaultPushSource.
        /// </summary>
        internal static string PushCommandSourceDescription_csy
        {
            get { return GetString("PushCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Určuje adresu URL serveru. Není-li zadána, použije se adresa nuget.org, pokud v konfiguračním souboru NuGet není nastavena konfigurační hodnota DefaultPushSource.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_csy()
        {
            return GetString("PushCommandSourceDescription_csy");
        }

        /// <summary>
        /// Gibt die Server-URL an. Erfolgt keine Angabe, wird "nuget.org" verwendet. Dies ist nur dann nicht der Fall, wenn der Konfigurationswert "DefaultPushSource" in der NuGet-Konfigurationsdatei festgelegt ist.
        /// </summary>
        internal static string PushCommandSourceDescription_deu
        {
            get { return GetString("PushCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Gibt die Server-URL an. Erfolgt keine Angabe, wird "nuget.org" verwendet. Dies ist nur dann nicht der Fall, wenn der Konfigurationswert "DefaultPushSource" in der NuGet-Konfigurationsdatei festgelegt ist.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_deu()
        {
            return GetString("PushCommandSourceDescription_deu");
        }

        /// <summary>
        /// Especifica la URL del servidor. Si no se especifica, se usa nuget.org a menos que el valor de configuración de DefaultPushSource se establezca en el archivo de configuración de NuGet.
        /// </summary>
        internal static string PushCommandSourceDescription_esp
        {
            get { return GetString("PushCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Especifica la URL del servidor. Si no se especifica, se usa nuget.org a menos que el valor de configuración de DefaultPushSource se establezca en el archivo de configuración de NuGet.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_esp()
        {
            return GetString("PushCommandSourceDescription_esp");
        }

        /// <summary>
        /// Spécifie l'URL du serveur. nuget.org est utilisé en l'absence de spécification, sauf si la valeur de configuration DefaultPushSource est définie dans le fichier de configuration NuGet.
        /// </summary>
        internal static string PushCommandSourceDescription_fra
        {
            get { return GetString("PushCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Spécifie l'URL du serveur. nuget.org est utilisé en l'absence de spécification, sauf si la valeur de configuration DefaultPushSource est définie dans le fichier de configuration NuGet.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_fra()
        {
            return GetString("PushCommandSourceDescription_fra");
        }

        /// <summary>
        /// Specifica il server URL. Se non specificato, nuget.org èe quello usato a mano che DefaultPushSource config value è impostato nel file NuGet config.
        /// </summary>
        internal static string PushCommandSourceDescription_ita
        {
            get { return GetString("PushCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Specifica il server URL. Se non specificato, nuget.org èe quello usato a mano che DefaultPushSource config value è impostato nel file NuGet config.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_ita()
        {
            return GetString("PushCommandSourceDescription_ita");
        }

        /// <summary>
        /// サーバーの URL を指定します。指定しない場合、NuGet 構成ファイルに DefaultPushSource 構成値が設定されていなければ、nuget.org が使用されます。
        /// </summary>
        internal static string PushCommandSourceDescription_jpn
        {
            get { return GetString("PushCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// サーバーの URL を指定します。指定しない場合、NuGet 構成ファイルに DefaultPushSource 構成値が設定されていなければ、nuget.org が使用されます。
        /// </summary>
        internal static string FormatPushCommandSourceDescription_jpn()
        {
            return GetString("PushCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 서버 URL을 지정합니다. 지정되지 않은 경우 NuGet config 파일에 DefaultPushSource config 값이 설정되어 있지 않으면 nuget.org가 사용됩니다.
        /// </summary>
        internal static string PushCommandSourceDescription_kor
        {
            get { return GetString("PushCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 서버 URL을 지정합니다. 지정되지 않은 경우 NuGet config 파일에 DefaultPushSource config 값이 설정되어 있지 않으면 nuget.org가 사용됩니다.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_kor()
        {
            return GetString("PushCommandSourceDescription_kor");
        }

        /// <summary>
        /// Określa adres URL serwera. Jeśli nie zostanie on określony, będzie używana witryna nuget.org, chyba że w pliku konfiguracji NuGet zostanie określona wartość DefaultPushSource.
        /// </summary>
        internal static string PushCommandSourceDescription_plk
        {
            get { return GetString("PushCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Określa adres URL serwera. Jeśli nie zostanie on określony, będzie używana witryna nuget.org, chyba że w pliku konfiguracji NuGet zostanie określona wartość DefaultPushSource.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_plk()
        {
            return GetString("PushCommandSourceDescription_plk");
        }

        /// <summary>
        /// Especifica a URL do servidor. Se não for especificado, nuget.org é usado a menos que o valor de configuração DefaultPushSource seja definido no arquivo de configuração NuGet.
        /// </summary>
        internal static string PushCommandSourceDescription_ptb
        {
            get { return GetString("PushCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Especifica a URL do servidor. Se não for especificado, nuget.org é usado a menos que o valor de configuração DefaultPushSource seja definido no arquivo de configuração NuGet.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_ptb()
        {
            return GetString("PushCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Указывает URL-адрес сервера. Если не указан, используется адрес "nuget.org", если только в файле конфигурации NuGet не задано значение конфигурации DefaultPushSource.
        /// </summary>
        internal static string PushCommandSourceDescription_rus
        {
            get { return GetString("PushCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Указывает URL-адрес сервера. Если не указан, используется адрес "nuget.org", если только в файле конфигурации NuGet не задано значение конфигурации DefaultPushSource.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_rus()
        {
            return GetString("PushCommandSourceDescription_rus");
        }

        /// <summary>
        /// Sunucu URL'sini belirtir. Belirtilmemişse, NuGet yapılandırma dosyasında DefaultPushSource yapılandırma değerinin ayarlanmamış olması halinde, nuget.org kullanılır.
        /// </summary>
        internal static string PushCommandSourceDescription_trk
        {
            get { return GetString("PushCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Sunucu URL'sini belirtir. Belirtilmemişse, NuGet yapılandırma dosyasında DefaultPushSource yapılandırma değerinin ayarlanmamış olması halinde, nuget.org kullanılır.
        /// </summary>
        internal static string FormatPushCommandSourceDescription_trk()
        {
            return GetString("PushCommandSourceDescription_trk");
        }

        /// <summary>
        /// 指定服务器 URL。如果未指定，则除非在 NuGet 配置文件中设置了 DefaultPushSource 配置值，否则使用 nuget.org。
        /// </summary>
        internal static string PushCommandSourceDescription_chs
        {
            get { return GetString("PushCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 指定服务器 URL。如果未指定，则除非在 NuGet 配置文件中设置了 DefaultPushSource 配置值，否则使用 nuget.org。
        /// </summary>
        internal static string FormatPushCommandSourceDescription_chs()
        {
            return GetString("PushCommandSourceDescription_chs");
        }

        /// <summary>
        /// 指定伺服器 URL。若未指定，除非在 NuGet 設定檔中設定了 DefaultPushSource config 值，否則會使用 nuget.orgis。
        /// </summary>
        internal static string PushCommandSourceDescription_cht
        {
            get { return GetString("PushCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 指定伺服器 URL。若未指定，除非在 NuGet 設定檔中設定了 DefaultPushSource config 值，否則會使用 nuget.orgis。
        /// </summary>
        internal static string FormatPushCommandSourceDescription_cht()
        {
            return GetString("PushCommandSourceDescription_cht");
        }

        /// <summary>
        /// Určuje prodlevu pro předání na server (v sekundách). Výchozí nastavení je 300 sekund (5 minut).
        /// </summary>
        internal static string PushCommandTimeoutDescription_csy
        {
            get { return GetString("PushCommandTimeoutDescription_csy"); }
        }

        /// <summary>
        /// Určuje prodlevu pro předání na server (v sekundách). Výchozí nastavení je 300 sekund (5 minut).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_csy()
        {
            return GetString("PushCommandTimeoutDescription_csy");
        }

        /// <summary>
        /// Gibt das Timeout für den Pushvorgang auf einen Server in Sekunden an. Der Standardwert sind 300 Sekunden (5 Minuten).
        /// </summary>
        internal static string PushCommandTimeoutDescription_deu
        {
            get { return GetString("PushCommandTimeoutDescription_deu"); }
        }

        /// <summary>
        /// Gibt das Timeout für den Pushvorgang auf einen Server in Sekunden an. Der Standardwert sind 300 Sekunden (5 Minuten).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_deu()
        {
            return GetString("PushCommandTimeoutDescription_deu");
        }

        /// <summary>
        /// Especifica el tiempo de expiración en segundos de la inserción a un servidor. Se predetermina a 300 segundos (5 minutos).
        /// </summary>
        internal static string PushCommandTimeoutDescription_esp
        {
            get { return GetString("PushCommandTimeoutDescription_esp"); }
        }

        /// <summary>
        /// Especifica el tiempo de expiración en segundos de la inserción a un servidor. Se predetermina a 300 segundos (5 minutos).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_esp()
        {
            return GetString("PushCommandTimeoutDescription_esp");
        }

        /// <summary>
        /// Spécifie en secondes le délai d'expiration d'émission vers un serveur. 300 secondes (5 minutes) par défaut.
        /// </summary>
        internal static string PushCommandTimeoutDescription_fra
        {
            get { return GetString("PushCommandTimeoutDescription_fra"); }
        }

        /// <summary>
        /// Spécifie en secondes le délai d'expiration d'émission vers un serveur. 300 secondes (5 minutes) par défaut.
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_fra()
        {
            return GetString("PushCommandTimeoutDescription_fra");
        }

        /// <summary>
        /// Specifica il timeout per il push al server in secondi. Default di 300 secondi (5 minuti).
        /// </summary>
        internal static string PushCommandTimeoutDescription_ita
        {
            get { return GetString("PushCommandTimeoutDescription_ita"); }
        }

        /// <summary>
        /// Specifica il timeout per il push al server in secondi. Default di 300 secondi (5 minuti).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_ita()
        {
            return GetString("PushCommandTimeoutDescription_ita");
        }

        /// <summary>
        /// サーバーにプッシュする場合のタイムアウト (秒) を指定します。既定は 300 秒 (5 分) です。
        /// </summary>
        internal static string PushCommandTimeoutDescription_jpn
        {
            get { return GetString("PushCommandTimeoutDescription_jpn"); }
        }

        /// <summary>
        /// サーバーにプッシュする場合のタイムアウト (秒) を指定します。既定は 300 秒 (5 分) です。
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_jpn()
        {
            return GetString("PushCommandTimeoutDescription_jpn");
        }

        /// <summary>
        /// 서버에 푸시하는 시간 제한(초)을 지정합니다. 300초(5분)로 기본 설정됩니다.
        /// </summary>
        internal static string PushCommandTimeoutDescription_kor
        {
            get { return GetString("PushCommandTimeoutDescription_kor"); }
        }

        /// <summary>
        /// 서버에 푸시하는 시간 제한(초)을 지정합니다. 300초(5분)로 기본 설정됩니다.
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_kor()
        {
            return GetString("PushCommandTimeoutDescription_kor");
        }

        /// <summary>
        /// Określa limit czasu dla wypychania na serwer (w sekundach). Wartość domyślna to 300 sekund (5 minut).
        /// </summary>
        internal static string PushCommandTimeoutDescription_plk
        {
            get { return GetString("PushCommandTimeoutDescription_plk"); }
        }

        /// <summary>
        /// Określa limit czasu dla wypychania na serwer (w sekundach). Wartość domyślna to 300 sekund (5 minut).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_plk()
        {
            return GetString("PushCommandTimeoutDescription_plk");
        }

        /// <summary>
        /// Especifica o tempo limite para enviar para um servidor em segundos. O padrão é 300 segundos (5 minutos).
        /// </summary>
        internal static string PushCommandTimeoutDescription_ptb
        {
            get { return GetString("PushCommandTimeoutDescription_ptb"); }
        }

        /// <summary>
        /// Especifica o tempo limite para enviar para um servidor em segundos. O padrão é 300 segundos (5 minutos).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_ptb()
        {
            return GetString("PushCommandTimeoutDescription_ptb");
        }

        /// <summary>
        /// Задает время ожидания отправки на сервер в секундах. По умолчанию составляет 300 секунд (5 минут).
        /// </summary>
        internal static string PushCommandTimeoutDescription_rus
        {
            get { return GetString("PushCommandTimeoutDescription_rus"); }
        }

        /// <summary>
        /// Задает время ожидания отправки на сервер в секундах. По умолчанию составляет 300 секунд (5 минут).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_rus()
        {
            return GetString("PushCommandTimeoutDescription_rus");
        }

        /// <summary>
        /// Saniye cinsinden sunucuya iletim için zaman aşımını belirtir. Varsayılan değer 300 saniyedir (5 dakika).
        /// </summary>
        internal static string PushCommandTimeoutDescription_trk
        {
            get { return GetString("PushCommandTimeoutDescription_trk"); }
        }

        /// <summary>
        /// Saniye cinsinden sunucuya iletim için zaman aşımını belirtir. Varsayılan değer 300 saniyedir (5 dakika).
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_trk()
        {
            return GetString("PushCommandTimeoutDescription_trk");
        }

        /// <summary>
        /// 指定推送到服务器的超时值(以秒为单位)。默认值为 300 秒(5 分钟)。
        /// </summary>
        internal static string PushCommandTimeoutDescription_chs
        {
            get { return GetString("PushCommandTimeoutDescription_chs"); }
        }

        /// <summary>
        /// 指定推送到服务器的超时值(以秒为单位)。默认值为 300 秒(5 分钟)。
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_chs()
        {
            return GetString("PushCommandTimeoutDescription_chs");
        }

        /// <summary>
        /// 指定推入伺服器的逾時 (以秒為單位)。預設為 300秒 (5 分鐘)。
        /// </summary>
        internal static string PushCommandTimeoutDescription_cht
        {
            get { return GetString("PushCommandTimeoutDescription_cht"); }
        }

        /// <summary>
        /// 指定推入伺服器的逾時 (以秒為單位)。預設為 300秒 (5 分鐘)。
        /// </summary>
        internal static string FormatPushCommandTimeoutDescription_cht()
        {
            return GetString("PushCommandTimeoutDescription_cht");
        }

        /// <summary>
        /// Určuje cestu k balíčku a klíč API pro předání balíčku na server.
        /// </summary>
        internal static string PushCommandUsageDescription_csy
        {
            get { return GetString("PushCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Určuje cestu k balíčku a klíč API pro předání balíčku na server.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_csy()
        {
            return GetString("PushCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie den Pfad zum Paket und Ihren API-Schlüssel an, um das Paket mittels Push an den Server zu senden.
        /// </summary>
        internal static string PushCommandUsageDescription_deu
        {
            get { return GetString("PushCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie den Pfad zum Paket und Ihren API-Schlüssel an, um das Paket mittels Push an den Server zu senden.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_deu()
        {
            return GetString("PushCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar la ruta de acceso al paquete y su clave API para insertar el paquete al servidor.
        /// </summary>
        internal static string PushCommandUsageDescription_esp
        {
            get { return GetString("PushCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar la ruta de acceso al paquete y su clave API para insertar el paquete al servidor.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_esp()
        {
            return GetString("PushCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez le chemin d'accès au package et la clé API pour émettre le package vers le serveur.
        /// </summary>
        internal static string PushCommandUsageDescription_fra
        {
            get { return GetString("PushCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez le chemin d'accès au package et la clé API pour émettre le package vers le serveur.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_fra()
        {
            return GetString("PushCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specifica il percorso al pacchetto e l'API key per eseguire il push del pacchetto al server.
        /// </summary>
        internal static string PushCommandUsageDescription_ita
        {
            get { return GetString("PushCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specifica il percorso al pacchetto e l'API key per eseguire il push del pacchetto al server.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_ita()
        {
            return GetString("PushCommandUsageDescription_ita");
        }

        /// <summary>
        /// パッケージをサーバーにプッシュするパッケージのパスと API キーを指定します。
        /// </summary>
        internal static string PushCommandUsageDescription_jpn
        {
            get { return GetString("PushCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// パッケージをサーバーにプッシュするパッケージのパスと API キーを指定します。
        /// </summary>
        internal static string FormatPushCommandUsageDescription_jpn()
        {
            return GetString("PushCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 서버에 패키지를 푸시할 패키지 및 API 키의 경로를 지정합니다.
        /// </summary>
        internal static string PushCommandUsageDescription_kor
        {
            get { return GetString("PushCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 서버에 패키지를 푸시할 패키지 및 API 키의 경로를 지정합니다.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_kor()
        {
            return GetString("PushCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określ ścieżkę do pakietu i klucz interfejsu API, aby wypchnąć pakiet na serwer.
        /// </summary>
        internal static string PushCommandUsageDescription_plk
        {
            get { return GetString("PushCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określ ścieżkę do pakietu i klucz interfejsu API, aby wypchnąć pakiet na serwer.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_plk()
        {
            return GetString("PushCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especifique o caminho para o pacote e sua chave de API para enviar o pacote para o servidor.
        /// </summary>
        internal static string PushCommandUsageDescription_ptb
        {
            get { return GetString("PushCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especifique o caminho para o pacote e sua chave de API para enviar o pacote para o servidor.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_ptb()
        {
            return GetString("PushCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Настройка пути к пакету и ключа API для отправки пакета на сервер.
        /// </summary>
        internal static string PushCommandUsageDescription_rus
        {
            get { return GetString("PushCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Настройка пути к пакету и ключа API для отправки пакета на сервер.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_rus()
        {
            return GetString("PushCommandUsageDescription_rus");
        }

        /// <summary>
        /// Paketin sunucuya iletilmesi için paket yolunu ve API anahtarınızı belirtin.
        /// </summary>
        internal static string PushCommandUsageDescription_trk
        {
            get { return GetString("PushCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Paketin sunucuya iletilmesi için paket yolunu ve API anahtarınızı belirtin.
        /// </summary>
        internal static string FormatPushCommandUsageDescription_trk()
        {
            return GetString("PushCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定程序包的路径以及用于将程序包推送到服务器的 API 密钥。
        /// </summary>
        internal static string PushCommandUsageDescription_chs
        {
            get { return GetString("PushCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定程序包的路径以及用于将程序包推送到服务器的 API 密钥。
        /// </summary>
        internal static string FormatPushCommandUsageDescription_chs()
        {
            return GetString("PushCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定封裝路徑和 API 索引鍵以將套件推入伺服器。
        /// </summary>
        internal static string PushCommandUsageDescription_cht
        {
            get { return GetString("PushCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定封裝路徑和 API 索引鍵以將套件推入伺服器。
        /// </summary>
        internal static string FormatPushCommandUsageDescription_cht()
        {
            return GetString("PushCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_csy
        {
            get { return GetString("PushCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_csy()
        {
            return GetString("PushCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_deu
        {
            get { return GetString("PushCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_deu()
        {
            return GetString("PushCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_esp
        {
            get { return GetString("PushCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_esp()
        {
            return GetString("PushCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_fra
        {
            get { return GetString("PushCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_fra()
        {
            return GetString("PushCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_ita
        {
            get { return GetString("PushCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_ita()
        {
            return GetString("PushCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_jpn
        {
            get { return GetString("PushCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_jpn()
        {
            return GetString("PushCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_kor
        {
            get { return GetString("PushCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_kor()
        {
            return GetString("PushCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_plk
        {
            get { return GetString("PushCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_plk()
        {
            return GetString("PushCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_ptb
        {
            get { return GetString("PushCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_ptb()
        {
            return GetString("PushCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_rus
        {
            get { return GetString("PushCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_rus()
        {
            return GetString("PushCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_trk
        {
            get { return GetString("PushCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_trk()
        {
            return GetString("PushCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_chs
        {
            get { return GetString("PushCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_chs()
        {
            return GetString("PushCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string PushCommandUsageExamples_cht
        {
            get { return GetString("PushCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        /// 
        /// nuget push foo.nupkg
        /// 
        /// nuget push foo.nupkg.symbols
        /// 
        /// nuget push foo.nupkg -Timeout 360
        /// </summary>
        internal static string FormatPushCommandUsageExamples_cht()
        {
            return GetString("PushCommandUsageExamples_cht");
        }

        /// <summary>
        /// &lt;cesta k balíčku&gt; [klíč API] [možnosti]
        /// </summary>
        internal static string PushCommandUsageSummary_csy
        {
            get { return GetString("PushCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// &lt;cesta k balíčku&gt; [klíč API] [možnosti]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_csy()
        {
            return GetString("PushCommandUsageSummary_csy");
        }

        /// <summary>
        /// &lt;Paketpfad&gt; [API-Schlüssel] [Optionen]
        /// </summary>
        internal static string PushCommandUsageSummary_deu
        {
            get { return GetString("PushCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// &lt;Paketpfad&gt; [API-Schlüssel] [Optionen]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_deu()
        {
            return GetString("PushCommandUsageSummary_deu");
        }

        /// <summary>
        /// &lt;ruta de acceso&gt; [clave API] [opciones]
        /// </summary>
        internal static string PushCommandUsageSummary_esp
        {
            get { return GetString("PushCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// &lt;ruta de acceso&gt; [clave API] [opciones]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_esp()
        {
            return GetString("PushCommandUsageSummary_esp");
        }

        /// <summary>
        /// &lt;package path&gt; [@@@clé API] [@@@options]
        /// </summary>
        internal static string PushCommandUsageSummary_fra
        {
            get { return GetString("PushCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// &lt;package path&gt; [@@@clé API] [@@@options]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_fra()
        {
            return GetString("PushCommandUsageSummary_fra");
        }

        /// <summary>
        /// &lt;percorso pacchetto&gt; [API key] [opzioni]
        /// </summary>
        internal static string PushCommandUsageSummary_ita
        {
            get { return GetString("PushCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// &lt;percorso pacchetto&gt; [API key] [opzioni]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_ita()
        {
            return GetString("PushCommandUsageSummary_ita");
        }

        /// <summary>
        /// &lt;package path&gt; [API key] [options]
        /// </summary>
        internal static string PushCommandUsageSummary_jpn
        {
            get { return GetString("PushCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// &lt;package path&gt; [API key] [options]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_jpn()
        {
            return GetString("PushCommandUsageSummary_jpn");
        }

        /// <summary>
        /// &lt;패키지 경로&gt; [API 키] [옵션]
        /// </summary>
        internal static string PushCommandUsageSummary_kor
        {
            get { return GetString("PushCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// &lt;패키지 경로&gt; [API 키] [옵션]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_kor()
        {
            return GetString("PushCommandUsageSummary_kor");
        }

        /// <summary>
        /// &lt;ścieżka pakietu&gt; [klucz interfejsu API] [opcje]
        /// </summary>
        internal static string PushCommandUsageSummary_plk
        {
            get { return GetString("PushCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// &lt;ścieżka pakietu&gt; [klucz interfejsu API] [opcje]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_plk()
        {
            return GetString("PushCommandUsageSummary_plk");
        }

        /// <summary>
        /// &lt;caminho do pacote&gt; [Chave de API] [opções]
        /// </summary>
        internal static string PushCommandUsageSummary_ptb
        {
            get { return GetString("PushCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// &lt;caminho do pacote&gt; [Chave de API] [opções]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_ptb()
        {
            return GetString("PushCommandUsageSummary_ptb");
        }

        /// <summary>
        /// &lt;путь пакета&gt; [ключ API] [параметры]
        /// </summary>
        internal static string PushCommandUsageSummary_rus
        {
            get { return GetString("PushCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// &lt;путь пакета&gt; [ключ API] [параметры]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_rus()
        {
            return GetString("PushCommandUsageSummary_rus");
        }

        /// <summary>
        /// &lt;paket yolu&gt; [API anahtarı] [seçenekler]
        /// </summary>
        internal static string PushCommandUsageSummary_trk
        {
            get { return GetString("PushCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// &lt;paket yolu&gt; [API anahtarı] [seçenekler]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_trk()
        {
            return GetString("PushCommandUsageSummary_trk");
        }

        /// <summary>
        /// &lt;程序包路径&gt; [API 密钥] [选项]
        /// </summary>
        internal static string PushCommandUsageSummary_chs
        {
            get { return GetString("PushCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// &lt;程序包路径&gt; [API 密钥] [选项]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_chs()
        {
            return GetString("PushCommandUsageSummary_chs");
        }

        /// <summary>
        /// &lt;封裝路徑&gt; [API 索引鍵] [選項]
        /// </summary>
        internal static string PushCommandUsageSummary_cht
        {
            get { return GetString("PushCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// &lt;封裝路徑&gt; [API 索引鍵] [選項]
        /// </summary>
        internal static string FormatPushCommandUsageSummary_cht()
        {
            return GetString("PushCommandUsageSummary_cht");
        }

        /// <summary>
        /// Uloží klíč API pro danou adresu URL serveru. Není-li zadána žádná adresa URL, je uložen klíč API pro galerii NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_csy
        {
            get { return GetString("SetApiKeyCommandDescription_csy"); }
        }

        /// <summary>
        /// Uloží klíč API pro danou adresu URL serveru. Není-li zadána žádná adresa URL, je uložen klíč API pro galerii NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_csy()
        {
            return GetString("SetApiKeyCommandDescription_csy");
        }

        /// <summary>
        /// Speichert einen API-Schlüssel für eine angegebene Server-URL. Wenn keine URL bereitgestellt wird, wird der API-Schlüssel für den NuGet-Katalog gespeichert.
        /// </summary>
        internal static string SetApiKeyCommandDescription_deu
        {
            get { return GetString("SetApiKeyCommandDescription_deu"); }
        }

        /// <summary>
        /// Speichert einen API-Schlüssel für eine angegebene Server-URL. Wenn keine URL bereitgestellt wird, wird der API-Schlüssel für den NuGet-Katalog gespeichert.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_deu()
        {
            return GetString("SetApiKeyCommandDescription_deu");
        }

        /// <summary>
        /// Guarda una clave API para una URL de servidor especificada. Cuando no se proporciona ninguna URL, se guarda la clave API para la galería NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_esp
        {
            get { return GetString("SetApiKeyCommandDescription_esp"); }
        }

        /// <summary>
        /// Guarda una clave API para una URL de servidor especificada. Cuando no se proporciona ninguna URL, se guarda la clave API para la galería NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_esp()
        {
            return GetString("SetApiKeyCommandDescription_esp");
        }

        /// <summary>
        /// Enregistre la clé API d'un serveur URL donné. Lorsqu'aucune URL n'est fournie, la clé API est enregistrée pour la galerie NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_fra
        {
            get { return GetString("SetApiKeyCommandDescription_fra"); }
        }

        /// <summary>
        /// Enregistre la clé API d'un serveur URL donné. Lorsqu'aucune URL n'est fournie, la clé API est enregistrée pour la galerie NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_fra()
        {
            return GetString("SetApiKeyCommandDescription_fra");
        }

        /// <summary>
        /// Salva un API key per un determinato server URL. Quando non si fornisce un URL , API key si salva per la NuGet gallery.
        /// </summary>
        internal static string SetApiKeyCommandDescription_ita
        {
            get { return GetString("SetApiKeyCommandDescription_ita"); }
        }

        /// <summary>
        /// Salva un API key per un determinato server URL. Quando non si fornisce un URL , API key si salva per la NuGet gallery.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_ita()
        {
            return GetString("SetApiKeyCommandDescription_ita");
        }

        /// <summary>
        /// 指定されたサーバーの URL の API キーを保存します。URL が指定されていない場合、NuGet ギャラリーの API キーが保存されます。
        /// </summary>
        internal static string SetApiKeyCommandDescription_jpn
        {
            get { return GetString("SetApiKeyCommandDescription_jpn"); }
        }

        /// <summary>
        /// 指定されたサーバーの URL の API キーを保存します。URL が指定されていない場合、NuGet ギャラリーの API キーが保存されます。
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_jpn()
        {
            return GetString("SetApiKeyCommandDescription_jpn");
        }

        /// <summary>
        /// 지정된 서버 URL에 대한 API 키를 저장합니다. URL이 제공되지 않은 경우 NuGet 갤러리에 대한 API 키가 저장됩니다.
        /// </summary>
        internal static string SetApiKeyCommandDescription_kor
        {
            get { return GetString("SetApiKeyCommandDescription_kor"); }
        }

        /// <summary>
        /// 지정된 서버 URL에 대한 API 키를 저장합니다. URL이 제공되지 않은 경우 NuGet 갤러리에 대한 API 키가 저장됩니다.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_kor()
        {
            return GetString("SetApiKeyCommandDescription_kor");
        }

        /// <summary>
        /// Zapisuje klucz interfejsu API dla danego adresu URL serwera. Jeśli nie podano adresu URL, klucz interfejsu API jest zapisywany dla galerii NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_plk
        {
            get { return GetString("SetApiKeyCommandDescription_plk"); }
        }

        /// <summary>
        /// Zapisuje klucz interfejsu API dla danego adresu URL serwera. Jeśli nie podano adresu URL, klucz interfejsu API jest zapisywany dla galerii NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_plk()
        {
            return GetString("SetApiKeyCommandDescription_plk");
        }

        /// <summary>
        /// Salva uma chave de API para uma determinada URL do servidor. Quando nenhuma URL é fornecida, a chave de API é salva na galeria NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_ptb
        {
            get { return GetString("SetApiKeyCommandDescription_ptb"); }
        }

        /// <summary>
        /// Salva uma chave de API para uma determinada URL do servidor. Quando nenhuma URL é fornecida, a chave de API é salva na galeria NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_ptb()
        {
            return GetString("SetApiKeyCommandDescription_ptb");
        }

        /// <summary>
        /// Сохраняет ключ API для указанного URL-адреса сервера. Если URL-адрес не указан, сохраняется ключ API для коллекции NuGet.
        /// </summary>
        internal static string SetApiKeyCommandDescription_rus
        {
            get { return GetString("SetApiKeyCommandDescription_rus"); }
        }

        /// <summary>
        /// Сохраняет ключ API для указанного URL-адреса сервера. Если URL-адрес не указан, сохраняется ключ API для коллекции NuGet.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_rus()
        {
            return GetString("SetApiKeyCommandDescription_rus");
        }

        /// <summary>
        /// Belirli bir sunucu URL'si içim API anahtarını kaydeder. Hiçbir URL belirtilmemişse, API anahtarı NuGet galerisi için kaydedilir.
        /// </summary>
        internal static string SetApiKeyCommandDescription_trk
        {
            get { return GetString("SetApiKeyCommandDescription_trk"); }
        }

        /// <summary>
        /// Belirli bir sunucu URL'si içim API anahtarını kaydeder. Hiçbir URL belirtilmemişse, API anahtarı NuGet galerisi için kaydedilir.
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_trk()
        {
            return GetString("SetApiKeyCommandDescription_trk");
        }

        /// <summary>
        /// 保存给定服务器 URL 所对应的 API 密钥。如果未提供 URL，则保存 NuGet 库的 API 密钥。
        /// </summary>
        internal static string SetApiKeyCommandDescription_chs
        {
            get { return GetString("SetApiKeyCommandDescription_chs"); }
        }

        /// <summary>
        /// 保存给定服务器 URL 所对应的 API 密钥。如果未提供 URL，则保存 NuGet 库的 API 密钥。
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_chs()
        {
            return GetString("SetApiKeyCommandDescription_chs");
        }

        /// <summary>
        /// 儲存給定伺服器 URL 的 API 索引鍵。若未提供 URL，會為 NuGet 陳列庫儲存 API 索引鍵。
        /// </summary>
        internal static string SetApiKeyCommandDescription_cht
        {
            get { return GetString("SetApiKeyCommandDescription_cht"); }
        }

        /// <summary>
        /// 儲存給定伺服器 URL 的 API 索引鍵。若未提供 URL，會為 NuGet 陳列庫儲存 API 索引鍵。
        /// </summary>
        internal static string FormatSetApiKeyCommandDescription_cht()
        {
            return GetString("SetApiKeyCommandDescription_cht");
        }

        /// <summary>
        /// Adresa URL serveru, pro nějž je platný daný klíč API
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_csy
        {
            get { return GetString("SetApiKeyCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Adresa URL serveru, pro nějž je platný daný klíč API
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_csy()
        {
            return GetString("SetApiKeyCommandSourceDescription_csy");
        }

        /// <summary>
        /// Die Server-URL, für die der API-Schlüssel gültig ist.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_deu
        {
            get { return GetString("SetApiKeyCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Die Server-URL, für die der API-Schlüssel gültig ist.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_deu()
        {
            return GetString("SetApiKeyCommandSourceDescription_deu");
        }

        /// <summary>
        /// La URL de servidor donde la clave API es válida.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_esp
        {
            get { return GetString("SetApiKeyCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// La URL de servidor donde la clave API es válida.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_esp()
        {
            return GetString("SetApiKeyCommandSourceDescription_esp");
        }

        /// <summary>
        /// Serveur URL de la clé API valide.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_fra
        {
            get { return GetString("SetApiKeyCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Serveur URL de la clé API valide.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_fra()
        {
            return GetString("SetApiKeyCommandSourceDescription_fra");
        }

        /// <summary>
        /// Server URL in cui API key è valido.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_ita
        {
            get { return GetString("SetApiKeyCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Server URL in cui API key è valido.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_ita()
        {
            return GetString("SetApiKeyCommandSourceDescription_ita");
        }

        /// <summary>
        /// API キーが有効なサーバーの URL。
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_jpn
        {
            get { return GetString("SetApiKeyCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// API キーが有効なサーバーの URL。
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_jpn()
        {
            return GetString("SetApiKeyCommandSourceDescription_jpn");
        }

        /// <summary>
        /// API 키를 올바른 서버 URL입니다.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_kor
        {
            get { return GetString("SetApiKeyCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// API 키를 올바른 서버 URL입니다.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_kor()
        {
            return GetString("SetApiKeyCommandSourceDescription_kor");
        }

        /// <summary>
        /// Adres URL serwera, gdzie klucz interfejsu API jest ważny.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_plk
        {
            get { return GetString("SetApiKeyCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Adres URL serwera, gdzie klucz interfejsu API jest ważny.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_plk()
        {
            return GetString("SetApiKeyCommandSourceDescription_plk");
        }

        /// <summary>
        /// URL do servidor onde a chave API é válida.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_ptb
        {
            get { return GetString("SetApiKeyCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// URL do servidor onde a chave API é válida.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_ptb()
        {
            return GetString("SetApiKeyCommandSourceDescription_ptb");
        }

        /// <summary>
        /// URL-адрес сервера, для которого действителен ключ API.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_rus
        {
            get { return GetString("SetApiKeyCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// URL-адрес сервера, для которого действителен ключ API.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_rus()
        {
            return GetString("SetApiKeyCommandSourceDescription_rus");
        }

        /// <summary>
        /// API anahtarının geçerli olduğu sunucu URL'si.
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_trk
        {
            get { return GetString("SetApiKeyCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// API anahtarının geçerli olduğu sunucu URL'si.
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_trk()
        {
            return GetString("SetApiKeyCommandSourceDescription_trk");
        }

        /// <summary>
        /// API 密钥有效的服务器 URL。
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_chs
        {
            get { return GetString("SetApiKeyCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// API 密钥有效的服务器 URL。
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_chs()
        {
            return GetString("SetApiKeyCommandSourceDescription_chs");
        }

        /// <summary>
        /// API 索引鍵有效的伺服器 URL。
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription_cht
        {
            get { return GetString("SetApiKeyCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// API 索引鍵有效的伺服器 URL。
        /// </summary>
        internal static string FormatSetApiKeyCommandSourceDescription_cht()
        {
            return GetString("SetApiKeyCommandSourceDescription_cht");
        }

        /// <summary>
        /// Určuje klíč API k uložení a volitelnou adresu URL pro server, který tento klíč API poskytl.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_csy
        {
            get { return GetString("SetApiKeyCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Určuje klíč API k uložení a volitelnou adresu URL pro server, který tento klíč API poskytl.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_csy()
        {
            return GetString("SetApiKeyCommandUsageDescription_csy");
        }

        /// <summary>
        /// Geben Sie den zu speichernden API-Schlüssel und eine optionale URL zum Server an, der den API-Schlüssel bereitgestellt hat.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_deu
        {
            get { return GetString("SetApiKeyCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Geben Sie den zu speichernden API-Schlüssel und eine optionale URL zum Server an, der den API-Schlüssel bereitgestellt hat.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_deu()
        {
            return GetString("SetApiKeyCommandUsageDescription_deu");
        }

        /// <summary>
        /// Especificar la clave API para guardar y una URL opcional al servidor que proporcionó la clave API.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_esp
        {
            get { return GetString("SetApiKeyCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Especificar la clave API para guardar y una URL opcional al servidor que proporcionó la clave API.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_esp()
        {
            return GetString("SetApiKeyCommandUsageDescription_esp");
        }

        /// <summary>
        /// Spécifiez la clé API à enregistrer et, éventuellement, l'URL du serveur l'ayant fournie.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_fra
        {
            get { return GetString("SetApiKeyCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Spécifiez la clé API à enregistrer et, éventuellement, l'URL du serveur l'ayant fournie.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_fra()
        {
            return GetString("SetApiKeyCommandUsageDescription_fra");
        }

        /// <summary>
        /// Specifica l' API key da salvare e un URL opzionale al server che ha fornito la API key.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_ita
        {
            get { return GetString("SetApiKeyCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Specifica l' API key da salvare e un URL opzionale al server che ha fornito la API key.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_ita()
        {
            return GetString("SetApiKeyCommandUsageDescription_ita");
        }

        /// <summary>
        /// 保存する API キーと、API キーを提供したサーバーの URL (省略可能) を指定します。
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_jpn
        {
            get { return GetString("SetApiKeyCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// 保存する API キーと、API キーを提供したサーバーの URL (省略可能) を指定します。
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_jpn()
        {
            return GetString("SetApiKeyCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 저장할 API 키와 API 키를 제공한 서버에 대한 URL(선택적)을 지정합니다.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_kor
        {
            get { return GetString("SetApiKeyCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 저장할 API 키와 API 키를 제공한 서버에 대한 URL(선택적)을 지정합니다.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_kor()
        {
            return GetString("SetApiKeyCommandUsageDescription_kor");
        }

        /// <summary>
        /// Określ klucz interfejsu API do zapisania i opcjonalny adres URL serwera, który dostarcza ten klucz interfejsu API.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_plk
        {
            get { return GetString("SetApiKeyCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Określ klucz interfejsu API do zapisania i opcjonalny adres URL serwera, który dostarcza ten klucz interfejsu API.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_plk()
        {
            return GetString("SetApiKeyCommandUsageDescription_plk");
        }

        /// <summary>
        /// Especifique a chave de API para salvar e uma URL opcional para o servidor que forneceu a chave de API.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_ptb
        {
            get { return GetString("SetApiKeyCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Especifique a chave de API para salvar e uma URL opcional para o servidor que forneceu a chave de API.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_ptb()
        {
            return GetString("SetApiKeyCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Укажите ключ API для сохранения и необязательный URL-адрес сервера, предоставившего ключ API.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_rus
        {
            get { return GetString("SetApiKeyCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Укажите ключ API для сохранения и необязательный URL-адрес сервера, предоставившего ключ API.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_rus()
        {
            return GetString("SetApiKeyCommandUsageDescription_rus");
        }

        /// <summary>
        /// Kaydedilecek API anahtarını ve API anahtarını sağlayan sunucunun isteğe bağlı URL'sini belirtin.
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_trk
        {
            get { return GetString("SetApiKeyCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Kaydedilecek API anahtarını ve API anahtarını sağlayan sunucunun isteğe bağlı URL'sini belirtin.
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_trk()
        {
            return GetString("SetApiKeyCommandUsageDescription_trk");
        }

        /// <summary>
        /// 指定要保存的 API 密钥以及提供该 API 密钥的服务器的可选 URL。
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_chs
        {
            get { return GetString("SetApiKeyCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 指定要保存的 API 密钥以及提供该 API 密钥的服务器的可选 URL。
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_chs()
        {
            return GetString("SetApiKeyCommandUsageDescription_chs");
        }

        /// <summary>
        /// 指定要儲存的 API 索引鍵以及提供 API 索引鍵的伺服器選擇性 URL。
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription_cht
        {
            get { return GetString("SetApiKeyCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 指定要儲存的 API 索引鍵以及提供 API 索引鍵的伺服器選擇性 URL。
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageDescription_cht()
        {
            return GetString("SetApiKeyCommandUsageDescription_cht");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_csy
        {
            get { return GetString("SetApiKeyCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_csy()
        {
            return GetString("SetApiKeyCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_deu
        {
            get { return GetString("SetApiKeyCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_deu()
        {
            return GetString("SetApiKeyCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_esp
        {
            get { return GetString("SetApiKeyCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_esp()
        {
            return GetString("SetApiKeyCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_fra
        {
            get { return GetString("SetApiKeyCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_fra()
        {
            return GetString("SetApiKeyCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_ita
        {
            get { return GetString("SetApiKeyCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_ita()
        {
            return GetString("SetApiKeyCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_jpn
        {
            get { return GetString("SetApiKeyCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_jpn()
        {
            return GetString("SetApiKeyCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_kor
        {
            get { return GetString("SetApiKeyCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_kor()
        {
            return GetString("SetApiKeyCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_plk
        {
            get { return GetString("SetApiKeyCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_plk()
        {
            return GetString("SetApiKeyCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_ptb
        {
            get { return GetString("SetApiKeyCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_ptb()
        {
            return GetString("SetApiKeyCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_rus
        {
            get { return GetString("SetApiKeyCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_rus()
        {
            return GetString("SetApiKeyCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_trk
        {
            get { return GetString("SetApiKeyCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_trk()
        {
            return GetString("SetApiKeyCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_chs
        {
            get { return GetString("SetApiKeyCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_chs()
        {
            return GetString("SetApiKeyCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples_cht
        {
            get { return GetString("SetApiKeyCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        /// 
        /// nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageExamples_cht()
        {
            return GetString("SetApiKeyCommandUsageExamples_cht");
        }

        /// <summary>
        /// &lt;klíč API&gt; [možnosti]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_csy
        {
            get { return GetString("SetApiKeyCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// &lt;klíč API&gt; [možnosti]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_csy()
        {
            return GetString("SetApiKeyCommandUsageSummary_csy");
        }

        /// <summary>
        /// &lt;API-Schlüssel&gt; [Optionen]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_deu
        {
            get { return GetString("SetApiKeyCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// &lt;API-Schlüssel&gt; [Optionen]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_deu()
        {
            return GetString("SetApiKeyCommandUsageSummary_deu");
        }

        /// <summary>
        /// &lt;clave API&gt; [opciones]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_esp
        {
            get { return GetString("SetApiKeyCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// &lt;clave API&gt; [opciones]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_esp()
        {
            return GetString("SetApiKeyCommandUsageSummary_esp");
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_fra
        {
            get { return GetString("SetApiKeyCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_fra()
        {
            return GetString("SetApiKeyCommandUsageSummary_fra");
        }

        /// <summary>
        /// &lt;API key&gt; [opzioni]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_ita
        {
            get { return GetString("SetApiKeyCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// &lt;API key&gt; [opzioni]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_ita()
        {
            return GetString("SetApiKeyCommandUsageSummary_ita");
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_jpn
        {
            get { return GetString("SetApiKeyCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// &lt;API key&gt; [options]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_jpn()
        {
            return GetString("SetApiKeyCommandUsageSummary_jpn");
        }

        /// <summary>
        /// &lt;API 키&gt; [옵션]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_kor
        {
            get { return GetString("SetApiKeyCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// &lt;API 키&gt; [옵션]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_kor()
        {
            return GetString("SetApiKeyCommandUsageSummary_kor");
        }

        /// <summary>
        /// &lt;klucz interfejsu API&gt; [opcje]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_plk
        {
            get { return GetString("SetApiKeyCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// &lt;klucz interfejsu API&gt; [opcje]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_plk()
        {
            return GetString("SetApiKeyCommandUsageSummary_plk");
        }

        /// <summary>
        /// &lt;Chave de API&gt; [opções]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_ptb
        {
            get { return GetString("SetApiKeyCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// &lt;Chave de API&gt; [opções]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_ptb()
        {
            return GetString("SetApiKeyCommandUsageSummary_ptb");
        }

        /// <summary>
        /// &lt;ключ API &gt; [параметры]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_rus
        {
            get { return GetString("SetApiKeyCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// &lt;ключ API &gt; [параметры]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_rus()
        {
            return GetString("SetApiKeyCommandUsageSummary_rus");
        }

        /// <summary>
        /// &lt;API anahtarı&gt; [seçenekler]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_trk
        {
            get { return GetString("SetApiKeyCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// &lt;API anahtarı&gt; [seçenekler]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_trk()
        {
            return GetString("SetApiKeyCommandUsageSummary_trk");
        }

        /// <summary>
        /// &lt;API 密钥&gt; [选项]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_chs
        {
            get { return GetString("SetApiKeyCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// &lt;API 密钥&gt; [选项]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_chs()
        {
            return GetString("SetApiKeyCommandUsageSummary_chs");
        }

        /// <summary>
        /// &lt;API key&gt; [選項]
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary_cht
        {
            get { return GetString("SetApiKeyCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// &lt;API key&gt; [選項]
        /// </summary>
        internal static string FormatSetApiKeyCommandUsageSummary_cht()
        {
            return GetString("SetApiKeyCommandUsageSummary_cht");
        }

        /// <summary>
        /// Poskytuje možnost pro správu seznamu zdrojů umístěných v souboru %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string SourcesCommandDescription_csy
        {
            get { return GetString("SourcesCommandDescription_csy"); }
        }

        /// <summary>
        /// Poskytuje možnost pro správu seznamu zdrojů umístěných v souboru %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string FormatSourcesCommandDescription_csy()
        {
            return GetString("SourcesCommandDescription_csy");
        }

        /// <summary>
        /// Stellt die Möglichkeit zur Verfügung, eine Liste der Quellen zu verwalten, die sich in "%AppData%\NuGet\NuGet.config" befinden.
        /// </summary>
        internal static string SourcesCommandDescription_deu
        {
            get { return GetString("SourcesCommandDescription_deu"); }
        }

        /// <summary>
        /// Stellt die Möglichkeit zur Verfügung, eine Liste der Quellen zu verwalten, die sich in "%AppData%\NuGet\NuGet.config" befinden.
        /// </summary>
        internal static string FormatSourcesCommandDescription_deu()
        {
            return GetString("SourcesCommandDescription_deu");
        }

        /// <summary>
        /// Proporciona la capacidad de gestionar la lista de orígenes ubicada en %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string SourcesCommandDescription_esp
        {
            get { return GetString("SourcesCommandDescription_esp"); }
        }

        /// <summary>
        /// Proporciona la capacidad de gestionar la lista de orígenes ubicada en %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string FormatSourcesCommandDescription_esp()
        {
            return GetString("SourcesCommandDescription_esp");
        }

        /// <summary>
        /// Offre la possibilité de gérer la liste de sources située dans %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string SourcesCommandDescription_fra
        {
            get { return GetString("SourcesCommandDescription_fra"); }
        }

        /// <summary>
        /// Offre la possibilité de gérer la liste de sources située dans %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string FormatSourcesCommandDescription_fra()
        {
            return GetString("SourcesCommandDescription_fra");
        }

        /// <summary>
        /// Permette la gestione di un elenco di fonti localizzato in %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string SourcesCommandDescription_ita
        {
            get { return GetString("SourcesCommandDescription_ita"); }
        }

        /// <summary>
        /// Permette la gestione di un elenco di fonti localizzato in %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string FormatSourcesCommandDescription_ita()
        {
            return GetString("SourcesCommandDescription_ita");
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config に指定されたソースの一覧を管理できます
        /// </summary>
        internal static string SourcesCommandDescription_jpn
        {
            get { return GetString("SourcesCommandDescription_jpn"); }
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config に指定されたソースの一覧を管理できます
        /// </summary>
        internal static string FormatSourcesCommandDescription_jpn()
        {
            return GetString("SourcesCommandDescription_jpn");
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config에 있는 소스 목록을 관리할 수 있는 기능을 제공합니다.
        /// </summary>
        internal static string SourcesCommandDescription_kor
        {
            get { return GetString("SourcesCommandDescription_kor"); }
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config에 있는 소스 목록을 관리할 수 있는 기능을 제공합니다.
        /// </summary>
        internal static string FormatSourcesCommandDescription_kor()
        {
            return GetString("SourcesCommandDescription_kor");
        }

        /// <summary>
        /// Zapewnia możliwość zarządzania listą źródeł znajdującą się w pliku %AppData%\NuGet\NuGet .config
        /// </summary>
        internal static string SourcesCommandDescription_plk
        {
            get { return GetString("SourcesCommandDescription_plk"); }
        }

        /// <summary>
        /// Zapewnia możliwość zarządzania listą źródeł znajdującą się w pliku %AppData%\NuGet\NuGet .config
        /// </summary>
        internal static string FormatSourcesCommandDescription_plk()
        {
            return GetString("SourcesCommandDescription_plk");
        }

        /// <summary>
        /// Fornece a capacidade de gerenciar a lista de origens localizadas em %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string SourcesCommandDescription_ptb
        {
            get { return GetString("SourcesCommandDescription_ptb"); }
        }

        /// <summary>
        /// Fornece a capacidade de gerenciar a lista de origens localizadas em %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string FormatSourcesCommandDescription_ptb()
        {
            return GetString("SourcesCommandDescription_ptb");
        }

        /// <summary>
        /// Дает возможность управлять списком источников, расположенным в %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string SourcesCommandDescription_rus
        {
            get { return GetString("SourcesCommandDescription_rus"); }
        }

        /// <summary>
        /// Дает возможность управлять списком источников, расположенным в %AppData%\NuGet\NuGet.config
        /// </summary>
        internal static string FormatSourcesCommandDescription_rus()
        {
            return GetString("SourcesCommandDescription_rus");
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config içinde yer alan kaynakların listesinin yönetilebilmesini mümkün kılar.
        /// </summary>
        internal static string SourcesCommandDescription_trk
        {
            get { return GetString("SourcesCommandDescription_trk"); }
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config içinde yer alan kaynakların listesinin yönetilebilmesini mümkün kılar.
        /// </summary>
        internal static string FormatSourcesCommandDescription_trk()
        {
            return GetString("SourcesCommandDescription_trk");
        }

        /// <summary>
        /// 可以管理位于 %AppData%\NuGet\NuGet.config 的源列表
        /// </summary>
        internal static string SourcesCommandDescription_chs
        {
            get { return GetString("SourcesCommandDescription_chs"); }
        }

        /// <summary>
        /// 可以管理位于 %AppData%\NuGet\NuGet.config 的源列表
        /// </summary>
        internal static string FormatSourcesCommandDescription_chs()
        {
            return GetString("SourcesCommandDescription_chs");
        }

        /// <summary>
        /// 提供管理位於 %AppData%\NuGet\NuGet.config 的來源清單的功能。
        /// </summary>
        internal static string SourcesCommandDescription_cht
        {
            get { return GetString("SourcesCommandDescription_cht"); }
        }

        /// <summary>
        /// 提供管理位於 %AppData%\NuGet\NuGet.config 的來源清單的功能。
        /// </summary>
        internal static string FormatSourcesCommandDescription_cht()
        {
            return GetString("SourcesCommandDescription_cht");
        }

        /// <summary>
        /// Název zdroje
        /// </summary>
        internal static string SourcesCommandNameDescription_csy
        {
            get { return GetString("SourcesCommandNameDescription_csy"); }
        }

        /// <summary>
        /// Název zdroje
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_csy()
        {
            return GetString("SourcesCommandNameDescription_csy");
        }

        /// <summary>
        /// Der Name der Quelle.
        /// </summary>
        internal static string SourcesCommandNameDescription_deu
        {
            get { return GetString("SourcesCommandNameDescription_deu"); }
        }

        /// <summary>
        /// Der Name der Quelle.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_deu()
        {
            return GetString("SourcesCommandNameDescription_deu");
        }

        /// <summary>
        /// Nombre del origen.
        /// </summary>
        internal static string SourcesCommandNameDescription_esp
        {
            get { return GetString("SourcesCommandNameDescription_esp"); }
        }

        /// <summary>
        /// Nombre del origen.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_esp()
        {
            return GetString("SourcesCommandNameDescription_esp");
        }

        /// <summary>
        /// Nom de la source.
        /// </summary>
        internal static string SourcesCommandNameDescription_fra
        {
            get { return GetString("SourcesCommandNameDescription_fra"); }
        }

        /// <summary>
        /// Nom de la source.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_fra()
        {
            return GetString("SourcesCommandNameDescription_fra");
        }

        /// <summary>
        /// Nome della fonte.
        /// </summary>
        internal static string SourcesCommandNameDescription_ita
        {
            get { return GetString("SourcesCommandNameDescription_ita"); }
        }

        /// <summary>
        /// Nome della fonte.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_ita()
        {
            return GetString("SourcesCommandNameDescription_ita");
        }

        /// <summary>
        /// ソースの名前。
        /// </summary>
        internal static string SourcesCommandNameDescription_jpn
        {
            get { return GetString("SourcesCommandNameDescription_jpn"); }
        }

        /// <summary>
        /// ソースの名前。
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_jpn()
        {
            return GetString("SourcesCommandNameDescription_jpn");
        }

        /// <summary>
        /// 소스 이름입니다.
        /// </summary>
        internal static string SourcesCommandNameDescription_kor
        {
            get { return GetString("SourcesCommandNameDescription_kor"); }
        }

        /// <summary>
        /// 소스 이름입니다.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_kor()
        {
            return GetString("SourcesCommandNameDescription_kor");
        }

        /// <summary>
        /// Nazwa źródła.
        /// </summary>
        internal static string SourcesCommandNameDescription_plk
        {
            get { return GetString("SourcesCommandNameDescription_plk"); }
        }

        /// <summary>
        /// Nazwa źródła.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_plk()
        {
            return GetString("SourcesCommandNameDescription_plk");
        }

        /// <summary>
        /// Nome da origem.
        /// </summary>
        internal static string SourcesCommandNameDescription_ptb
        {
            get { return GetString("SourcesCommandNameDescription_ptb"); }
        }

        /// <summary>
        /// Nome da origem.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_ptb()
        {
            return GetString("SourcesCommandNameDescription_ptb");
        }

        /// <summary>
        /// Имя источника.
        /// </summary>
        internal static string SourcesCommandNameDescription_rus
        {
            get { return GetString("SourcesCommandNameDescription_rus"); }
        }

        /// <summary>
        /// Имя источника.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_rus()
        {
            return GetString("SourcesCommandNameDescription_rus");
        }

        /// <summary>
        /// Kaynağın adı.
        /// </summary>
        internal static string SourcesCommandNameDescription_trk
        {
            get { return GetString("SourcesCommandNameDescription_trk"); }
        }

        /// <summary>
        /// Kaynağın adı.
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_trk()
        {
            return GetString("SourcesCommandNameDescription_trk");
        }

        /// <summary>
        /// 源的名称。
        /// </summary>
        internal static string SourcesCommandNameDescription_chs
        {
            get { return GetString("SourcesCommandNameDescription_chs"); }
        }

        /// <summary>
        /// 源的名称。
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_chs()
        {
            return GetString("SourcesCommandNameDescription_chs");
        }

        /// <summary>
        /// 來源名稱。
        /// </summary>
        internal static string SourcesCommandNameDescription_cht
        {
            get { return GetString("SourcesCommandNameDescription_cht"); }
        }

        /// <summary>
        /// 來源名稱。
        /// </summary>
        internal static string FormatSourcesCommandNameDescription_cht()
        {
            return GetString("SourcesCommandNameDescription_cht");
        }

        /// <summary>
        /// Heslo, které má být použito při připojení k ověřenému zdroji
        /// </summary>
        internal static string SourcesCommandPasswordDescription_csy
        {
            get { return GetString("SourcesCommandPasswordDescription_csy"); }
        }

        /// <summary>
        /// Heslo, které má být použito při připojení k ověřenému zdroji
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_csy()
        {
            return GetString("SourcesCommandPasswordDescription_csy");
        }

        /// <summary>
        /// Das Kennwort, das beim Herstellen einer Verbindung mit einer authentifizierten Quelle verwendet werden soll.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_deu
        {
            get { return GetString("SourcesCommandPasswordDescription_deu"); }
        }

        /// <summary>
        /// Das Kennwort, das beim Herstellen einer Verbindung mit einer authentifizierten Quelle verwendet werden soll.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_deu()
        {
            return GetString("SourcesCommandPasswordDescription_deu");
        }

        /// <summary>
        /// Contraseña que se va a usar al conectar al origen autenticado.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_esp
        {
            get { return GetString("SourcesCommandPasswordDescription_esp"); }
        }

        /// <summary>
        /// Contraseña que se va a usar al conectar al origen autenticado.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_esp()
        {
            return GetString("SourcesCommandPasswordDescription_esp");
        }

        /// <summary>
        /// Utilisez le mot de passe pour vous connecter à une source authentifiée.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_fra
        {
            get { return GetString("SourcesCommandPasswordDescription_fra"); }
        }

        /// <summary>
        /// Utilisez le mot de passe pour vous connecter à une source authentifiée.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_fra()
        {
            return GetString("SourcesCommandPasswordDescription_fra");
        }

        /// <summary>
        /// Password da usare quando ci si collega a una fonte autenticata.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_ita
        {
            get { return GetString("SourcesCommandPasswordDescription_ita"); }
        }

        /// <summary>
        /// Password da usare quando ci si collega a una fonte autenticata.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_ita()
        {
            return GetString("SourcesCommandPasswordDescription_ita");
        }

        /// <summary>
        /// 認証済みソースに接続するときに使用されるパスワード。
        /// </summary>
        internal static string SourcesCommandPasswordDescription_jpn
        {
            get { return GetString("SourcesCommandPasswordDescription_jpn"); }
        }

        /// <summary>
        /// 認証済みソースに接続するときに使用されるパスワード。
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_jpn()
        {
            return GetString("SourcesCommandPasswordDescription_jpn");
        }

        /// <summary>
        /// 인증된 소스에 연결할 때 사용되는 암호입니다.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_kor
        {
            get { return GetString("SourcesCommandPasswordDescription_kor"); }
        }

        /// <summary>
        /// 인증된 소스에 연결할 때 사용되는 암호입니다.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_kor()
        {
            return GetString("SourcesCommandPasswordDescription_kor");
        }

        /// <summary>
        /// Hasło, którego należy używać podczas łączenia się z uwierzytelnionym źródłem.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_plk
        {
            get { return GetString("SourcesCommandPasswordDescription_plk"); }
        }

        /// <summary>
        /// Hasło, którego należy używać podczas łączenia się z uwierzytelnionym źródłem.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_plk()
        {
            return GetString("SourcesCommandPasswordDescription_plk");
        }

        /// <summary>
        /// Senha a ser usada ao conectar-se a uma origem autenticada.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_ptb
        {
            get { return GetString("SourcesCommandPasswordDescription_ptb"); }
        }

        /// <summary>
        /// Senha a ser usada ao conectar-se a uma origem autenticada.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_ptb()
        {
            return GetString("SourcesCommandPasswordDescription_ptb");
        }

        /// <summary>
        /// Пароль, используемый при подключении к проверенному источнику.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_rus
        {
            get { return GetString("SourcesCommandPasswordDescription_rus"); }
        }

        /// <summary>
        /// Пароль, используемый при подключении к проверенному источнику.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_rus()
        {
            return GetString("SourcesCommandPasswordDescription_rus");
        }

        /// <summary>
        /// Kimliği doğrulanmış bir kaynağa bağlanırken kullanılacak parola.
        /// </summary>
        internal static string SourcesCommandPasswordDescription_trk
        {
            get { return GetString("SourcesCommandPasswordDescription_trk"); }
        }

        /// <summary>
        /// Kimliği doğrulanmış bir kaynağa bağlanırken kullanılacak parola.
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_trk()
        {
            return GetString("SourcesCommandPasswordDescription_trk");
        }

        /// <summary>
        /// 连接到已通过身份验证的源时要使用的密码。
        /// </summary>
        internal static string SourcesCommandPasswordDescription_chs
        {
            get { return GetString("SourcesCommandPasswordDescription_chs"); }
        }

        /// <summary>
        /// 连接到已通过身份验证的源时要使用的密码。
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_chs()
        {
            return GetString("SourcesCommandPasswordDescription_chs");
        }

        /// <summary>
        /// 連線至已驗證來源時使用的密碼。
        /// </summary>
        internal static string SourcesCommandPasswordDescription_cht
        {
            get { return GetString("SourcesCommandPasswordDescription_cht"); }
        }

        /// <summary>
        /// 連線至已驗證來源時使用的密碼。
        /// </summary>
        internal static string FormatSourcesCommandPasswordDescription_cht()
        {
            return GetString("SourcesCommandPasswordDescription_cht");
        }

        /// <summary>
        /// Cesta ke zdroji balíčků
        /// </summary>
        internal static string SourcesCommandSourceDescription_csy
        {
            get { return GetString("SourcesCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Cesta ke zdroji balíčků
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_csy()
        {
            return GetString("SourcesCommandSourceDescription_csy");
        }

        /// <summary>
        /// Der Pfad zu der Paketquelle.
        /// </summary>
        internal static string SourcesCommandSourceDescription_deu
        {
            get { return GetString("SourcesCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Der Pfad zu der Paketquelle.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_deu()
        {
            return GetString("SourcesCommandSourceDescription_deu");
        }

        /// <summary>
        /// Ruta de acceso al origen de los paquetes.
        /// </summary>
        internal static string SourcesCommandSourceDescription_esp
        {
            get { return GetString("SourcesCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Ruta de acceso al origen de los paquetes.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_esp()
        {
            return GetString("SourcesCommandSourceDescription_esp");
        }

        /// <summary>
        /// Chemin d'accès à la source de packages.
        /// </summary>
        internal static string SourcesCommandSourceDescription_fra
        {
            get { return GetString("SourcesCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Chemin d'accès à la source de packages.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_fra()
        {
            return GetString("SourcesCommandSourceDescription_fra");
        }

        /// <summary>
        /// Percorso alle fonti pacchetto.
        /// </summary>
        internal static string SourcesCommandSourceDescription_ita
        {
            get { return GetString("SourcesCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Percorso alle fonti pacchetto.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_ita()
        {
            return GetString("SourcesCommandSourceDescription_ita");
        }

        /// <summary>
        /// パッケージ ソースのパス。
        /// </summary>
        internal static string SourcesCommandSourceDescription_jpn
        {
            get { return GetString("SourcesCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// パッケージ ソースのパス。
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_jpn()
        {
            return GetString("SourcesCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 패키지 소스의 경로입니다.
        /// </summary>
        internal static string SourcesCommandSourceDescription_kor
        {
            get { return GetString("SourcesCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 패키지 소스의 경로입니다.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_kor()
        {
            return GetString("SourcesCommandSourceDescription_kor");
        }

        /// <summary>
        /// Ścieżka do źródła pakietów.
        /// </summary>
        internal static string SourcesCommandSourceDescription_plk
        {
            get { return GetString("SourcesCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Ścieżka do źródła pakietów.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_plk()
        {
            return GetString("SourcesCommandSourceDescription_plk");
        }

        /// <summary>
        /// Caminho para as origens do pacote.
        /// </summary>
        internal static string SourcesCommandSourceDescription_ptb
        {
            get { return GetString("SourcesCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Caminho para as origens do pacote.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_ptb()
        {
            return GetString("SourcesCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Путь к источнику пакетов.
        /// </summary>
        internal static string SourcesCommandSourceDescription_rus
        {
            get { return GetString("SourcesCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Путь к источнику пакетов.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_rus()
        {
            return GetString("SourcesCommandSourceDescription_rus");
        }

        /// <summary>
        /// Paket kaynağına giden yol.
        /// </summary>
        internal static string SourcesCommandSourceDescription_trk
        {
            get { return GetString("SourcesCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Paket kaynağına giden yol.
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_trk()
        {
            return GetString("SourcesCommandSourceDescription_trk");
        }

        /// <summary>
        /// 程序包源的路径。
        /// </summary>
        internal static string SourcesCommandSourceDescription_chs
        {
            get { return GetString("SourcesCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 程序包源的路径。
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_chs()
        {
            return GetString("SourcesCommandSourceDescription_chs");
        }

        /// <summary>
        /// 封裝來源的路徑。
        /// </summary>
        internal static string SourcesCommandSourceDescription_cht
        {
            get { return GetString("SourcesCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 封裝來源的路徑。
        /// </summary>
        internal static string FormatSourcesCommandSourceDescription_cht()
        {
            return GetString("SourcesCommandSourceDescription_cht");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [název] -Source [zdroj]
        /// </summary>
        internal static string SourcesCommandUsageSummary_csy
        {
            get { return GetString("SourcesCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [název] -Source [zdroj]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_csy()
        {
            return GetString("SourcesCommandUsageSummary_csy");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [Name] -Source [Quelle]
        /// </summary>
        internal static string SourcesCommandUsageSummary_deu
        {
            get { return GetString("SourcesCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [Name] -Source [Quelle]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_deu()
        {
            return GetString("SourcesCommandUsageSummary_deu");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nombre] -Source [origen]
        /// </summary>
        internal static string SourcesCommandUsageSummary_esp
        {
            get { return GetString("SourcesCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nombre] -Source [origen]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_esp()
        {
            return GetString("SourcesCommandUsageSummary_esp");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nom] -Source [source]
        /// </summary>
        internal static string SourcesCommandUsageSummary_fra
        {
            get { return GetString("SourcesCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nom] -Source [source]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_fra()
        {
            return GetString("SourcesCommandUsageSummary_fra");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nome] -Source [fonte]
        /// </summary>
        internal static string SourcesCommandUsageSummary_ita
        {
            get { return GetString("SourcesCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nome] -Source [fonte]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_ita()
        {
            return GetString("SourcesCommandUsageSummary_ita");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Source [source]
        /// </summary>
        internal static string SourcesCommandUsageSummary_jpn
        {
            get { return GetString("SourcesCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [name] -Source [source]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_jpn()
        {
            return GetString("SourcesCommandUsageSummary_jpn");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [이름] -Source [소스]
        /// </summary>
        internal static string SourcesCommandUsageSummary_kor
        {
            get { return GetString("SourcesCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [이름] -Source [소스]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_kor()
        {
            return GetString("SourcesCommandUsageSummary_kor");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nazwa] -Source [źródło]
        /// </summary>
        internal static string SourcesCommandUsageSummary_plk
        {
            get { return GetString("SourcesCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nazwa] -Source [źródło]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_plk()
        {
            return GetString("SourcesCommandUsageSummary_plk");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nome] -Source [origem]
        /// </summary>
        internal static string SourcesCommandUsageSummary_ptb
        {
            get { return GetString("SourcesCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [nome] -Source [origem]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_ptb()
        {
            return GetString("SourcesCommandUsageSummary_ptb");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [имя] -Source [источник]
        /// </summary>
        internal static string SourcesCommandUsageSummary_rus
        {
            get { return GetString("SourcesCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [имя] -Source [источник]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_rus()
        {
            return GetString("SourcesCommandUsageSummary_rus");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [ad] -Source [kaynak]
        /// </summary>
        internal static string SourcesCommandUsageSummary_trk
        {
            get { return GetString("SourcesCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [ad] -Source [kaynak]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_trk()
        {
            return GetString("SourcesCommandUsageSummary_trk");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [名称] -Source [源]
        /// </summary>
        internal static string SourcesCommandUsageSummary_chs
        {
            get { return GetString("SourcesCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [名称] -Source [源]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_chs()
        {
            return GetString("SourcesCommandUsageSummary_chs");
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [名稱] -Source [來源]
        /// </summary>
        internal static string SourcesCommandUsageSummary_cht
        {
            get { return GetString("SourcesCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// &lt;List|Add|Remove|Enable|Disable|Update&gt; -Name [名稱] -Source [來源]
        /// </summary>
        internal static string FormatSourcesCommandUsageSummary_cht()
        {
            return GetString("SourcesCommandUsageSummary_cht");
        }

        /// <summary>
        /// Uživatelské jméno, které má být použito při připojení k ověřenému zdroji
        /// </summary>
        internal static string SourcesCommandUserNameDescription_csy
        {
            get { return GetString("SourcesCommandUserNameDescription_csy"); }
        }

        /// <summary>
        /// Uživatelské jméno, které má být použito při připojení k ověřenému zdroji
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_csy()
        {
            return GetString("SourcesCommandUserNameDescription_csy");
        }

        /// <summary>
        /// Der "UserName", der beim Herstellen einer Verbindung mit einer authentifizierten Quelle verwendet werden soll.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_deu
        {
            get { return GetString("SourcesCommandUserNameDescription_deu"); }
        }

        /// <summary>
        /// Der "UserName", der beim Herstellen einer Verbindung mit einer authentifizierten Quelle verwendet werden soll.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_deu()
        {
            return GetString("SourcesCommandUserNameDescription_deu");
        }

        /// <summary>
        /// Nombre de usuario que se va a usar cuando se conecte a un origen autenticado.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_esp
        {
            get { return GetString("SourcesCommandUserNameDescription_esp"); }
        }

        /// <summary>
        /// Nombre de usuario que se va a usar cuando se conecte a un origen autenticado.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_esp()
        {
            return GetString("SourcesCommandUserNameDescription_esp");
        }

        /// <summary>
        /// Utilisez le @@@nom d'utilisateur pour vous connecter à une source authentifiée.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_fra
        {
            get { return GetString("SourcesCommandUserNameDescription_fra"); }
        }

        /// <summary>
        /// Utilisez le @@@nom d'utilisateur pour vous connecter à une source authentifiée.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_fra()
        {
            return GetString("SourcesCommandUserNameDescription_fra");
        }

        /// <summary>
        /// Nomeutente da usare quando ci si collega a una fonte autenticata.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_ita
        {
            get { return GetString("SourcesCommandUserNameDescription_ita"); }
        }

        /// <summary>
        /// Nomeutente da usare quando ci si collega a una fonte autenticata.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_ita()
        {
            return GetString("SourcesCommandUserNameDescription_ita");
        }

        /// <summary>
        /// 認証済みソースに接続するときに使用されるユーザー名。
        /// </summary>
        internal static string SourcesCommandUserNameDescription_jpn
        {
            get { return GetString("SourcesCommandUserNameDescription_jpn"); }
        }

        /// <summary>
        /// 認証済みソースに接続するときに使用されるユーザー名。
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_jpn()
        {
            return GetString("SourcesCommandUserNameDescription_jpn");
        }

        /// <summary>
        /// 인증된 소스에 연결할 때 사용되는 사용자 이름입니다.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_kor
        {
            get { return GetString("SourcesCommandUserNameDescription_kor"); }
        }

        /// <summary>
        /// 인증된 소스에 연결할 때 사용되는 사용자 이름입니다.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_kor()
        {
            return GetString("SourcesCommandUserNameDescription_kor");
        }

        /// <summary>
        /// Nazwa użytkownika, którą należy stosować podczas łączenia się z uwierzytelnionym źródłem.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_plk
        {
            get { return GetString("SourcesCommandUserNameDescription_plk"); }
        }

        /// <summary>
        /// Nazwa użytkownika, którą należy stosować podczas łączenia się z uwierzytelnionym źródłem.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_plk()
        {
            return GetString("SourcesCommandUserNameDescription_plk");
        }

        /// <summary>
        /// Nome de usuário a ser usado na conexão com uma origem autenticada.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_ptb
        {
            get { return GetString("SourcesCommandUserNameDescription_ptb"); }
        }

        /// <summary>
        /// Nome de usuário a ser usado na conexão com uma origem autenticada.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_ptb()
        {
            return GetString("SourcesCommandUserNameDescription_ptb");
        }

        /// <summary>
        /// Имя пользователя, используемое при подключении к проверенному источнику.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_rus
        {
            get { return GetString("SourcesCommandUserNameDescription_rus"); }
        }

        /// <summary>
        /// Имя пользователя, используемое при подключении к проверенному источнику.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_rus()
        {
            return GetString("SourcesCommandUserNameDescription_rus");
        }

        /// <summary>
        /// Kimliği doğrulanmış bir kaynağa bağlanırken kullanılacak KullanıcıAdı.
        /// </summary>
        internal static string SourcesCommandUserNameDescription_trk
        {
            get { return GetString("SourcesCommandUserNameDescription_trk"); }
        }

        /// <summary>
        /// Kimliği doğrulanmış bir kaynağa bağlanırken kullanılacak KullanıcıAdı.
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_trk()
        {
            return GetString("SourcesCommandUserNameDescription_trk");
        }

        /// <summary>
        /// 连接到已通过身份验证的源时要使用的用户名。
        /// </summary>
        internal static string SourcesCommandUserNameDescription_chs
        {
            get { return GetString("SourcesCommandUserNameDescription_chs"); }
        }

        /// <summary>
        /// 连接到已通过身份验证的源时要使用的用户名。
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_chs()
        {
            return GetString("SourcesCommandUserNameDescription_chs");
        }

        /// <summary>
        /// 連線至已驗證來源時要使用的使用者名稱。
        /// </summary>
        internal static string SourcesCommandUserNameDescription_cht
        {
            get { return GetString("SourcesCommandUserNameDescription_cht"); }
        }

        /// <summary>
        /// 連線至已驗證來源時要使用的使用者名稱。
        /// </summary>
        internal static string FormatSourcesCommandUserNameDescription_cht()
        {
            return GetString("SourcesCommandUserNameDescription_cht");
        }

        /// <summary>
        /// Sestavení, které má být použito pro metadata
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_csy
        {
            get { return GetString("SpecCommandAssemblyPathDescription_csy"); }
        }

        /// <summary>
        /// Sestavení, které má být použito pro metadata
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_csy()
        {
            return GetString("SpecCommandAssemblyPathDescription_csy");
        }

        /// <summary>
        /// Die für Metadaten zu verwendende Assembly.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_deu
        {
            get { return GetString("SpecCommandAssemblyPathDescription_deu"); }
        }

        /// <summary>
        /// Die für Metadaten zu verwendende Assembly.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_deu()
        {
            return GetString("SpecCommandAssemblyPathDescription_deu");
        }

        /// <summary>
        /// Ensamblado que se va a usar para los metadatos.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_esp
        {
            get { return GetString("SpecCommandAssemblyPathDescription_esp"); }
        }

        /// <summary>
        /// Ensamblado que se va a usar para los metadatos.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_esp()
        {
            return GetString("SpecCommandAssemblyPathDescription_esp");
        }

        /// <summary>
        /// Assembly à utiliser pour les métadonnées.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_fra
        {
            get { return GetString("SpecCommandAssemblyPathDescription_fra"); }
        }

        /// <summary>
        /// Assembly à utiliser pour les métadonnées.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_fra()
        {
            return GetString("SpecCommandAssemblyPathDescription_fra");
        }

        /// <summary>
        /// Assembly da usare come metadata.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_ita
        {
            get { return GetString("SpecCommandAssemblyPathDescription_ita"); }
        }

        /// <summary>
        /// Assembly da usare come metadata.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_ita()
        {
            return GetString("SpecCommandAssemblyPathDescription_ita");
        }

        /// <summary>
        /// メタデータに使用するアセンブリ。
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_jpn
        {
            get { return GetString("SpecCommandAssemblyPathDescription_jpn"); }
        }

        /// <summary>
        /// メタデータに使用するアセンブリ。
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_jpn()
        {
            return GetString("SpecCommandAssemblyPathDescription_jpn");
        }

        /// <summary>
        /// 메타데이터에 사용할 어셈블리입니다.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_kor
        {
            get { return GetString("SpecCommandAssemblyPathDescription_kor"); }
        }

        /// <summary>
        /// 메타데이터에 사용할 어셈블리입니다.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_kor()
        {
            return GetString("SpecCommandAssemblyPathDescription_kor");
        }

        /// <summary>
        /// Zestaw do użycia na potrzeby metadanych.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_plk
        {
            get { return GetString("SpecCommandAssemblyPathDescription_plk"); }
        }

        /// <summary>
        /// Zestaw do użycia na potrzeby metadanych.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_plk()
        {
            return GetString("SpecCommandAssemblyPathDescription_plk");
        }

        /// <summary>
        /// Assembly a ser usado para metadados.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_ptb
        {
            get { return GetString("SpecCommandAssemblyPathDescription_ptb"); }
        }

        /// <summary>
        /// Assembly a ser usado para metadados.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_ptb()
        {
            return GetString("SpecCommandAssemblyPathDescription_ptb");
        }

        /// <summary>
        /// Сборка, используемая для метаданных.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_rus
        {
            get { return GetString("SpecCommandAssemblyPathDescription_rus"); }
        }

        /// <summary>
        /// Сборка, используемая для метаданных.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_rus()
        {
            return GetString("SpecCommandAssemblyPathDescription_rus");
        }

        /// <summary>
        /// Meta veriler için kullanılacak derleme.
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_trk
        {
            get { return GetString("SpecCommandAssemblyPathDescription_trk"); }
        }

        /// <summary>
        /// Meta veriler için kullanılacak derleme.
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_trk()
        {
            return GetString("SpecCommandAssemblyPathDescription_trk");
        }

        /// <summary>
        /// 要用于元数据的程序集。
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_chs
        {
            get { return GetString("SpecCommandAssemblyPathDescription_chs"); }
        }

        /// <summary>
        /// 要用于元数据的程序集。
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_chs()
        {
            return GetString("SpecCommandAssemblyPathDescription_chs");
        }

        /// <summary>
        /// 中繼資料要使用的組件。
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription_cht
        {
            get { return GetString("SpecCommandAssemblyPathDescription_cht"); }
        }

        /// <summary>
        /// 中繼資料要使用的組件。
        /// </summary>
        internal static string FormatSpecCommandAssemblyPathDescription_cht()
        {
            return GetString("SpecCommandAssemblyPathDescription_cht");
        }

        /// <summary>
        /// Vytvoří soubor nuspec pro nový balíček. Je-li tento příkaz spuštěn ve stejné složce jako soubor projektu (.csproj, .vbproj, .fsproj), vytvoří tokenizovaný soubor nuspec.
        /// </summary>
        internal static string SpecCommandDescription_csy
        {
            get { return GetString("SpecCommandDescription_csy"); }
        }

        /// <summary>
        /// Vytvoří soubor nuspec pro nový balíček. Je-li tento příkaz spuštěn ve stejné složce jako soubor projektu (.csproj, .vbproj, .fsproj), vytvoří tokenizovaný soubor nuspec.
        /// </summary>
        internal static string FormatSpecCommandDescription_csy()
        {
            return GetString("SpecCommandDescription_csy");
        }

        /// <summary>
        /// Generiert eine nuspec-Datei für ein neues Paket. Wenn dieser Befehl im gleichen Ordner wie eine Projektdatei (CSPROJ, VBPROJ, FSPROJ) ausgeführt wird, wird eine nuspec-Datei mit einem Token erstellt.
        /// </summary>
        internal static string SpecCommandDescription_deu
        {
            get { return GetString("SpecCommandDescription_deu"); }
        }

        /// <summary>
        /// Generiert eine nuspec-Datei für ein neues Paket. Wenn dieser Befehl im gleichen Ordner wie eine Projektdatei (CSPROJ, VBPROJ, FSPROJ) ausgeführt wird, wird eine nuspec-Datei mit einem Token erstellt.
        /// </summary>
        internal static string FormatSpecCommandDescription_deu()
        {
            return GetString("SpecCommandDescription_deu");
        }

        /// <summary>
        /// Genera un archivo nuspec para un nuevo paquete. Si este comando se ejecuta en la misma carpeta como archivo de proyecto (.csproj, .vbproj, .fsproj), creará un archivo nuspec acortado. 
        /// </summary>
        internal static string SpecCommandDescription_esp
        {
            get { return GetString("SpecCommandDescription_esp"); }
        }

        /// <summary>
        /// Genera un archivo nuspec para un nuevo paquete. Si este comando se ejecuta en la misma carpeta como archivo de proyecto (.csproj, .vbproj, .fsproj), creará un archivo nuspec acortado. 
        /// </summary>
        internal static string FormatSpecCommandDescription_esp()
        {
            return GetString("SpecCommandDescription_esp");
        }

        /// <summary>
        /// Génère un nuspec pour un nouveau package. Si cette commande s'exécute dans le même dossier que le fichier projet (.csproj, .vbproj, .fsproj), un fichier .nuspec tokenisé sera créé.
        /// </summary>
        internal static string SpecCommandDescription_fra
        {
            get { return GetString("SpecCommandDescription_fra"); }
        }

        /// <summary>
        /// Génère un nuspec pour un nouveau package. Si cette commande s'exécute dans le même dossier que le fichier projet (.csproj, .vbproj, .fsproj), un fichier .nuspec tokenisé sera créé.
        /// </summary>
        internal static string FormatSpecCommandDescription_fra()
        {
            return GetString("SpecCommandDescription_fra");
        }

        /// <summary>
        /// Genera un nuspec per un nuovo pacchetto. Se si esegue questo comando nella stessa cartella di un file di progetto (.csproj, .vbproj, .fsproj), creerà un file nuspec nominale.
        /// </summary>
        internal static string SpecCommandDescription_ita
        {
            get { return GetString("SpecCommandDescription_ita"); }
        }

        /// <summary>
        /// Genera un nuspec per un nuovo pacchetto. Se si esegue questo comando nella stessa cartella di un file di progetto (.csproj, .vbproj, .fsproj), creerà un file nuspec nominale.
        /// </summary>
        internal static string FormatSpecCommandDescription_ita()
        {
            return GetString("SpecCommandDescription_ita");
        }

        /// <summary>
        /// 新しいパッケージの nuspec を生成します。このコマンドをプロジェクト ファイル (.csproj, .vbproj, .fsproj) と同じフォルダーで実行する場合、トークン化された nuspec ファイルが作成されます。
        /// </summary>
        internal static string SpecCommandDescription_jpn
        {
            get { return GetString("SpecCommandDescription_jpn"); }
        }

        /// <summary>
        /// 新しいパッケージの nuspec を生成します。このコマンドをプロジェクト ファイル (.csproj, .vbproj, .fsproj) と同じフォルダーで実行する場合、トークン化された nuspec ファイルが作成されます。
        /// </summary>
        internal static string FormatSpecCommandDescription_jpn()
        {
            return GetString("SpecCommandDescription_jpn");
        }

        /// <summary>
        /// 새 패키지의 nuspec을 생성합니다. 이 명령이 프로젝트 파일(.csproj, .vbproj, .fsproj)과 동일한 폴더에서 실행되면 토큰화된 nuspec 파일을 생성합니다.
        /// </summary>
        internal static string SpecCommandDescription_kor
        {
            get { return GetString("SpecCommandDescription_kor"); }
        }

        /// <summary>
        /// 새 패키지의 nuspec을 생성합니다. 이 명령이 프로젝트 파일(.csproj, .vbproj, .fsproj)과 동일한 폴더에서 실행되면 토큰화된 nuspec 파일을 생성합니다.
        /// </summary>
        internal static string FormatSpecCommandDescription_kor()
        {
            return GetString("SpecCommandDescription_kor");
        }

        /// <summary>
        /// Generuje plik nuspec dla nowego pakietu. Jeśli to polecenie zostanie uruchomione w tym samym folderze co plik projektu (csproj, vbproj, fsproj), spowoduje utworzenie pliku nuspec z tokenizacją.
        /// </summary>
        internal static string SpecCommandDescription_plk
        {
            get { return GetString("SpecCommandDescription_plk"); }
        }

        /// <summary>
        /// Generuje plik nuspec dla nowego pakietu. Jeśli to polecenie zostanie uruchomione w tym samym folderze co plik projektu (csproj, vbproj, fsproj), spowoduje utworzenie pliku nuspec z tokenizacją.
        /// </summary>
        internal static string FormatSpecCommandDescription_plk()
        {
            return GetString("SpecCommandDescription_plk");
        }

        /// <summary>
        /// Gera um nuspec para um novo pacote. Se esse comando for executado na mesma pasta que um arquivo de projeto (.csproj, .vbproj, .fsproj), ele criará um arquivo nuspec com token.
        /// </summary>
        internal static string SpecCommandDescription_ptb
        {
            get { return GetString("SpecCommandDescription_ptb"); }
        }

        /// <summary>
        /// Gera um nuspec para um novo pacote. Se esse comando for executado na mesma pasta que um arquivo de projeto (.csproj, .vbproj, .fsproj), ele criará um arquivo nuspec com token.
        /// </summary>
        internal static string FormatSpecCommandDescription_ptb()
        {
            return GetString("SpecCommandDescription_ptb");
        }

        /// <summary>
        /// Создает NUSPEC-файл для нового пакета. Если эта команда запущена в папке с файлом проекта (.csproj, .vbproj, .fsproj), она создаст размеченный NUSPEC-файл.
        /// </summary>
        internal static string SpecCommandDescription_rus
        {
            get { return GetString("SpecCommandDescription_rus"); }
        }

        /// <summary>
        /// Создает NUSPEC-файл для нового пакета. Если эта команда запущена в папке с файлом проекта (.csproj, .vbproj, .fsproj), она создаст размеченный NUSPEC-файл.
        /// </summary>
        internal static string FormatSpecCommandDescription_rus()
        {
            return GetString("SpecCommandDescription_rus");
        }

        /// <summary>
        /// Yeni paket için bir nuspec oluşturur. Bu komut proje dosyasıyla (.csproj, .vbproj, .fsproj) aynı klasörde çalıştırılırsa, parçalanmış bir nuspec dosyası oluşturur.
        /// </summary>
        internal static string SpecCommandDescription_trk
        {
            get { return GetString("SpecCommandDescription_trk"); }
        }

        /// <summary>
        /// Yeni paket için bir nuspec oluşturur. Bu komut proje dosyasıyla (.csproj, .vbproj, .fsproj) aynı klasörde çalıştırılırsa, parçalanmış bir nuspec dosyası oluşturur.
        /// </summary>
        internal static string FormatSpecCommandDescription_trk()
        {
            return GetString("SpecCommandDescription_trk");
        }

        /// <summary>
        /// 为新程序包生成 nuspec。如果此命令在项目文件(.csproj、.vbproj、.fsproj)所在的文件夹中运行，则它将创建已标记化的 nuspec 文件。
        /// </summary>
        internal static string SpecCommandDescription_chs
        {
            get { return GetString("SpecCommandDescription_chs"); }
        }

        /// <summary>
        /// 为新程序包生成 nuspec。如果此命令在项目文件(.csproj、.vbproj、.fsproj)所在的文件夹中运行，则它将创建已标记化的 nuspec 文件。
        /// </summary>
        internal static string FormatSpecCommandDescription_chs()
        {
            return GetString("SpecCommandDescription_chs");
        }

        /// <summary>
        /// 為新封裝產生 nuspec。如果此命令在與專案檔 (.csproj, .vbproj, .fsproj) 相同資料夾中執行，則會建立 Token 化的 nuspec 檔案。
        /// </summary>
        internal static string SpecCommandDescription_cht
        {
            get { return GetString("SpecCommandDescription_cht"); }
        }

        /// <summary>
        /// 為新封裝產生 nuspec。如果此命令在與專案檔 (.csproj, .vbproj, .fsproj) 相同資料夾中執行，則會建立 Token 化的 nuspec 檔案。
        /// </summary>
        internal static string FormatSpecCommandDescription_cht()
        {
            return GetString("SpecCommandDescription_cht");
        }

        /// <summary>
        /// Přepíše soubor nuspec, existuje-li.
        /// </summary>
        internal static string SpecCommandForceDescription_csy
        {
            get { return GetString("SpecCommandForceDescription_csy"); }
        }

        /// <summary>
        /// Přepíše soubor nuspec, existuje-li.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_csy()
        {
            return GetString("SpecCommandForceDescription_csy");
        }

        /// <summary>
        /// Überschreibt die nuspec-Datei, wenn vorhanden.
        /// </summary>
        internal static string SpecCommandForceDescription_deu
        {
            get { return GetString("SpecCommandForceDescription_deu"); }
        }

        /// <summary>
        /// Überschreibt die nuspec-Datei, wenn vorhanden.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_deu()
        {
            return GetString("SpecCommandForceDescription_deu");
        }

        /// <summary>
        /// Reemplazar el archivo nuspec si existe.
        /// </summary>
        internal static string SpecCommandForceDescription_esp
        {
            get { return GetString("SpecCommandForceDescription_esp"); }
        }

        /// <summary>
        /// Reemplazar el archivo nuspec si existe.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_esp()
        {
            return GetString("SpecCommandForceDescription_esp");
        }

        /// <summary>
        /// Remplacez le fichier .nuspec s'il existe.
        /// </summary>
        internal static string SpecCommandForceDescription_fra
        {
            get { return GetString("SpecCommandForceDescription_fra"); }
        }

        /// <summary>
        /// Remplacez le fichier .nuspec s'il existe.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_fra()
        {
            return GetString("SpecCommandForceDescription_fra");
        }

        /// <summary>
        /// Sovrascrive il file nuspec se esistente.
        /// </summary>
        internal static string SpecCommandForceDescription_ita
        {
            get { return GetString("SpecCommandForceDescription_ita"); }
        }

        /// <summary>
        /// Sovrascrive il file nuspec se esistente.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_ita()
        {
            return GetString("SpecCommandForceDescription_ita");
        }

        /// <summary>
        /// nuspec ファイルが存在する場合は上書きします。
        /// </summary>
        internal static string SpecCommandForceDescription_jpn
        {
            get { return GetString("SpecCommandForceDescription_jpn"); }
        }

        /// <summary>
        /// nuspec ファイルが存在する場合は上書きします。
        /// </summary>
        internal static string FormatSpecCommandForceDescription_jpn()
        {
            return GetString("SpecCommandForceDescription_jpn");
        }

        /// <summary>
        /// nuspec 파일이 있는 경우 덮어씁니다.
        /// </summary>
        internal static string SpecCommandForceDescription_kor
        {
            get { return GetString("SpecCommandForceDescription_kor"); }
        }

        /// <summary>
        /// nuspec 파일이 있는 경우 덮어씁니다.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_kor()
        {
            return GetString("SpecCommandForceDescription_kor");
        }

        /// <summary>
        /// Zastąp plik nuspec, jeśli istnieje.
        /// </summary>
        internal static string SpecCommandForceDescription_plk
        {
            get { return GetString("SpecCommandForceDescription_plk"); }
        }

        /// <summary>
        /// Zastąp plik nuspec, jeśli istnieje.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_plk()
        {
            return GetString("SpecCommandForceDescription_plk");
        }

        /// <summary>
        /// Substitua o arquivo nuspec se ele já existir.
        /// </summary>
        internal static string SpecCommandForceDescription_ptb
        {
            get { return GetString("SpecCommandForceDescription_ptb"); }
        }

        /// <summary>
        /// Substitua o arquivo nuspec se ele já existir.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_ptb()
        {
            return GetString("SpecCommandForceDescription_ptb");
        }

        /// <summary>
        /// Если NUSPEC-файл существует, он будет перезаписан.
        /// </summary>
        internal static string SpecCommandForceDescription_rus
        {
            get { return GetString("SpecCommandForceDescription_rus"); }
        }

        /// <summary>
        /// Если NUSPEC-файл существует, он будет перезаписан.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_rus()
        {
            return GetString("SpecCommandForceDescription_rus");
        }

        /// <summary>
        /// Mevcutsa nuspec dosyasını geçersiz kıl.
        /// </summary>
        internal static string SpecCommandForceDescription_trk
        {
            get { return GetString("SpecCommandForceDescription_trk"); }
        }

        /// <summary>
        /// Mevcutsa nuspec dosyasını geçersiz kıl.
        /// </summary>
        internal static string FormatSpecCommandForceDescription_trk()
        {
            return GetString("SpecCommandForceDescription_trk");
        }

        /// <summary>
        /// 覆盖 nuspec 文件(如果存在)。
        /// </summary>
        internal static string SpecCommandForceDescription_chs
        {
            get { return GetString("SpecCommandForceDescription_chs"); }
        }

        /// <summary>
        /// 覆盖 nuspec 文件(如果存在)。
        /// </summary>
        internal static string FormatSpecCommandForceDescription_chs()
        {
            return GetString("SpecCommandForceDescription_chs");
        }

        /// <summary>
        /// 若存在則覆寫 nuspec 檔案。
        /// </summary>
        internal static string SpecCommandForceDescription_cht
        {
            get { return GetString("SpecCommandForceDescription_cht"); }
        }

        /// <summary>
        /// 若存在則覆寫 nuspec 檔案。
        /// </summary>
        internal static string FormatSpecCommandForceDescription_cht()
        {
            return GetString("SpecCommandForceDescription_cht");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_csy
        {
            get { return GetString("SpecCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_csy()
        {
            return GetString("SpecCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_deu
        {
            get { return GetString("SpecCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_deu()
        {
            return GetString("SpecCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_esp
        {
            get { return GetString("SpecCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_esp()
        {
            return GetString("SpecCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_fra
        {
            get { return GetString("SpecCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_fra()
        {
            return GetString("SpecCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_ita
        {
            get { return GetString("SpecCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_ita()
        {
            return GetString("SpecCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_jpn
        {
            get { return GetString("SpecCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_jpn()
        {
            return GetString("SpecCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_kor
        {
            get { return GetString("SpecCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_kor()
        {
            return GetString("SpecCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_plk
        {
            get { return GetString("SpecCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_plk()
        {
            return GetString("SpecCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_ptb
        {
            get { return GetString("SpecCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_ptb()
        {
            return GetString("SpecCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_rus
        {
            get { return GetString("SpecCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_rus()
        {
            return GetString("SpecCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_trk
        {
            get { return GetString("SpecCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_trk()
        {
            return GetString("SpecCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_chs
        {
            get { return GetString("SpecCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_chs()
        {
            return GetString("SpecCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string SpecCommandUsageExamples_cht
        {
            get { return GetString("SpecCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget spec
        /// 
        /// nuget spec MyPackage
        /// 
        /// nuget spec -a MyAssembly.dll
        /// </summary>
        internal static string FormatSpecCommandUsageExamples_cht()
        {
            return GetString("SpecCommandUsageExamples_cht");
        }

        /// <summary>
        /// [ID balíčku]
        /// </summary>
        internal static string SpecCommandUsageSummary_csy
        {
            get { return GetString("SpecCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// [ID balíčku]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_csy()
        {
            return GetString("SpecCommandUsageSummary_csy");
        }

        /// <summary>
        /// [Paket-ID]
        /// </summary>
        internal static string SpecCommandUsageSummary_deu
        {
            get { return GetString("SpecCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// [Paket-ID]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_deu()
        {
            return GetString("SpecCommandUsageSummary_deu");
        }

        /// <summary>
        /// [id. de paquete]
        /// </summary>
        internal static string SpecCommandUsageSummary_esp
        {
            get { return GetString("SpecCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// [id. de paquete]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_esp()
        {
            return GetString("SpecCommandUsageSummary_esp");
        }

        /// <summary>
        /// [ID package]
        /// </summary>
        internal static string SpecCommandUsageSummary_fra
        {
            get { return GetString("SpecCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// [ID package]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_fra()
        {
            return GetString("SpecCommandUsageSummary_fra");
        }

        /// <summary>
        /// [id pacchetto]
        /// </summary>
        internal static string SpecCommandUsageSummary_ita
        {
            get { return GetString("SpecCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// [id pacchetto]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_ita()
        {
            return GetString("SpecCommandUsageSummary_ita");
        }

        /// <summary>
        /// [package id]
        /// </summary>
        internal static string SpecCommandUsageSummary_jpn
        {
            get { return GetString("SpecCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// [package id]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_jpn()
        {
            return GetString("SpecCommandUsageSummary_jpn");
        }

        /// <summary>
        /// [패키지 ID]
        /// </summary>
        internal static string SpecCommandUsageSummary_kor
        {
            get { return GetString("SpecCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// [패키지 ID]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_kor()
        {
            return GetString("SpecCommandUsageSummary_kor");
        }

        /// <summary>
        /// [identyfikator pakietu]
        /// </summary>
        internal static string SpecCommandUsageSummary_plk
        {
            get { return GetString("SpecCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// [identyfikator pakietu]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_plk()
        {
            return GetString("SpecCommandUsageSummary_plk");
        }

        /// <summary>
        /// [id do pacote]
        /// </summary>
        internal static string SpecCommandUsageSummary_ptb
        {
            get { return GetString("SpecCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// [id do pacote]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_ptb()
        {
            return GetString("SpecCommandUsageSummary_ptb");
        }

        /// <summary>
        /// [идентификатор пакета]
        /// </summary>
        internal static string SpecCommandUsageSummary_rus
        {
            get { return GetString("SpecCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// [идентификатор пакета]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_rus()
        {
            return GetString("SpecCommandUsageSummary_rus");
        }

        /// <summary>
        /// [paket kimliği]
        /// </summary>
        internal static string SpecCommandUsageSummary_trk
        {
            get { return GetString("SpecCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// [paket kimliği]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_trk()
        {
            return GetString("SpecCommandUsageSummary_trk");
        }

        /// <summary>
        /// [程序包 ID]
        /// </summary>
        internal static string SpecCommandUsageSummary_chs
        {
            get { return GetString("SpecCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// [程序包 ID]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_chs()
        {
            return GetString("SpecCommandUsageSummary_chs");
        }

        /// <summary>
        /// [封裝 ID]
        /// </summary>
        internal static string SpecCommandUsageSummary_cht
        {
            get { return GetString("SpecCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// [封裝 ID]
        /// </summary>
        internal static string FormatSpecCommandUsageSummary_cht()
        {
            return GetString("SpecCommandUsageSummary_cht");
        }

        /// <summary>
        /// Aktualizuje balíčky na nejnovější dostupné verze. Tento příkaz rovněž aktualizuje vlastní soubor NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_csy
        {
            get { return GetString("UpdateCommandDescription_csy"); }
        }

        /// <summary>
        /// Aktualizuje balíčky na nejnovější dostupné verze. Tento příkaz rovněž aktualizuje vlastní soubor NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_csy()
        {
            return GetString("UpdateCommandDescription_csy");
        }

        /// <summary>
        /// Pakete auf die aktuellsten verfügbaren Versionen aktualisieren. Dieser Befehl aktualisiert auch sie Datei "NuGet.exe" selbst.
        /// </summary>
        internal static string UpdateCommandDescription_deu
        {
            get { return GetString("UpdateCommandDescription_deu"); }
        }

        /// <summary>
        /// Pakete auf die aktuellsten verfügbaren Versionen aktualisieren. Dieser Befehl aktualisiert auch sie Datei "NuGet.exe" selbst.
        /// </summary>
        internal static string FormatUpdateCommandDescription_deu()
        {
            return GetString("UpdateCommandDescription_deu");
        }

        /// <summary>
        /// Actualizar paquetes a las últimas versiones disponibles. Este comando también actualiza NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_esp
        {
            get { return GetString("UpdateCommandDescription_esp"); }
        }

        /// <summary>
        /// Actualizar paquetes a las últimas versiones disponibles. Este comando también actualiza NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_esp()
        {
            return GetString("UpdateCommandDescription_esp");
        }

        /// <summary>
        /// Mettez à jour les packages vers les versions disponibles les plus récentes. Cette commande met également à jour NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_fra
        {
            get { return GetString("UpdateCommandDescription_fra"); }
        }

        /// <summary>
        /// Mettez à jour les packages vers les versions disponibles les plus récentes. Cette commande met également à jour NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_fra()
        {
            return GetString("UpdateCommandDescription_fra");
        }

        /// <summary>
        /// Aggiornare paccheti alle ultime versioni. Questo comando aggiorna anche NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_ita
        {
            get { return GetString("UpdateCommandDescription_ita"); }
        }

        /// <summary>
        /// Aggiornare paccheti alle ultime versioni. Questo comando aggiorna anche NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_ita()
        {
            return GetString("UpdateCommandDescription_ita");
        }

        /// <summary>
        /// パッケージを利用可能な最新バージョンに更新します。このコマンドで、NuGet.exe も更新されます。
        /// </summary>
        internal static string UpdateCommandDescription_jpn
        {
            get { return GetString("UpdateCommandDescription_jpn"); }
        }

        /// <summary>
        /// パッケージを利用可能な最新バージョンに更新します。このコマンドで、NuGet.exe も更新されます。
        /// </summary>
        internal static string FormatUpdateCommandDescription_jpn()
        {
            return GetString("UpdateCommandDescription_jpn");
        }

        /// <summary>
        /// 패키지를 사용 가능한 최신 버전으로 업데이트합니다. 이 명령은 NuGet.exe 자체도 업데이트합니다.
        /// </summary>
        internal static string UpdateCommandDescription_kor
        {
            get { return GetString("UpdateCommandDescription_kor"); }
        }

        /// <summary>
        /// 패키지를 사용 가능한 최신 버전으로 업데이트합니다. 이 명령은 NuGet.exe 자체도 업데이트합니다.
        /// </summary>
        internal static string FormatUpdateCommandDescription_kor()
        {
            return GetString("UpdateCommandDescription_kor");
        }

        /// <summary>
        /// Zaktualizuj pakiety do najnowszych dostępnych wersji. To polecenie aktualizuje również plik NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_plk
        {
            get { return GetString("UpdateCommandDescription_plk"); }
        }

        /// <summary>
        /// Zaktualizuj pakiety do najnowszych dostępnych wersji. To polecenie aktualizuje również plik NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_plk()
        {
            return GetString("UpdateCommandDescription_plk");
        }

        /// <summary>
        /// Atualize os pacotes para as versões mais recentes disponíveis. Este comando também atualiza NuGet.exe em si.
        /// </summary>
        internal static string UpdateCommandDescription_ptb
        {
            get { return GetString("UpdateCommandDescription_ptb"); }
        }

        /// <summary>
        /// Atualize os pacotes para as versões mais recentes disponíveis. Este comando também atualiza NuGet.exe em si.
        /// </summary>
        internal static string FormatUpdateCommandDescription_ptb()
        {
            return GetString("UpdateCommandDescription_ptb");
        }

        /// <summary>
        /// Обновление пакетов до последних доступных версий. Кроме того, эта команда обновляет и файл NuGet.exe.
        /// </summary>
        internal static string UpdateCommandDescription_rus
        {
            get { return GetString("UpdateCommandDescription_rus"); }
        }

        /// <summary>
        /// Обновление пакетов до последних доступных версий. Кроме того, эта команда обновляет и файл NuGet.exe.
        /// </summary>
        internal static string FormatUpdateCommandDescription_rus()
        {
            return GetString("UpdateCommandDescription_rus");
        }

        /// <summary>
        /// Paketleri mevcut en son sürümlerine günceller. Bu komut ayrıca NuGet.exe öğesinin kendisini de günceller.
        /// </summary>
        internal static string UpdateCommandDescription_trk
        {
            get { return GetString("UpdateCommandDescription_trk"); }
        }

        /// <summary>
        /// Paketleri mevcut en son sürümlerine günceller. Bu komut ayrıca NuGet.exe öğesinin kendisini de günceller.
        /// </summary>
        internal static string FormatUpdateCommandDescription_trk()
        {
            return GetString("UpdateCommandDescription_trk");
        }

        /// <summary>
        /// 将程序包更新到最新的可用版本。此命令还更新 NuGet.exe 本身。
        /// </summary>
        internal static string UpdateCommandDescription_chs
        {
            get { return GetString("UpdateCommandDescription_chs"); }
        }

        /// <summary>
        /// 将程序包更新到最新的可用版本。此命令还更新 NuGet.exe 本身。
        /// </summary>
        internal static string FormatUpdateCommandDescription_chs()
        {
            return GetString("UpdateCommandDescription_chs");
        }

        /// <summary>
        /// 更新封裝為可用的最新版本。此命令也會更新 NuGet.exe 本身。
        /// </summary>
        internal static string UpdateCommandDescription_cht
        {
            get { return GetString("UpdateCommandDescription_cht"); }
        }

        /// <summary>
        /// 更新封裝為可用的最新版本。此命令也會更新 NuGet.exe 本身。
        /// </summary>
        internal static string FormatUpdateCommandDescription_cht()
        {
            return GetString("UpdateCommandDescription_cht");
        }

        /// <summary>
        /// ID balíčků k aktualizaci
        /// </summary>
        internal static string UpdateCommandIdDescription_csy
        {
            get { return GetString("UpdateCommandIdDescription_csy"); }
        }

        /// <summary>
        /// ID balíčků k aktualizaci
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_csy()
        {
            return GetString("UpdateCommandIdDescription_csy");
        }

        /// <summary>
        /// Die zu aktualisierenden Paket-IDs.
        /// </summary>
        internal static string UpdateCommandIdDescription_deu
        {
            get { return GetString("UpdateCommandIdDescription_deu"); }
        }

        /// <summary>
        /// Die zu aktualisierenden Paket-IDs.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_deu()
        {
            return GetString("UpdateCommandIdDescription_deu");
        }

        /// <summary>
        /// Id. de paquetes que se van a actualizar.
        /// </summary>
        internal static string UpdateCommandIdDescription_esp
        {
            get { return GetString("UpdateCommandIdDescription_esp"); }
        }

        /// <summary>
        /// Id. de paquetes que se van a actualizar.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_esp()
        {
            return GetString("UpdateCommandIdDescription_esp");
        }

        /// <summary>
        /// ID des packages à mettre à jour.
        /// </summary>
        internal static string UpdateCommandIdDescription_fra
        {
            get { return GetString("UpdateCommandIdDescription_fra"); }
        }

        /// <summary>
        /// ID des packages à mettre à jour.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_fra()
        {
            return GetString("UpdateCommandIdDescription_fra");
        }

        /// <summary>
        /// Id del pacchetto da aggiornare.
        /// </summary>
        internal static string UpdateCommandIdDescription_ita
        {
            get { return GetString("UpdateCommandIdDescription_ita"); }
        }

        /// <summary>
        /// Id del pacchetto da aggiornare.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_ita()
        {
            return GetString("UpdateCommandIdDescription_ita");
        }

        /// <summary>
        /// 更新するパッケージ ID。
        /// </summary>
        internal static string UpdateCommandIdDescription_jpn
        {
            get { return GetString("UpdateCommandIdDescription_jpn"); }
        }

        /// <summary>
        /// 更新するパッケージ ID。
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_jpn()
        {
            return GetString("UpdateCommandIdDescription_jpn");
        }

        /// <summary>
        /// 업데이트할 패키지 ID입니다.
        /// </summary>
        internal static string UpdateCommandIdDescription_kor
        {
            get { return GetString("UpdateCommandIdDescription_kor"); }
        }

        /// <summary>
        /// 업데이트할 패키지 ID입니다.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_kor()
        {
            return GetString("UpdateCommandIdDescription_kor");
        }

        /// <summary>
        /// Identyfikatory pakietów do zaktualizowania.
        /// </summary>
        internal static string UpdateCommandIdDescription_plk
        {
            get { return GetString("UpdateCommandIdDescription_plk"); }
        }

        /// <summary>
        /// Identyfikatory pakietów do zaktualizowania.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_plk()
        {
            return GetString("UpdateCommandIdDescription_plk");
        }

        /// <summary>
        /// Pacote de IDs a serem atualizadas.
        /// </summary>
        internal static string UpdateCommandIdDescription_ptb
        {
            get { return GetString("UpdateCommandIdDescription_ptb"); }
        }

        /// <summary>
        /// Pacote de IDs a serem atualizadas.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_ptb()
        {
            return GetString("UpdateCommandIdDescription_ptb");
        }

        /// <summary>
        /// Идентификаторы обновляемых пакетов.
        /// </summary>
        internal static string UpdateCommandIdDescription_rus
        {
            get { return GetString("UpdateCommandIdDescription_rus"); }
        }

        /// <summary>
        /// Идентификаторы обновляемых пакетов.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_rus()
        {
            return GetString("UpdateCommandIdDescription_rus");
        }

        /// <summary>
        /// Güncellenecek paket kimlikleri.
        /// </summary>
        internal static string UpdateCommandIdDescription_trk
        {
            get { return GetString("UpdateCommandIdDescription_trk"); }
        }

        /// <summary>
        /// Güncellenecek paket kimlikleri.
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_trk()
        {
            return GetString("UpdateCommandIdDescription_trk");
        }

        /// <summary>
        /// 要更新的程序包 ID。
        /// </summary>
        internal static string UpdateCommandIdDescription_chs
        {
            get { return GetString("UpdateCommandIdDescription_chs"); }
        }

        /// <summary>
        /// 要更新的程序包 ID。
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_chs()
        {
            return GetString("UpdateCommandIdDescription_chs");
        }

        /// <summary>
        /// 要更新的封裝 ID。
        /// </summary>
        internal static string UpdateCommandIdDescription_cht
        {
            get { return GetString("UpdateCommandIdDescription_cht"); }
        }

        /// <summary>
        /// 要更新的封裝 ID。
        /// </summary>
        internal static string FormatUpdateCommandIdDescription_cht()
        {
            return GetString("UpdateCommandIdDescription_cht");
        }

        /// <summary>
        /// Umožňuje aktualizovat na předběžné verze. Tento příznak není vyžadován při aktualizaci předběžných balíčků, které jsou již nainstalovány.
        /// </summary>
        internal static string UpdateCommandPrerelease_csy
        {
            get { return GetString("UpdateCommandPrerelease_csy"); }
        }

        /// <summary>
        /// Umožňuje aktualizovat na předběžné verze. Tento příznak není vyžadován při aktualizaci předběžných balíčků, které jsou již nainstalovány.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_csy()
        {
            return GetString("UpdateCommandPrerelease_csy");
        }

        /// <summary>
        /// Ermöglicht das Update auf Vorabversionen. Diese Kennzeichnung ist bei einem Update auf Vorabversionspakete nicht erforderlich, die bereits installiert sind.
        /// </summary>
        internal static string UpdateCommandPrerelease_deu
        {
            get { return GetString("UpdateCommandPrerelease_deu"); }
        }

        /// <summary>
        /// Ermöglicht das Update auf Vorabversionen. Diese Kennzeichnung ist bei einem Update auf Vorabversionspakete nicht erforderlich, die bereits installiert sind.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_deu()
        {
            return GetString("UpdateCommandPrerelease_deu");
        }

        /// <summary>
        /// Permite actualizar a versiones preliminares. Esta marca no es necesaria cuando se actualizan paquetes de versión preliminar que ya están instalados.
        /// </summary>
        internal static string UpdateCommandPrerelease_esp
        {
            get { return GetString("UpdateCommandPrerelease_esp"); }
        }

        /// <summary>
        /// Permite actualizar a versiones preliminares. Esta marca no es necesaria cuando se actualizan paquetes de versión preliminar que ya están instalados.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_esp()
        {
            return GetString("UpdateCommandPrerelease_esp");
        }

        /// <summary>
        /// Permet la mise à jour vers des versions préliminaires. Cet indicateur n'est pas requis lors de la mise à jour de la version préliminaire des packages déjà installés.
        /// </summary>
        internal static string UpdateCommandPrerelease_fra
        {
            get { return GetString("UpdateCommandPrerelease_fra"); }
        }

        /// <summary>
        /// Permet la mise à jour vers des versions préliminaires. Cet indicateur n'est pas requis lors de la mise à jour de la version préliminaire des packages déjà installés.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_fra()
        {
            return GetString("UpdateCommandPrerelease_fra");
        }

        /// <summary>
        /// Permette l'aggiornamento di versioni prerelease. Questo flag non è richiesto quando si aggiornano pacchetti prerelease già installati.
        /// </summary>
        internal static string UpdateCommandPrerelease_ita
        {
            get { return GetString("UpdateCommandPrerelease_ita"); }
        }

        /// <summary>
        /// Permette l'aggiornamento di versioni prerelease. Questo flag non è richiesto quando si aggiornano pacchetti prerelease già installati.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_ita()
        {
            return GetString("UpdateCommandPrerelease_ita");
        }

        /// <summary>
        /// プレリリース バージョンへの更新を許可します。既にインストールされているプレリリース パッケージを更新する場合、このフラグは必要ありません。
        /// </summary>
        internal static string UpdateCommandPrerelease_jpn
        {
            get { return GetString("UpdateCommandPrerelease_jpn"); }
        }

        /// <summary>
        /// プレリリース バージョンへの更新を許可します。既にインストールされているプレリリース パッケージを更新する場合、このフラグは必要ありません。
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_jpn()
        {
            return GetString("UpdateCommandPrerelease_jpn");
        }

        /// <summary>
        /// 시험판 버전으로 업데이트하도록 허용합니다. 이미 설치된 시험판 패키지를 업데이트하는 경우 이 플래그는 필요하지 않습니다.
        /// </summary>
        internal static string UpdateCommandPrerelease_kor
        {
            get { return GetString("UpdateCommandPrerelease_kor"); }
        }

        /// <summary>
        /// 시험판 버전으로 업데이트하도록 허용합니다. 이미 설치된 시험판 패키지를 업데이트하는 경우 이 플래그는 필요하지 않습니다.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_kor()
        {
            return GetString("UpdateCommandPrerelease_kor");
        }

        /// <summary>
        /// Zezwala na aktualizację do wersji wstępnych. Ta flaga nie jest wymagana w przypadku aktualizowania pakietów w wersji wstępnej, które zostały już zainstalowane.
        /// </summary>
        internal static string UpdateCommandPrerelease_plk
        {
            get { return GetString("UpdateCommandPrerelease_plk"); }
        }

        /// <summary>
        /// Zezwala na aktualizację do wersji wstępnych. Ta flaga nie jest wymagana w przypadku aktualizowania pakietów w wersji wstępnej, które zostały już zainstalowane.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_plk()
        {
            return GetString("UpdateCommandPrerelease_plk");
        }

        /// <summary>
        /// Permite atualizar para versões de pré-lançamento. Este sinal não é necessário ao atualizar pacotes de pré-lançamento que já estão instalados.
        /// </summary>
        internal static string UpdateCommandPrerelease_ptb
        {
            get { return GetString("UpdateCommandPrerelease_ptb"); }
        }

        /// <summary>
        /// Permite atualizar para versões de pré-lançamento. Este sinal não é necessário ao atualizar pacotes de pré-lançamento que já estão instalados.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_ptb()
        {
            return GetString("UpdateCommandPrerelease_ptb");
        }

        /// <summary>
        /// Позволяет обновлять предварительные версии. Этот флаг не нужен при обновлении предварительных версий пакетов, которые уже установлены.
        /// </summary>
        internal static string UpdateCommandPrerelease_rus
        {
            get { return GetString("UpdateCommandPrerelease_rus"); }
        }

        /// <summary>
        /// Позволяет обновлять предварительные версии. Этот флаг не нужен при обновлении предварительных версий пакетов, которые уже установлены.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_rus()
        {
            return GetString("UpdateCommandPrerelease_rus");
        }

        /// <summary>
        /// Önsürümlere güncelleme yapılmasına izin verir. Zaten yüklü olan önsürüm paketleri güncellenirken bu bayrak gerekli değildir.
        /// </summary>
        internal static string UpdateCommandPrerelease_trk
        {
            get { return GetString("UpdateCommandPrerelease_trk"); }
        }

        /// <summary>
        /// Önsürümlere güncelleme yapılmasına izin verir. Zaten yüklü olan önsürüm paketleri güncellenirken bu bayrak gerekli değildir.
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_trk()
        {
            return GetString("UpdateCommandPrerelease_trk");
        }

        /// <summary>
        /// 允许更新到预发布版本。当更新已安装的预发布程序包时，不需要此标志。
        /// </summary>
        internal static string UpdateCommandPrerelease_chs
        {
            get { return GetString("UpdateCommandPrerelease_chs"); }
        }

        /// <summary>
        /// 允许更新到预发布版本。当更新已安装的预发布程序包时，不需要此标志。
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_chs()
        {
            return GetString("UpdateCommandPrerelease_chs");
        }

        /// <summary>
        /// 允許更新至預先更新的版本。更新已安裝的預先發行封裝時不需要此標幟。
        /// </summary>
        internal static string UpdateCommandPrerelease_cht
        {
            get { return GetString("UpdateCommandPrerelease_cht"); }
        }

        /// <summary>
        /// 允許更新至預先更新的版本。更新已安裝的預先發行封裝時不需要此標幟。
        /// </summary>
        internal static string FormatUpdateCommandPrerelease_cht()
        {
            return GetString("UpdateCommandPrerelease_cht");
        }

        /// <summary>
        /// Cesta k místní složce balíčků (umístění, v němž jsou balíčky nainstalovány)
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_csy
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_csy"); }
        }

        /// <summary>
        /// Cesta k místní složce balíčků (umístění, v němž jsou balíčky nainstalovány)
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_csy()
        {
            return GetString("UpdateCommandRepositoryPathDescription_csy");
        }

        /// <summary>
        /// Der Pfad zum lokalen Paketordner (zu dem Speicherort, an dem Pakete installiert sind).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_deu
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_deu"); }
        }

        /// <summary>
        /// Der Pfad zum lokalen Paketordner (zu dem Speicherort, an dem Pakete installiert sind).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_deu()
        {
            return GetString("UpdateCommandRepositoryPathDescription_deu");
        }

        /// <summary>
        /// Ruta de acceso a la carpeta de paquetes local (ubicación de los paquetes instalados).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_esp
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_esp"); }
        }

        /// <summary>
        /// Ruta de acceso a la carpeta de paquetes local (ubicación de los paquetes instalados).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_esp()
        {
            return GetString("UpdateCommandRepositoryPathDescription_esp");
        }

        /// <summary>
        /// Chemin d'accès au dossier de packages locaux (emplacement des packages installés).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_fra
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_fra"); }
        }

        /// <summary>
        /// Chemin d'accès au dossier de packages locaux (emplacement des packages installés).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_fra()
        {
            return GetString("UpdateCommandRepositoryPathDescription_fra");
        }

        /// <summary>
        /// Percorso a cartelle locali pacchetti (dove sono installati i pacchetti).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_ita
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_ita"); }
        }

        /// <summary>
        /// Percorso a cartelle locali pacchetti (dove sono installati i pacchetti).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_ita()
        {
            return GetString("UpdateCommandRepositoryPathDescription_ita");
        }

        /// <summary>
        /// ローカル パッケージ フォルダーのパス (パッケージがインストールされている場所)。
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_jpn
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_jpn"); }
        }

        /// <summary>
        /// ローカル パッケージ フォルダーのパス (パッケージがインストールされている場所)。
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_jpn()
        {
            return GetString("UpdateCommandRepositoryPathDescription_jpn");
        }

        /// <summary>
        /// 로컬 패키지 폴더의 경로(패키지가 설치된 위치)입니다.
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_kor
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_kor"); }
        }

        /// <summary>
        /// 로컬 패키지 폴더의 경로(패키지가 설치된 위치)입니다.
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_kor()
        {
            return GetString("UpdateCommandRepositoryPathDescription_kor");
        }

        /// <summary>
        /// Ścieżka do lokalnego folderu pakietów (lokalizacja, w której są instalowane pakiety).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_plk
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_plk"); }
        }

        /// <summary>
        /// Ścieżka do lokalnego folderu pakietów (lokalizacja, w której są instalowane pakiety).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_plk()
        {
            return GetString("UpdateCommandRepositoryPathDescription_plk");
        }

        /// <summary>
        /// Caminho para a pasta de pacotes local (local onde os pacotes estão instalados).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_ptb
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_ptb"); }
        }

        /// <summary>
        /// Caminho para a pasta de pacotes local (local onde os pacotes estão instalados).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_ptb()
        {
            return GetString("UpdateCommandRepositoryPathDescription_ptb");
        }

        /// <summary>
        /// Путь к локальной папке пакетов (в которой установлены пакеты).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_rus
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_rus"); }
        }

        /// <summary>
        /// Путь к локальной папке пакетов (в которой установлены пакеты).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_rus()
        {
            return GetString("UpdateCommandRepositoryPathDescription_rus");
        }

        /// <summary>
        /// Yerel paket klasörünün yolu (paketlerin yüklü olduğu konum).
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_trk
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_trk"); }
        }

        /// <summary>
        /// Yerel paket klasörünün yolu (paketlerin yüklü olduğu konum).
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_trk()
        {
            return GetString("UpdateCommandRepositoryPathDescription_trk");
        }

        /// <summary>
        /// 本地程序包文件夹的路径(安装程序包的位置)。
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_chs
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_chs"); }
        }

        /// <summary>
        /// 本地程序包文件夹的路径(安装程序包的位置)。
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_chs()
        {
            return GetString("UpdateCommandRepositoryPathDescription_chs");
        }

        /// <summary>
        /// 本機封裝資料夾的路徑 (安裝封裝的位置)。
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription_cht
        {
            get { return GetString("UpdateCommandRepositoryPathDescription_cht"); }
        }

        /// <summary>
        /// 本機封裝資料夾的路徑 (安裝封裝的位置)。
        /// </summary>
        internal static string FormatUpdateCommandRepositoryPathDescription_cht()
        {
            return GetString("UpdateCommandRepositoryPathDescription_cht");
        }

        /// <summary>
        /// Vyhledá aktualizace s nejvyšší dostupnou verzí v rámci stejné hlavní verze a podverze jako nainstalovaný balíček.
        /// </summary>
        internal static string UpdateCommandSafeDescription_csy
        {
            get { return GetString("UpdateCommandSafeDescription_csy"); }
        }

        /// <summary>
        /// Vyhledá aktualizace s nejvyšší dostupnou verzí v rámci stejné hlavní verze a podverze jako nainstalovaný balíček.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_csy()
        {
            return GetString("UpdateCommandSafeDescription_csy");
        }

        /// <summary>
        /// Sucht nach Updates mit der höchsten Version, die in der gleichen Haupt- und Nebenversion wie das installierte Paket verfügbar sind.
        /// </summary>
        internal static string UpdateCommandSafeDescription_deu
        {
            get { return GetString("UpdateCommandSafeDescription_deu"); }
        }

        /// <summary>
        /// Sucht nach Updates mit der höchsten Version, die in der gleichen Haupt- und Nebenversion wie das installierte Paket verfügbar sind.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_deu()
        {
            return GetString("UpdateCommandSafeDescription_deu");
        }

        /// <summary>
        /// Busca actualizaciones con la última versión disponible en la versión principal y secundaria como el paquete instalado.
        /// </summary>
        internal static string UpdateCommandSafeDescription_esp
        {
            get { return GetString("UpdateCommandSafeDescription_esp"); }
        }

        /// <summary>
        /// Busca actualizaciones con la última versión disponible en la versión principal y secundaria como el paquete instalado.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_esp()
        {
            return GetString("UpdateCommandSafeDescription_esp");
        }

        /// <summary>
        /// Recherche les mises à jour vers la version maximale, disponibles pour les versions principale et secondaire identiques au package installé.
        /// </summary>
        internal static string UpdateCommandSafeDescription_fra
        {
            get { return GetString("UpdateCommandSafeDescription_fra"); }
        }

        /// <summary>
        /// Recherche les mises à jour vers la version maximale, disponibles pour les versions principale et secondaire identiques au package installé.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_fra()
        {
            return GetString("UpdateCommandSafeDescription_fra");
        }

        /// <summary>
        /// Ricerca aggiornamenti delle versioni ultime disponibili nella stessa versione maggiore e minore dei pacchetti installati.
        /// </summary>
        internal static string UpdateCommandSafeDescription_ita
        {
            get { return GetString("UpdateCommandSafeDescription_ita"); }
        }

        /// <summary>
        /// Ricerca aggiornamenti delle versioni ultime disponibili nella stessa versione maggiore e minore dei pacchetti installati.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_ita()
        {
            return GetString("UpdateCommandSafeDescription_ita");
        }

        /// <summary>
        /// インストールされているパッケージと同じメジャー バージョンおよびマイナー バージョン内で最も新しいバージョンの更新プログラムを検索します。
        /// </summary>
        internal static string UpdateCommandSafeDescription_jpn
        {
            get { return GetString("UpdateCommandSafeDescription_jpn"); }
        }

        /// <summary>
        /// インストールされているパッケージと同じメジャー バージョンおよびマイナー バージョン内で最も新しいバージョンの更新プログラムを検索します。
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_jpn()
        {
            return GetString("UpdateCommandSafeDescription_jpn");
        }

        /// <summary>
        /// 설치된 패키지와 동일한 주 버전 및 부 버전에서 사용 가능한 가장 높은 버전의 업데이트를 찾습니다.
        /// </summary>
        internal static string UpdateCommandSafeDescription_kor
        {
            get { return GetString("UpdateCommandSafeDescription_kor"); }
        }

        /// <summary>
        /// 설치된 패키지와 동일한 주 버전 및 부 버전에서 사용 가능한 가장 높은 버전의 업데이트를 찾습니다.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_kor()
        {
            return GetString("UpdateCommandSafeDescription_kor");
        }

        /// <summary>
        /// Szuka aktualizacji z najwyższą wersją dostępnych w obrębie tej samej wersji głównej i pomocniczej co zainstalowany pakiet.
        /// </summary>
        internal static string UpdateCommandSafeDescription_plk
        {
            get { return GetString("UpdateCommandSafeDescription_plk"); }
        }

        /// <summary>
        /// Szuka aktualizacji z najwyższą wersją dostępnych w obrębie tej samej wersji głównej i pomocniczej co zainstalowany pakiet.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_plk()
        {
            return GetString("UpdateCommandSafeDescription_plk");
        }

        /// <summary>
        /// Procura por atualizações com a maior versão disponível dentro da mesma versão principal e secundária do pacote instalado.
        /// </summary>
        internal static string UpdateCommandSafeDescription_ptb
        {
            get { return GetString("UpdateCommandSafeDescription_ptb"); }
        }

        /// <summary>
        /// Procura por atualizações com a maior versão disponível dentro da mesma versão principal e secundária do pacote instalado.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_ptb()
        {
            return GetString("UpdateCommandSafeDescription_ptb");
        }

        /// <summary>
        /// Выполняет поиск обновлений с самой последней версией, которые доступны в пределах основного и дополнительного номера версии установленного пакета.
        /// </summary>
        internal static string UpdateCommandSafeDescription_rus
        {
            get { return GetString("UpdateCommandSafeDescription_rus"); }
        }

        /// <summary>
        /// Выполняет поиск обновлений с самой последней версией, которые доступны в пределах основного и дополнительного номера версии установленного пакета.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_rus()
        {
            return GetString("UpdateCommandSafeDescription_rus");
        }

        /// <summary>
        /// Yüklü paket ile aynı ana ve alt sürüm aralığındaki mevcut en yüksek sürüme sahip güncellemeleri arar.
        /// </summary>
        internal static string UpdateCommandSafeDescription_trk
        {
            get { return GetString("UpdateCommandSafeDescription_trk"); }
        }

        /// <summary>
        /// Yüklü paket ile aynı ana ve alt sürüm aralığındaki mevcut en yüksek sürüme sahip güncellemeleri arar.
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_trk()
        {
            return GetString("UpdateCommandSafeDescription_trk");
        }

        /// <summary>
        /// 查找具有已安装程序包的主要版本和次要版本内的最高可用版本的更新。
        /// </summary>
        internal static string UpdateCommandSafeDescription_chs
        {
            get { return GetString("UpdateCommandSafeDescription_chs"); }
        }

        /// <summary>
        /// 查找具有已安装程序包的主要版本和次要版本内的最高可用版本的更新。
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_chs()
        {
            return GetString("UpdateCommandSafeDescription_chs");
        }

        /// <summary>
        /// 以與已安裝封裝同樣的主要和次要版本中可取得的最高版本尋找更新。
        /// </summary>
        internal static string UpdateCommandSafeDescription_cht
        {
            get { return GetString("UpdateCommandSafeDescription_cht"); }
        }

        /// <summary>
        /// 以與已安裝封裝同樣的主要和次要版本中可取得的最高版本尋找更新。
        /// </summary>
        internal static string FormatUpdateCommandSafeDescription_cht()
        {
            return GetString("UpdateCommandSafeDescription_cht");
        }

        /// <summary>
        /// Aktualizuje spuštěný soubor NuGet.exe na nejnovější verzi dostupnou na serveru.
        /// </summary>
        internal static string UpdateCommandSelfDescription_csy
        {
            get { return GetString("UpdateCommandSelfDescription_csy"); }
        }

        /// <summary>
        /// Aktualizuje spuštěný soubor NuGet.exe na nejnovější verzi dostupnou na serveru.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_csy()
        {
            return GetString("UpdateCommandSelfDescription_csy");
        }

        /// <summary>
        /// Update der aktuell ausgeführten Datei "NuGet.exe" auf die aktuellste Version ausführen, die vom Server verfügbar ist.
        /// </summary>
        internal static string UpdateCommandSelfDescription_deu
        {
            get { return GetString("UpdateCommandSelfDescription_deu"); }
        }

        /// <summary>
        /// Update der aktuell ausgeführten Datei "NuGet.exe" auf die aktuellste Version ausführen, die vom Server verfügbar ist.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_deu()
        {
            return GetString("UpdateCommandSelfDescription_deu");
        }

        /// <summary>
        /// Actualizar NuGet.exe que se ejecuta a la última versión disponible del servidor.
        /// </summary>
        internal static string UpdateCommandSelfDescription_esp
        {
            get { return GetString("UpdateCommandSelfDescription_esp"); }
        }

        /// <summary>
        /// Actualizar NuGet.exe que se ejecuta a la última versión disponible del servidor.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_esp()
        {
            return GetString("UpdateCommandSelfDescription_esp");
        }

        /// <summary>
        /// Mettez à jour le fichier NuGet.exe en service vers la version disponible la plus récente, depuis le serveur.
        /// </summary>
        internal static string UpdateCommandSelfDescription_fra
        {
            get { return GetString("UpdateCommandSelfDescription_fra"); }
        }

        /// <summary>
        /// Mettez à jour le fichier NuGet.exe en service vers la version disponible la plus récente, depuis le serveur.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_fra()
        {
            return GetString("UpdateCommandSelfDescription_fra");
        }

        /// <summary>
        /// Aggiorna l'esecuzione di NuGet.exe alla nuova versione disponibile dal server.
        /// </summary>
        internal static string UpdateCommandSelfDescription_ita
        {
            get { return GetString("UpdateCommandSelfDescription_ita"); }
        }

        /// <summary>
        /// Aggiorna l'esecuzione di NuGet.exe alla nuova versione disponibile dal server.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_ita()
        {
            return GetString("UpdateCommandSelfDescription_ita");
        }

        /// <summary>
        /// 実行されている NuGet.exe を、サーバーから入手可能な最新バージョンに更新します。
        /// </summary>
        internal static string UpdateCommandSelfDescription_jpn
        {
            get { return GetString("UpdateCommandSelfDescription_jpn"); }
        }

        /// <summary>
        /// 実行されている NuGet.exe を、サーバーから入手可能な最新バージョンに更新します。
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_jpn()
        {
            return GetString("UpdateCommandSelfDescription_jpn");
        }

        /// <summary>
        /// 실행 중인 NuGet.exe를 서버에서 사용 가능한 최신 버전으로 업데이트합니다.
        /// </summary>
        internal static string UpdateCommandSelfDescription_kor
        {
            get { return GetString("UpdateCommandSelfDescription_kor"); }
        }

        /// <summary>
        /// 실행 중인 NuGet.exe를 서버에서 사용 가능한 최신 버전으로 업데이트합니다.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_kor()
        {
            return GetString("UpdateCommandSelfDescription_kor");
        }

        /// <summary>
        /// Zaktualizuj uruchomiony plik NuGet.exe do najnowszej wersji dostępnej na serwerze.
        /// </summary>
        internal static string UpdateCommandSelfDescription_plk
        {
            get { return GetString("UpdateCommandSelfDescription_plk"); }
        }

        /// <summary>
        /// Zaktualizuj uruchomiony plik NuGet.exe do najnowszej wersji dostępnej na serwerze.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_plk()
        {
            return GetString("UpdateCommandSelfDescription_plk");
        }

        /// <summary>
        /// Atualize o NuGet.exe em execução para a versão mais recente disponível do servidor.
        /// </summary>
        internal static string UpdateCommandSelfDescription_ptb
        {
            get { return GetString("UpdateCommandSelfDescription_ptb"); }
        }

        /// <summary>
        /// Atualize o NuGet.exe em execução para a versão mais recente disponível do servidor.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_ptb()
        {
            return GetString("UpdateCommandSelfDescription_ptb");
        }

        /// <summary>
        /// Обновление запущенного файла NuGet.exe до самой последней версии, доступной на сервере.
        /// </summary>
        internal static string UpdateCommandSelfDescription_rus
        {
            get { return GetString("UpdateCommandSelfDescription_rus"); }
        }

        /// <summary>
        /// Обновление запущенного файла NuGet.exe до самой последней версии, доступной на сервере.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_rus()
        {
            return GetString("UpdateCommandSelfDescription_rus");
        }

        /// <summary>
        /// Çalıştırılan NuGet.exe öğesini sunucudaki mevcut en yeni sürüme güncelle.
        /// </summary>
        internal static string UpdateCommandSelfDescription_trk
        {
            get { return GetString("UpdateCommandSelfDescription_trk"); }
        }

        /// <summary>
        /// Çalıştırılan NuGet.exe öğesini sunucudaki mevcut en yeni sürüme güncelle.
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_trk()
        {
            return GetString("UpdateCommandSelfDescription_trk");
        }

        /// <summary>
        /// 将正在运行的 NuGet.exe 更新到可从服务器获得的最新版本。
        /// </summary>
        internal static string UpdateCommandSelfDescription_chs
        {
            get { return GetString("UpdateCommandSelfDescription_chs"); }
        }

        /// <summary>
        /// 将正在运行的 NuGet.exe 更新到可从服务器获得的最新版本。
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_chs()
        {
            return GetString("UpdateCommandSelfDescription_chs");
        }

        /// <summary>
        /// 將執行中的 NuGet.exe 更新為伺服器中可取得的最新版本。
        /// </summary>
        internal static string UpdateCommandSelfDescription_cht
        {
            get { return GetString("UpdateCommandSelfDescription_cht"); }
        }

        /// <summary>
        /// 將執行中的 NuGet.exe 更新為伺服器中可取得的最新版本。
        /// </summary>
        internal static string FormatUpdateCommandSelfDescription_cht()
        {
            return GetString("UpdateCommandSelfDescription_cht");
        }

        /// <summary>
        /// Seznam zdrojů balíčků pro vyhledání aktualizací
        /// </summary>
        internal static string UpdateCommandSourceDescription_csy
        {
            get { return GetString("UpdateCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Seznam zdrojů balíčků pro vyhledání aktualizací
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_csy()
        {
            return GetString("UpdateCommandSourceDescription_csy");
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die nach Updates durchsucht werden sollen.
        /// </summary>
        internal static string UpdateCommandSourceDescription_deu
        {
            get { return GetString("UpdateCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die nach Updates durchsucht werden sollen.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_deu()
        {
            return GetString("UpdateCommandSourceDescription_deu");
        }

        /// <summary>
        /// Lista de orígenes del paquete para buscar actualizaciones.
        /// </summary>
        internal static string UpdateCommandSourceDescription_esp
        {
            get { return GetString("UpdateCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Lista de orígenes del paquete para buscar actualizaciones.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_esp()
        {
            return GetString("UpdateCommandSourceDescription_esp");
        }

        /// <summary>
        /// Liste des mises à jour de sources de package à rechercher.
        /// </summary>
        internal static string UpdateCommandSourceDescription_fra
        {
            get { return GetString("UpdateCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Liste des mises à jour de sources de package à rechercher.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_fra()
        {
            return GetString("UpdateCommandSourceDescription_fra");
        }

        /// <summary>
        /// Un elenco di fonti pacchetti per ricercare aggiornamenti.
        /// </summary>
        internal static string UpdateCommandSourceDescription_ita
        {
            get { return GetString("UpdateCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Un elenco di fonti pacchetti per ricercare aggiornamenti.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_ita()
        {
            return GetString("UpdateCommandSourceDescription_ita");
        }

        /// <summary>
        /// 更新プログラムを検索するパッケージ ソースの一覧。
        /// </summary>
        internal static string UpdateCommandSourceDescription_jpn
        {
            get { return GetString("UpdateCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// 更新プログラムを検索するパッケージ ソースの一覧。
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_jpn()
        {
            return GetString("UpdateCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 업데이트를 검색할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string UpdateCommandSourceDescription_kor
        {
            get { return GetString("UpdateCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 업데이트를 검색할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_kor()
        {
            return GetString("UpdateCommandSourceDescription_kor");
        }

        /// <summary>
        /// Lista źródeł pakietów na potrzeby wyszukiwania aktualizacji.
        /// </summary>
        internal static string UpdateCommandSourceDescription_plk
        {
            get { return GetString("UpdateCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Lista źródeł pakietów na potrzeby wyszukiwania aktualizacji.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_plk()
        {
            return GetString("UpdateCommandSourceDescription_plk");
        }

        /// <summary>
        /// Uma lista de origens de pacotes para buscar atualizações.
        /// </summary>
        internal static string UpdateCommandSourceDescription_ptb
        {
            get { return GetString("UpdateCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Uma lista de origens de pacotes para buscar atualizações.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_ptb()
        {
            return GetString("UpdateCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Список источников пакетов для поиска обновлений.
        /// </summary>
        internal static string UpdateCommandSourceDescription_rus
        {
            get { return GetString("UpdateCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Список источников пакетов для поиска обновлений.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_rus()
        {
            return GetString("UpdateCommandSourceDescription_rus");
        }

        /// <summary>
        /// Güncellemeler için aranacak paket kaynaklarının listesi.
        /// </summary>
        internal static string UpdateCommandSourceDescription_trk
        {
            get { return GetString("UpdateCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Güncellemeler için aranacak paket kaynaklarının listesi.
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_trk()
        {
            return GetString("UpdateCommandSourceDescription_trk");
        }

        /// <summary>
        /// 要搜索更新的程序包源的列表。
        /// </summary>
        internal static string UpdateCommandSourceDescription_chs
        {
            get { return GetString("UpdateCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 要搜索更新的程序包源的列表。
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_chs()
        {
            return GetString("UpdateCommandSourceDescription_chs");
        }

        /// <summary>
        /// 要搜尋更新的封裝來源清單。
        /// </summary>
        internal static string UpdateCommandSourceDescription_cht
        {
            get { return GetString("UpdateCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 要搜尋更新的封裝來源清單。
        /// </summary>
        internal static string FormatUpdateCommandSourceDescription_cht()
        {
            return GetString("UpdateCommandSourceDescription_cht");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_csy
        {
            get { return GetString("UpdateCommandUsageExamples_csy"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_csy()
        {
            return GetString("UpdateCommandUsageExamples_csy");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_deu
        {
            get { return GetString("UpdateCommandUsageExamples_deu"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_deu()
        {
            return GetString("UpdateCommandUsageExamples_deu");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_esp
        {
            get { return GetString("UpdateCommandUsageExamples_esp"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_esp()
        {
            return GetString("UpdateCommandUsageExamples_esp");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_fra
        {
            get { return GetString("UpdateCommandUsageExamples_fra"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_fra()
        {
            return GetString("UpdateCommandUsageExamples_fra");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_ita
        {
            get { return GetString("UpdateCommandUsageExamples_ita"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_ita()
        {
            return GetString("UpdateCommandUsageExamples_ita");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_jpn
        {
            get { return GetString("UpdateCommandUsageExamples_jpn"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_jpn()
        {
            return GetString("UpdateCommandUsageExamples_jpn");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_kor
        {
            get { return GetString("UpdateCommandUsageExamples_kor"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_kor()
        {
            return GetString("UpdateCommandUsageExamples_kor");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_plk
        {
            get { return GetString("UpdateCommandUsageExamples_plk"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_plk()
        {
            return GetString("UpdateCommandUsageExamples_plk");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_ptb
        {
            get { return GetString("UpdateCommandUsageExamples_ptb"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_ptb()
        {
            return GetString("UpdateCommandUsageExamples_ptb");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_rus
        {
            get { return GetString("UpdateCommandUsageExamples_rus"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_rus()
        {
            return GetString("UpdateCommandUsageExamples_rus");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_trk
        {
            get { return GetString("UpdateCommandUsageExamples_trk"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_trk()
        {
            return GetString("UpdateCommandUsageExamples_trk");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_chs
        {
            get { return GetString("UpdateCommandUsageExamples_chs"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_chs()
        {
            return GetString("UpdateCommandUsageExamples_chs");
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string UpdateCommandUsageExamples_cht
        {
            get { return GetString("UpdateCommandUsageExamples_cht"); }
        }

        /// <summary>
        /// nuget update
        ///     
        /// nuget update -Safe
        /// 
        /// nuget update -Self
        /// </summary>
        internal static string FormatUpdateCommandUsageExamples_cht()
        {
            return GetString("UpdateCommandUsageExamples_cht");
        }

        /// <summary>
        /// Zobrazí podrobný výstup při aktualizaci.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_csy
        {
            get { return GetString("UpdateCommandVerboseDescription_csy"); }
        }

        /// <summary>
        /// Zobrazí podrobný výstup při aktualizaci.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_csy()
        {
            return GetString("UpdateCommandVerboseDescription_csy");
        }

        /// <summary>
        /// Ausführliche Ausgabe während des Updates anzeigen.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_deu
        {
            get { return GetString("UpdateCommandVerboseDescription_deu"); }
        }

        /// <summary>
        /// Ausführliche Ausgabe während des Updates anzeigen.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_deu()
        {
            return GetString("UpdateCommandVerboseDescription_deu");
        }

        /// <summary>
        /// Mostrar resultados detallados mientras se actualiza.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_esp
        {
            get { return GetString("UpdateCommandVerboseDescription_esp"); }
        }

        /// <summary>
        /// Mostrar resultados detallados mientras se actualiza.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_esp()
        {
            return GetString("UpdateCommandVerboseDescription_esp");
        }

        /// <summary>
        /// Affichez la sortie détaillée pendant la mise à jour.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_fra
        {
            get { return GetString("UpdateCommandVerboseDescription_fra"); }
        }

        /// <summary>
        /// Affichez la sortie détaillée pendant la mise à jour.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_fra()
        {
            return GetString("UpdateCommandVerboseDescription_fra");
        }

        /// <summary>
        /// Mostra l'uscita ridondante durante l'aggiornamento.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_ita
        {
            get { return GetString("UpdateCommandVerboseDescription_ita"); }
        }

        /// <summary>
        /// Mostra l'uscita ridondante durante l'aggiornamento.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_ita()
        {
            return GetString("UpdateCommandVerboseDescription_ita");
        }

        /// <summary>
        /// 更新せずに詳細な出力を表示します。
        /// </summary>
        internal static string UpdateCommandVerboseDescription_jpn
        {
            get { return GetString("UpdateCommandVerboseDescription_jpn"); }
        }

        /// <summary>
        /// 更新せずに詳細な出力を表示します。
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_jpn()
        {
            return GetString("UpdateCommandVerboseDescription_jpn");
        }

        /// <summary>
        /// 업데이트하는 동안 자세한 출력을 표시합니다.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_kor
        {
            get { return GetString("UpdateCommandVerboseDescription_kor"); }
        }

        /// <summary>
        /// 업데이트하는 동안 자세한 출력을 표시합니다.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_kor()
        {
            return GetString("UpdateCommandVerboseDescription_kor");
        }

        /// <summary>
        /// Pokaż dane wyjściowe w trybie pełnym podczas aktualizacji.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_plk
        {
            get { return GetString("UpdateCommandVerboseDescription_plk"); }
        }

        /// <summary>
        /// Pokaż dane wyjściowe w trybie pełnym podczas aktualizacji.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_plk()
        {
            return GetString("UpdateCommandVerboseDescription_plk");
        }

        /// <summary>
        /// Mostrar a saída detalhada durante a atualização.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_ptb
        {
            get { return GetString("UpdateCommandVerboseDescription_ptb"); }
        }

        /// <summary>
        /// Mostrar a saída detalhada durante a atualização.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_ptb()
        {
            return GetString("UpdateCommandVerboseDescription_ptb");
        }

        /// <summary>
        /// Отображение подробных выходных данных при обновлении.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_rus
        {
            get { return GetString("UpdateCommandVerboseDescription_rus"); }
        }

        /// <summary>
        /// Отображение подробных выходных данных при обновлении.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_rus()
        {
            return GetString("UpdateCommandVerboseDescription_rus");
        }

        /// <summary>
        /// Güncellerken ayrıntılı çıktıyı göster.
        /// </summary>
        internal static string UpdateCommandVerboseDescription_trk
        {
            get { return GetString("UpdateCommandVerboseDescription_trk"); }
        }

        /// <summary>
        /// Güncellerken ayrıntılı çıktıyı göster.
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_trk()
        {
            return GetString("UpdateCommandVerboseDescription_trk");
        }

        /// <summary>
        /// 显示更新时的详细输出。
        /// </summary>
        internal static string UpdateCommandVerboseDescription_chs
        {
            get { return GetString("UpdateCommandVerboseDescription_chs"); }
        }

        /// <summary>
        /// 显示更新时的详细输出。
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_chs()
        {
            return GetString("UpdateCommandVerboseDescription_chs");
        }

        /// <summary>
        /// 更新時顯示詳細資訊輸出
        /// </summary>
        internal static string UpdateCommandVerboseDescription_cht
        {
            get { return GetString("UpdateCommandVerboseDescription_cht"); }
        }

        /// <summary>
        /// 更新時顯示詳細資訊輸出
        /// </summary>
        internal static string FormatUpdateCommandVerboseDescription_cht()
        {
            return GetString("UpdateCommandVerboseDescription_cht");
        }

        /// <summary>
        /// Klíč API pro server
        /// </summary>
        internal static string CommandApiKey_csy
        {
            get { return GetString("CommandApiKey_csy"); }
        }

        /// <summary>
        /// Klíč API pro server
        /// </summary>
        internal static string FormatCommandApiKey_csy()
        {
            return GetString("CommandApiKey_csy");
        }

        /// <summary>
        /// Der API-Schlüssel für den Server.
        /// </summary>
        internal static string CommandApiKey_deu
        {
            get { return GetString("CommandApiKey_deu"); }
        }

        /// <summary>
        /// Der API-Schlüssel für den Server.
        /// </summary>
        internal static string FormatCommandApiKey_deu()
        {
            return GetString("CommandApiKey_deu");
        }

        /// <summary>
        /// Clave API para el servidor.
        /// </summary>
        internal static string CommandApiKey_esp
        {
            get { return GetString("CommandApiKey_esp"); }
        }

        /// <summary>
        /// Clave API para el servidor.
        /// </summary>
        internal static string FormatCommandApiKey_esp()
        {
            return GetString("CommandApiKey_esp");
        }

        /// <summary>
        /// La Clé API dédiée au serveur.
        /// </summary>
        internal static string CommandApiKey_fra
        {
            get { return GetString("CommandApiKey_fra"); }
        }

        /// <summary>
        /// La Clé API dédiée au serveur.
        /// </summary>
        internal static string FormatCommandApiKey_fra()
        {
            return GetString("CommandApiKey_fra");
        }

        /// <summary>
        /// API key per il server.
        /// </summary>
        internal static string CommandApiKey_ita
        {
            get { return GetString("CommandApiKey_ita"); }
        }

        /// <summary>
        /// API key per il server.
        /// </summary>
        internal static string FormatCommandApiKey_ita()
        {
            return GetString("CommandApiKey_ita");
        }

        /// <summary>
        /// サーバーの API キー。
        /// </summary>
        internal static string CommandApiKey_jpn
        {
            get { return GetString("CommandApiKey_jpn"); }
        }

        /// <summary>
        /// サーバーの API キー。
        /// </summary>
        internal static string FormatCommandApiKey_jpn()
        {
            return GetString("CommandApiKey_jpn");
        }

        /// <summary>
        /// 서버에 대한 API 키입니다.
        /// </summary>
        internal static string CommandApiKey_kor
        {
            get { return GetString("CommandApiKey_kor"); }
        }

        /// <summary>
        /// 서버에 대한 API 키입니다.
        /// </summary>
        internal static string FormatCommandApiKey_kor()
        {
            return GetString("CommandApiKey_kor");
        }

        /// <summary>
        /// Klucz interfejsu API dla serwera.
        /// </summary>
        internal static string CommandApiKey_plk
        {
            get { return GetString("CommandApiKey_plk"); }
        }

        /// <summary>
        /// Klucz interfejsu API dla serwera.
        /// </summary>
        internal static string FormatCommandApiKey_plk()
        {
            return GetString("CommandApiKey_plk");
        }

        /// <summary>
        /// A chave de API para o servidor.
        /// </summary>
        internal static string CommandApiKey_ptb
        {
            get { return GetString("CommandApiKey_ptb"); }
        }

        /// <summary>
        /// A chave de API para o servidor.
        /// </summary>
        internal static string FormatCommandApiKey_ptb()
        {
            return GetString("CommandApiKey_ptb");
        }

        /// <summary>
        /// Ключ API для сервера.
        /// </summary>
        internal static string CommandApiKey_rus
        {
            get { return GetString("CommandApiKey_rus"); }
        }

        /// <summary>
        /// Ключ API для сервера.
        /// </summary>
        internal static string FormatCommandApiKey_rus()
        {
            return GetString("CommandApiKey_rus");
        }

        /// <summary>
        /// Sunucu için API anahtarı.
        /// </summary>
        internal static string CommandApiKey_trk
        {
            get { return GetString("CommandApiKey_trk"); }
        }

        /// <summary>
        /// Sunucu için API anahtarı.
        /// </summary>
        internal static string FormatCommandApiKey_trk()
        {
            return GetString("CommandApiKey_trk");
        }

        /// <summary>
        /// 服务器的 API 密钥。
        /// </summary>
        internal static string CommandApiKey_chs
        {
            get { return GetString("CommandApiKey_chs"); }
        }

        /// <summary>
        /// 服务器的 API 密钥。
        /// </summary>
        internal static string FormatCommandApiKey_chs()
        {
            return GetString("CommandApiKey_chs");
        }

        /// <summary>
        /// 伺服器的 API 索引鍵。
        /// </summary>
        internal static string CommandApiKey_cht
        {
            get { return GetString("CommandApiKey_cht"); }
        }

        /// <summary>
        /// 伺服器的 API 索引鍵。
        /// </summary>
        internal static string FormatCommandApiKey_cht()
        {
            return GetString("CommandApiKey_cht");
        }

        /// <summary>
        /// Výchozí konfigurace NuGet se získá načtením souboru %AppData%\NuGet\NuGet.config a následným načtením všech souborů nuget.config nebo .nuget\nuget.config, počínaje kořenovým adresářem jednotky a konče aktuálním adresářem.
        /// </summary>
        internal static string DefaultConfigDescription_csy
        {
            get { return GetString("DefaultConfigDescription_csy"); }
        }

        /// <summary>
        /// Výchozí konfigurace NuGet se získá načtením souboru %AppData%\NuGet\NuGet.config a následným načtením všech souborů nuget.config nebo .nuget\nuget.config, počínaje kořenovým adresářem jednotky a konče aktuálním adresářem.
        /// </summary>
        internal static string FormatDefaultConfigDescription_csy()
        {
            return GetString("DefaultConfigDescription_csy");
        }

        /// <summary>
        /// Die Standardkonfiguration von NuGet wird durch Laden von "%AppData%\NuGet\NuGet.config" und anschließendes Laden von "nuget.config" oder ".nuget\nuget.config" mit Start im Stamm des Laufwerks und Ende im aktuellen Verzeichnis abgerufen.
        /// </summary>
        internal static string DefaultConfigDescription_deu
        {
            get { return GetString("DefaultConfigDescription_deu"); }
        }

        /// <summary>
        /// Die Standardkonfiguration von NuGet wird durch Laden von "%AppData%\NuGet\NuGet.config" und anschließendes Laden von "nuget.config" oder ".nuget\nuget.config" mit Start im Stamm des Laufwerks und Ende im aktuellen Verzeichnis abgerufen.
        /// </summary>
        internal static string FormatDefaultConfigDescription_deu()
        {
            return GetString("DefaultConfigDescription_deu");
        }

        /// <summary>
        /// La configuración predeterminada de NuGet se obtiene cargando %AppData%\NuGet\NuGet.config y, a continuación, cualquier nuget.config o .nuget\nuget.config empezando desde la raíz de la unidad hasta el directorio actual.
        /// </summary>
        internal static string DefaultConfigDescription_esp
        {
            get { return GetString("DefaultConfigDescription_esp"); }
        }

        /// <summary>
        /// La configuración predeterminada de NuGet se obtiene cargando %AppData%\NuGet\NuGet.config y, a continuación, cualquier nuget.config o .nuget\nuget.config empezando desde la raíz de la unidad hasta el directorio actual.
        /// </summary>
        internal static string FormatDefaultConfigDescription_esp()
        {
            return GetString("DefaultConfigDescription_esp");
        }

        /// <summary>
        /// La configuration NuGet par défaut est obtenue en chargeant %AppData%\NuGet\NuGet.config, puis en chargeant nuget.config ou .nuget\nuget.config commençant à la racine du lecteur et terminant dans le répertoire actuel.
        /// </summary>
        internal static string DefaultConfigDescription_fra
        {
            get { return GetString("DefaultConfigDescription_fra"); }
        }

        /// <summary>
        /// La configuration NuGet par défaut est obtenue en chargeant %AppData%\NuGet\NuGet.config, puis en chargeant nuget.config ou .nuget\nuget.config commençant à la racine du lecteur et terminant dans le répertoire actuel.
        /// </summary>
        internal static string FormatDefaultConfigDescription_fra()
        {
            return GetString("DefaultConfigDescription_fra");
        }

        /// <summary>
        /// La configurazione di default di NuGet si ottiene caricando %AppData%\NuGet\NuGet.config, poi caricando qualsiasi nuget.config o .nuget\nuget.config a partire dal root del drive e terminando nell'attuale directory.
        /// </summary>
        internal static string DefaultConfigDescription_ita
        {
            get { return GetString("DefaultConfigDescription_ita"); }
        }

        /// <summary>
        /// La configurazione di default di NuGet si ottiene caricando %AppData%\NuGet\NuGet.config, poi caricando qualsiasi nuget.config o .nuget\nuget.config a partire dal root del drive e terminando nell'attuale directory.
        /// </summary>
        internal static string FormatDefaultConfigDescription_ita()
        {
            return GetString("DefaultConfigDescription_ita");
        }

        /// <summary>
        /// NuGet の既定の構成を取得するには、%AppData%\NuGet\NuGet.config を読み込み、ドライブのルートから現在のディレクトリの間にあるすべての nuget.config または .nuget\nuget.config を読み込みます。
        /// </summary>
        internal static string DefaultConfigDescription_jpn
        {
            get { return GetString("DefaultConfigDescription_jpn"); }
        }

        /// <summary>
        /// NuGet の既定の構成を取得するには、%AppData%\NuGet\NuGet.config を読み込み、ドライブのルートから現在のディレクトリの間にあるすべての nuget.config または .nuget\nuget.config を読み込みます。
        /// </summary>
        internal static string FormatDefaultConfigDescription_jpn()
        {
            return GetString("DefaultConfigDescription_jpn");
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config를 로드한 후 드라이브 루트에서 현재 디렉터리까지의 nuget.config 또는 .nuget\nuget.config를 로드하여 NuGet의 기본 구성을 가져옵니다.
        /// </summary>
        internal static string DefaultConfigDescription_kor
        {
            get { return GetString("DefaultConfigDescription_kor"); }
        }

        /// <summary>
        /// %AppData%\NuGet\NuGet.config를 로드한 후 드라이브 루트에서 현재 디렉터리까지의 nuget.config 또는 .nuget\nuget.config를 로드하여 NuGet의 기본 구성을 가져옵니다.
        /// </summary>
        internal static string FormatDefaultConfigDescription_kor()
        {
            return GetString("DefaultConfigDescription_kor");
        }

        /// <summary>
        /// Domyślna konfiguracja pakietu NuGet jest uzyskiwana przez załadowanie pliku %AppData%\NuGet\NuGet.config, a następnie załadowanie dowolnego pliku nuget.config lub .nuget\nuget.config, zaczynając od folderu głównego dysku i kończąc w katalogu bieżącym.\n
        /// </summary>
        internal static string DefaultConfigDescription_plk
        {
            get { return GetString("DefaultConfigDescription_plk"); }
        }

        /// <summary>
        /// Domyślna konfiguracja pakietu NuGet jest uzyskiwana przez załadowanie pliku %AppData%\NuGet\NuGet.config, a następnie załadowanie dowolnego pliku nuget.config lub .nuget\nuget.config, zaczynając od folderu głównego dysku i kończąc w katalogu bieżącym.\n
        /// </summary>
        internal static string FormatDefaultConfigDescription_plk()
        {
            return GetString("DefaultConfigDescription_plk");
        }

        /// <summary>
        /// A configuração padrão do NuGet é obtida ao carregar %AppData%\NuGet\NuGet.config, e depois ao carrear qualquer nuget.config ou .nuget\nuget.config começando pela raiz da unidade e terminando no diretório atual.
        /// </summary>
        internal static string DefaultConfigDescription_ptb
        {
            get { return GetString("DefaultConfigDescription_ptb"); }
        }

        /// <summary>
        /// A configuração padrão do NuGet é obtida ao carregar %AppData%\NuGet\NuGet.config, e depois ao carrear qualquer nuget.config ou .nuget\nuget.config começando pela raiz da unidade e terminando no diretório atual.
        /// </summary>
        internal static string FormatDefaultConfigDescription_ptb()
        {
            return GetString("DefaultConfigDescription_ptb");
        }

        /// <summary>
        /// Чтобы получить используемую по умолчанию конфигурацию NuGet, следует загрузить файл %AppData%\NuGet\NuGet.config, а затем загрузить все файлы nuget.config или .nuget\nuget.config, начиная с корня диска и заканчивая текущим каталогом.
        /// </summary>
        internal static string DefaultConfigDescription_rus
        {
            get { return GetString("DefaultConfigDescription_rus"); }
        }

        /// <summary>
        /// Чтобы получить используемую по умолчанию конфигурацию NuGet, следует загрузить файл %AppData%\NuGet\NuGet.config, а затем загрузить все файлы nuget.config или .nuget\nuget.config, начиная с корня диска и заканчивая текущим каталогом.
        /// </summary>
        internal static string FormatDefaultConfigDescription_rus()
        {
            return GetString("DefaultConfigDescription_rus");
        }

        /// <summary>
        /// Varsayılan NuGet yapılandırması %AppData%\NuGet\NuGet.config yüklenerek, ardından sürücü kökünden başlanıp geçerli dizinde sonlandırılarak tüm nuget.config ve .nuget\nuget.config öğeleri yüklenerek edinildi.
        /// </summary>
        internal static string DefaultConfigDescription_trk
        {
            get { return GetString("DefaultConfigDescription_trk"); }
        }

        /// <summary>
        /// Varsayılan NuGet yapılandırması %AppData%\NuGet\NuGet.config yüklenerek, ardından sürücü kökünden başlanıp geçerli dizinde sonlandırılarak tüm nuget.config ve .nuget\nuget.config öğeleri yüklenerek edinildi.
        /// </summary>
        internal static string FormatDefaultConfigDescription_trk()
        {
            return GetString("DefaultConfigDescription_trk");
        }

        /// <summary>
        /// 通过加载 %AppData%\NuGet\NuGet.config，然后加载从驱动器的根目录开始到当前目录为止的任何 nuget.config 或 .nuget\nuget.config 来获取 NuGet 的默认配置。
        /// </summary>
        internal static string DefaultConfigDescription_chs
        {
            get { return GetString("DefaultConfigDescription_chs"); }
        }

        /// <summary>
        /// 通过加载 %AppData%\NuGet\NuGet.config，然后加载从驱动器的根目录开始到当前目录为止的任何 nuget.config 或 .nuget\nuget.config 来获取 NuGet 的默认配置。
        /// </summary>
        internal static string FormatDefaultConfigDescription_chs()
        {
            return GetString("DefaultConfigDescription_chs");
        }

        /// <summary>
        /// NuGet 的預設設定可載入 %AppData%\NuGet\NuGet.config 以取得，接著載入任何從磁碟根啟動且在目前目錄中結束的 nuget.config 或 .nuget\nuget.config。
        /// </summary>
        internal static string DefaultConfigDescription_cht
        {
            get { return GetString("DefaultConfigDescription_cht"); }
        }

        /// <summary>
        /// NuGet 的預設設定可載入 %AppData%\NuGet\NuGet.config 以取得，接著載入任何從磁碟根啟動且在目前目錄中結束的 nuget.config 或 .nuget\nuget.config。
        /// </summary>
        internal static string FormatDefaultConfigDescription_cht()
        {
            return GetString("DefaultConfigDescription_cht");
        }

        /// <summary>
        /// Před zahájením instalace balíčku ověří, zda je udělen souhlas s obnovením tohoto balíčku.
        /// </summary>
        internal static string InstallCommandRequireConsent_csy
        {
            get { return GetString("InstallCommandRequireConsent_csy"); }
        }

        /// <summary>
        /// Před zahájením instalace balíčku ověří, zda je udělen souhlas s obnovením tohoto balíčku.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_csy()
        {
            return GetString("InstallCommandRequireConsent_csy");
        }

        /// <summary>
        /// Überprüft, ob die Zustimmung zur Paketwiederherstellung erteilt wurde, bevor ein Paket installiert wird.
        /// </summary>
        internal static string InstallCommandRequireConsent_deu
        {
            get { return GetString("InstallCommandRequireConsent_deu"); }
        }

        /// <summary>
        /// Überprüft, ob die Zustimmung zur Paketwiederherstellung erteilt wurde, bevor ein Paket installiert wird.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_deu()
        {
            return GetString("InstallCommandRequireConsent_deu");
        }

        /// <summary>
        /// Comprueba si se concede consentimiento de restauración del paquete antes de instalar un paquete.
        /// </summary>
        internal static string InstallCommandRequireConsent_esp
        {
            get { return GetString("InstallCommandRequireConsent_esp"); }
        }

        /// <summary>
        /// Comprueba si se concede consentimiento de restauración del paquete antes de instalar un paquete.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_esp()
        {
            return GetString("InstallCommandRequireConsent_esp");
        }

        /// <summary>
        /// Vérifie si l'accord de restauration du package est donné avant d'installer le package.
        /// </summary>
        internal static string InstallCommandRequireConsent_fra
        {
            get { return GetString("InstallCommandRequireConsent_fra"); }
        }

        /// <summary>
        /// Vérifie si l'accord de restauration du package est donné avant d'installer le package.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_fra()
        {
            return GetString("InstallCommandRequireConsent_fra");
        }

        /// <summary>
        /// Verificare che sia garantito il consenso al ripristino pacchetti prima di installarli.
        /// </summary>
        internal static string InstallCommandRequireConsent_ita
        {
            get { return GetString("InstallCommandRequireConsent_ita"); }
        }

        /// <summary>
        /// Verificare che sia garantito il consenso al ripristino pacchetti prima di installarli.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_ita()
        {
            return GetString("InstallCommandRequireConsent_ita");
        }

        /// <summary>
        /// パッケージをインストールする前に、パッケージの復元が同意されているかどうかを確認します。
        /// </summary>
        internal static string InstallCommandRequireConsent_jpn
        {
            get { return GetString("InstallCommandRequireConsent_jpn"); }
        }

        /// <summary>
        /// パッケージをインストールする前に、パッケージの復元が同意されているかどうかを確認します。
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_jpn()
        {
            return GetString("InstallCommandRequireConsent_jpn");
        }

        /// <summary>
        /// 패키지를 설치하기 전에 패키지 복원에 동의했는지 확인하십시오.
        /// </summary>
        internal static string InstallCommandRequireConsent_kor
        {
            get { return GetString("InstallCommandRequireConsent_kor"); }
        }

        /// <summary>
        /// 패키지를 설치하기 전에 패키지 복원에 동의했는지 확인하십시오.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_kor()
        {
            return GetString("InstallCommandRequireConsent_kor");
        }

        /// <summary>
        /// Sprawdza, czy przed zainstalowaniem pakietu udzielono zgody na przywrócenie pakietu.
        /// </summary>
        internal static string InstallCommandRequireConsent_plk
        {
            get { return GetString("InstallCommandRequireConsent_plk"); }
        }

        /// <summary>
        /// Sprawdza, czy przed zainstalowaniem pakietu udzielono zgody na przywrócenie pakietu.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_plk()
        {
            return GetString("InstallCommandRequireConsent_plk");
        }

        /// <summary>
        /// Verifica se a autorização de restauração do pacote foi concedida antes de instalar um pacote.
        /// </summary>
        internal static string InstallCommandRequireConsent_ptb
        {
            get { return GetString("InstallCommandRequireConsent_ptb"); }
        }

        /// <summary>
        /// Verifica se a autorização de restauração do pacote foi concedida antes de instalar um pacote.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_ptb()
        {
            return GetString("InstallCommandRequireConsent_ptb");
        }

        /// <summary>
        /// Проверяет, было ли дано согласие на восстановление пакета перед установкой пакета.
        /// </summary>
        internal static string InstallCommandRequireConsent_rus
        {
            get { return GetString("InstallCommandRequireConsent_rus"); }
        }

        /// <summary>
        /// Проверяет, было ли дано согласие на восстановление пакета перед установкой пакета.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_rus()
        {
            return GetString("InstallCommandRequireConsent_rus");
        }

        /// <summary>
        /// Paket yüklenmeden önce, paket geri yükleme izninin verilip verilmediğini denetler.
        /// </summary>
        internal static string InstallCommandRequireConsent_trk
        {
            get { return GetString("InstallCommandRequireConsent_trk"); }
        }

        /// <summary>
        /// Paket yüklenmeden önce, paket geri yükleme izninin verilip verilmediğini denetler.
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_trk()
        {
            return GetString("InstallCommandRequireConsent_trk");
        }

        /// <summary>
        /// 在安装程序包之前，检查是否已同意还原程序包。
        /// </summary>
        internal static string InstallCommandRequireConsent_chs
        {
            get { return GetString("InstallCommandRequireConsent_chs"); }
        }

        /// <summary>
        /// 在安装程序包之前，检查是否已同意还原程序包。
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_chs()
        {
            return GetString("InstallCommandRequireConsent_chs");
        }

        /// <summary>
        /// 檢查是否在安裝封裝前已授予封裝還原同意。
        /// </summary>
        internal static string InstallCommandRequireConsent_cht
        {
            get { return GetString("InstallCommandRequireConsent_cht"); }
        }

        /// <summary>
        /// 檢查是否在安裝封裝前已授予封裝還原同意。
        /// </summary>
        internal static string FormatInstallCommandRequireConsent_cht()
        {
            return GetString("InstallCommandRequireConsent_cht");
        }

        /// <summary>
        /// Kořenový adresář řešení pro obnovení balíčků
        /// </summary>
        internal static string InstallCommandSolutionDirectory_csy
        {
            get { return GetString("InstallCommandSolutionDirectory_csy"); }
        }

        /// <summary>
        /// Kořenový adresář řešení pro obnovení balíčků
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_csy()
        {
            return GetString("InstallCommandSolutionDirectory_csy");
        }

        /// <summary>
        /// Paketstamm für die Paketwiederherstellung.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_deu
        {
            get { return GetString("InstallCommandSolutionDirectory_deu"); }
        }

        /// <summary>
        /// Paketstamm für die Paketwiederherstellung.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_deu()
        {
            return GetString("InstallCommandSolutionDirectory_deu");
        }

        /// <summary>
        /// Raíz de la solución para la restauración del paquete.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_esp
        {
            get { return GetString("InstallCommandSolutionDirectory_esp"); }
        }

        /// <summary>
        /// Raíz de la solución para la restauración del paquete.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_esp()
        {
            return GetString("InstallCommandSolutionDirectory_esp");
        }

        /// <summary>
        /// Racine de la solution pour la restauration du package.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_fra
        {
            get { return GetString("InstallCommandSolutionDirectory_fra"); }
        }

        /// <summary>
        /// Racine de la solution pour la restauration du package.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_fra()
        {
            return GetString("InstallCommandSolutionDirectory_fra");
        }

        /// <summary>
        /// Solution root per ripristino pacchetti.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_ita
        {
            get { return GetString("InstallCommandSolutionDirectory_ita"); }
        }

        /// <summary>
        /// Solution root per ripristino pacchetti.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_ita()
        {
            return GetString("InstallCommandSolutionDirectory_ita");
        }

        /// <summary>
        /// パッケージ復元のソリューション ルート。
        /// </summary>
        internal static string InstallCommandSolutionDirectory_jpn
        {
            get { return GetString("InstallCommandSolutionDirectory_jpn"); }
        }

        /// <summary>
        /// パッケージ復元のソリューション ルート。
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_jpn()
        {
            return GetString("InstallCommandSolutionDirectory_jpn");
        }

        /// <summary>
        /// 패키지 복원에 사용되는 솔루션 루트입니다.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_kor
        {
            get { return GetString("InstallCommandSolutionDirectory_kor"); }
        }

        /// <summary>
        /// 패키지 복원에 사용되는 솔루션 루트입니다.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_kor()
        {
            return GetString("InstallCommandSolutionDirectory_kor");
        }

        /// <summary>
        /// Katalog główny rozwiązania na potrzeby przywracania pakietu.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_plk
        {
            get { return GetString("InstallCommandSolutionDirectory_plk"); }
        }

        /// <summary>
        /// Katalog główny rozwiązania na potrzeby przywracania pakietu.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_plk()
        {
            return GetString("InstallCommandSolutionDirectory_plk");
        }

        /// <summary>
        /// Raiz de solução para restauração de pacotes.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_ptb
        {
            get { return GetString("InstallCommandSolutionDirectory_ptb"); }
        }

        /// <summary>
        /// Raiz de solução para restauração de pacotes.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_ptb()
        {
            return GetString("InstallCommandSolutionDirectory_ptb");
        }

        /// <summary>
        /// Корень решения для восстановления пакета.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_rus
        {
            get { return GetString("InstallCommandSolutionDirectory_rus"); }
        }

        /// <summary>
        /// Корень решения для восстановления пакета.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_rus()
        {
            return GetString("InstallCommandSolutionDirectory_rus");
        }

        /// <summary>
        /// Paket geri yüklemesi için çözüm kökü.
        /// </summary>
        internal static string InstallCommandSolutionDirectory_trk
        {
            get { return GetString("InstallCommandSolutionDirectory_trk"); }
        }

        /// <summary>
        /// Paket geri yüklemesi için çözüm kökü.
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_trk()
        {
            return GetString("InstallCommandSolutionDirectory_trk");
        }

        /// <summary>
        /// 用于还原程序包的解决方案根目录。
        /// </summary>
        internal static string InstallCommandSolutionDirectory_chs
        {
            get { return GetString("InstallCommandSolutionDirectory_chs"); }
        }

        /// <summary>
        /// 用于还原程序包的解决方案根目录。
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_chs()
        {
            return GetString("InstallCommandSolutionDirectory_chs");
        }

        /// <summary>
        /// 封裝還原的方案根。
        /// </summary>
        internal static string InstallCommandSolutionDirectory_cht
        {
            get { return GetString("InstallCommandSolutionDirectory_cht"); }
        }

        /// <summary>
        /// 封裝還原的方案根。
        /// </summary>
        internal static string FormatInstallCommandSolutionDirectory_cht()
        {
            return GetString("InstallCommandSolutionDirectory_cht");
        }

        /// <summary>
        /// Konfigurační soubor NuGet. Není-li zadán, je jako konfigurační soubor použit soubor %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string Option_ConfigFile_csy
        {
            get { return GetString("Option_ConfigFile_csy"); }
        }

        /// <summary>
        /// Konfigurační soubor NuGet. Není-li zadán, je jako konfigurační soubor použit soubor %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string FormatOption_ConfigFile_csy()
        {
            return GetString("Option_ConfigFile_csy");
        }

        /// <summary>
        /// Die NuGet-Konfigurationsdatei. Erfolgt keine Angabe, wird "%AppData%\NuGet\NuGet.config" als Konfigurationsdatei verwendet.
        /// </summary>
        internal static string Option_ConfigFile_deu
        {
            get { return GetString("Option_ConfigFile_deu"); }
        }

        /// <summary>
        /// Die NuGet-Konfigurationsdatei. Erfolgt keine Angabe, wird "%AppData%\NuGet\NuGet.config" als Konfigurationsdatei verwendet.
        /// </summary>
        internal static string FormatOption_ConfigFile_deu()
        {
            return GetString("Option_ConfigFile_deu");
        }

        /// <summary>
        /// Archivo de configuración NuGet. Si no se especifica, el archivo %AppData%\NuGet\NuGet.config se usa como archivo de configuración.
        /// </summary>
        internal static string Option_ConfigFile_esp
        {
            get { return GetString("Option_ConfigFile_esp"); }
        }

        /// <summary>
        /// Archivo de configuración NuGet. Si no se especifica, el archivo %AppData%\NuGet\NuGet.config se usa como archivo de configuración.
        /// </summary>
        internal static string FormatOption_ConfigFile_esp()
        {
            return GetString("Option_ConfigFile_esp");
        }

        /// <summary>
        /// Fichier de configuration NuGet. Si aucun fichier n'est spécifié, %AppData%\NuGet\NuGet.config servira de fichier de configuration.
        /// </summary>
        internal static string Option_ConfigFile_fra
        {
            get { return GetString("Option_ConfigFile_fra"); }
        }

        /// <summary>
        /// Fichier de configuration NuGet. Si aucun fichier n'est spécifié, %AppData%\NuGet\NuGet.config servira de fichier de configuration.
        /// </summary>
        internal static string FormatOption_ConfigFile_fra()
        {
            return GetString("Option_ConfigFile_fra");
        }

        /// <summary>
        /// File  configurazione NuGet. Se non specificato, si usa il file %AppData%\NuGet\NuGet.config come file configurazione.
        /// </summary>
        internal static string Option_ConfigFile_ita
        {
            get { return GetString("Option_ConfigFile_ita"); }
        }

        /// <summary>
        /// File  configurazione NuGet. Se non specificato, si usa il file %AppData%\NuGet\NuGet.config come file configurazione.
        /// </summary>
        internal static string FormatOption_ConfigFile_ita()
        {
            return GetString("Option_ConfigFile_ita");
        }

        /// <summary>
        /// NuGet 構成ファイル。指定しない場合、構成ファイルとして %AppData%\NuGet\NuGet.config ファイルが使用されます。
        /// </summary>
        internal static string Option_ConfigFile_jpn
        {
            get { return GetString("Option_ConfigFile_jpn"); }
        }

        /// <summary>
        /// NuGet 構成ファイル。指定しない場合、構成ファイルとして %AppData%\NuGet\NuGet.config ファイルが使用されます。
        /// </summary>
        internal static string FormatOption_ConfigFile_jpn()
        {
            return GetString("Option_ConfigFile_jpn");
        }

        /// <summary>
        /// NuGet 구성 파일입니다. 지정되지 않은 경우 %AppData%\NuGet\NuGet.config가 구성 파일로 사용됩니다.
        /// </summary>
        internal static string Option_ConfigFile_kor
        {
            get { return GetString("Option_ConfigFile_kor"); }
        }

        /// <summary>
        /// NuGet 구성 파일입니다. 지정되지 않은 경우 %AppData%\NuGet\NuGet.config가 구성 파일로 사용됩니다.
        /// </summary>
        internal static string FormatOption_ConfigFile_kor()
        {
            return GetString("Option_ConfigFile_kor");
        }

        /// <summary>
        /// Plik konfiguracji NuGet. Jeśli nie zostanie określony, jako plik konfiguracji jest używany plik %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string Option_ConfigFile_plk
        {
            get { return GetString("Option_ConfigFile_plk"); }
        }

        /// <summary>
        /// Plik konfiguracji NuGet. Jeśli nie zostanie określony, jako plik konfiguracji jest używany plik %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string FormatOption_ConfigFile_plk()
        {
            return GetString("Option_ConfigFile_plk");
        }

        /// <summary>
        /// O arquivo de configuração NuGet. Se não for especificado, o arquivo %AppData%\NuGet\NuGet.config será usado como arquivo de configuração.
        /// </summary>
        internal static string Option_ConfigFile_ptb
        {
            get { return GetString("Option_ConfigFile_ptb"); }
        }

        /// <summary>
        /// O arquivo de configuração NuGet. Se não for especificado, o arquivo %AppData%\NuGet\NuGet.config será usado como arquivo de configuração.
        /// </summary>
        internal static string FormatOption_ConfigFile_ptb()
        {
            return GetString("Option_ConfigFile_ptb");
        }

        /// <summary>
        /// Файл конфигурации NuGet. Если не указан, в качестве файла конфигурации используется файл %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string Option_ConfigFile_rus
        {
            get { return GetString("Option_ConfigFile_rus"); }
        }

        /// <summary>
        /// Файл конфигурации NuGet. Если не указан, в качестве файла конфигурации используется файл %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string FormatOption_ConfigFile_rus()
        {
            return GetString("Option_ConfigFile_rus");
        }

        /// <summary>
        /// NuGet yapılandırma dosyası. Belirtilmemişse, %AppData%\NuGet\NuGet.config dosyası yapılandırma dosyası olarak kullanılır.
        /// </summary>
        internal static string Option_ConfigFile_trk
        {
            get { return GetString("Option_ConfigFile_trk"); }
        }

        /// <summary>
        /// NuGet yapılandırma dosyası. Belirtilmemişse, %AppData%\NuGet\NuGet.config dosyası yapılandırma dosyası olarak kullanılır.
        /// </summary>
        internal static string FormatOption_ConfigFile_trk()
        {
            return GetString("Option_ConfigFile_trk");
        }

        /// <summary>
        /// NuGet 配置文件。如果未指定，则将文件 %AppData%\NuGet\NuGet.config 用作配置文件。
        /// </summary>
        internal static string Option_ConfigFile_chs
        {
            get { return GetString("Option_ConfigFile_chs"); }
        }

        /// <summary>
        /// NuGet 配置文件。如果未指定，则将文件 %AppData%\NuGet\NuGet.config 用作配置文件。
        /// </summary>
        internal static string FormatOption_ConfigFile_chs()
        {
            return GetString("Option_ConfigFile_chs");
        }

        /// <summary>
        /// NuGet 設定檔。如果未指定，檔案 %AppData%\NuGet\NuGet.config 會用做設定檔。
        /// </summary>
        internal static string Option_ConfigFile_cht
        {
            get { return GetString("Option_ConfigFile_cht"); }
        }

        /// <summary>
        /// NuGet 設定檔。如果未指定，檔案 %AppData%\NuGet\NuGet.config 會用做設定檔。
        /// </summary>
        internal static string FormatOption_ConfigFile_cht()
        {
            return GetString("Option_ConfigFile_cht");
        }

        /// <summary>
        /// Zakáže instalaci paralelních balíčků nuget.
        /// </summary>
        internal static string InstallCommandDisableParallel_csy
        {
            get { return GetString("InstallCommandDisableParallel_csy"); }
        }

        /// <summary>
        /// Zakáže instalaci paralelních balíčků nuget.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_csy()
        {
            return GetString("InstallCommandDisableParallel_csy");
        }

        /// <summary>
        /// Parallele nuget-Paketinstallationen deaktivieren.
        /// </summary>
        internal static string InstallCommandDisableParallel_deu
        {
            get { return GetString("InstallCommandDisableParallel_deu"); }
        }

        /// <summary>
        /// Parallele nuget-Paketinstallationen deaktivieren.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_deu()
        {
            return GetString("InstallCommandDisableParallel_deu");
        }

        /// <summary>
        /// Deshabilitar las instalaciones del paquete nuget en paralelo.
        /// </summary>
        internal static string InstallCommandDisableParallel_esp
        {
            get { return GetString("InstallCommandDisableParallel_esp"); }
        }

        /// <summary>
        /// Deshabilitar las instalaciones del paquete nuget en paralelo.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_esp()
        {
            return GetString("InstallCommandDisableParallel_esp");
        }

        /// <summary>
        /// Désactivez les installations du package nuget parallèle.
        /// </summary>
        internal static string InstallCommandDisableParallel_fra
        {
            get { return GetString("InstallCommandDisableParallel_fra"); }
        }

        /// <summary>
        /// Désactivez les installations du package nuget parallèle.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_fra()
        {
            return GetString("InstallCommandDisableParallel_fra");
        }

        /// <summary>
        /// Disabilita parallel nuget package installs.
        /// </summary>
        internal static string InstallCommandDisableParallel_ita
        {
            get { return GetString("InstallCommandDisableParallel_ita"); }
        }

        /// <summary>
        /// Disabilita parallel nuget package installs.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_ita()
        {
            return GetString("InstallCommandDisableParallel_ita");
        }

        /// <summary>
        /// nuget パッケージの並列インストールを無効にします。
        /// </summary>
        internal static string InstallCommandDisableParallel_jpn
        {
            get { return GetString("InstallCommandDisableParallel_jpn"); }
        }

        /// <summary>
        /// nuget パッケージの並列インストールを無効にします。
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_jpn()
        {
            return GetString("InstallCommandDisableParallel_jpn");
        }

        /// <summary>
        /// 병렬 nuget 패키지 설치를 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string InstallCommandDisableParallel_kor
        {
            get { return GetString("InstallCommandDisableParallel_kor"); }
        }

        /// <summary>
        /// 병렬 nuget 패키지 설치를 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_kor()
        {
            return GetString("InstallCommandDisableParallel_kor");
        }

        /// <summary>
        /// Wyłącz równoległe instalacje pakietów nuget.
        /// </summary>
        internal static string InstallCommandDisableParallel_plk
        {
            get { return GetString("InstallCommandDisableParallel_plk"); }
        }

        /// <summary>
        /// Wyłącz równoległe instalacje pakietów nuget.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_plk()
        {
            return GetString("InstallCommandDisableParallel_plk");
        }

        /// <summary>
        /// Desabilite instalações de pacotes NuGet paralelas.
        /// </summary>
        internal static string InstallCommandDisableParallel_ptb
        {
            get { return GetString("InstallCommandDisableParallel_ptb"); }
        }

        /// <summary>
        /// Desabilite instalações de pacotes NuGet paralelas.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_ptb()
        {
            return GetString("InstallCommandDisableParallel_ptb");
        }

        /// <summary>
        /// Отключает параллельную установку пакетов NuGet.
        /// </summary>
        internal static string InstallCommandDisableParallel_rus
        {
            get { return GetString("InstallCommandDisableParallel_rus"); }
        }

        /// <summary>
        /// Отключает параллельную установку пакетов NuGet.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_rus()
        {
            return GetString("InstallCommandDisableParallel_rus");
        }

        /// <summary>
        /// Paralel nuget paketi yüklemelerini devre dışı bırak.
        /// </summary>
        internal static string InstallCommandDisableParallel_trk
        {
            get { return GetString("InstallCommandDisableParallel_trk"); }
        }

        /// <summary>
        /// Paralel nuget paketi yüklemelerini devre dışı bırak.
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_trk()
        {
            return GetString("InstallCommandDisableParallel_trk");
        }

        /// <summary>
        /// 禁止并行 nuget 程序包安装。
        /// </summary>
        internal static string InstallCommandDisableParallel_chs
        {
            get { return GetString("InstallCommandDisableParallel_chs"); }
        }

        /// <summary>
        /// 禁止并行 nuget 程序包安装。
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_chs()
        {
            return GetString("InstallCommandDisableParallel_chs");
        }

        /// <summary>
        /// 停用平行 nuget 封裝安裝。
        /// </summary>
        internal static string InstallCommandDisableParallel_cht
        {
            get { return GetString("InstallCommandDisableParallel_cht"); }
        }

        /// <summary>
        /// 停用平行 nuget 封裝安裝。
        /// </summary>
        internal static string FormatInstallCommandDisableParallel_cht()
        {
            return GetString("InstallCommandDisableParallel_cht");
        }

        /// <summary>
        /// Nastaví atribut minClientVersion pro vytvořený balíček.
        /// </summary>
        internal static string PackageCommandMinClientVersion_csy
        {
            get { return GetString("PackageCommandMinClientVersion_csy"); }
        }

        /// <summary>
        /// Nastaví atribut minClientVersion pro vytvořený balíček.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_csy()
        {
            return GetString("PackageCommandMinClientVersion_csy");
        }

        /// <summary>
        /// Legen Sie das Attribut "minClientVersion" für das erstellte Paket fest.
        /// </summary>
        internal static string PackageCommandMinClientVersion_deu
        {
            get { return GetString("PackageCommandMinClientVersion_deu"); }
        }

        /// <summary>
        /// Legen Sie das Attribut "minClientVersion" für das erstellte Paket fest.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_deu()
        {
            return GetString("PackageCommandMinClientVersion_deu");
        }

        /// <summary>
        /// Establecer el atributo minClientVersion para el paquete creado.
        /// </summary>
        internal static string PackageCommandMinClientVersion_esp
        {
            get { return GetString("PackageCommandMinClientVersion_esp"); }
        }

        /// <summary>
        /// Establecer el atributo minClientVersion para el paquete creado.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_esp()
        {
            return GetString("PackageCommandMinClientVersion_esp");
        }

        /// <summary>
        /// Définissez l'attribut minClientVersion du package créé.
        /// </summary>
        internal static string PackageCommandMinClientVersion_fra
        {
            get { return GetString("PackageCommandMinClientVersion_fra"); }
        }

        /// <summary>
        /// Définissez l'attribut minClientVersion du package créé.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_fra()
        {
            return GetString("PackageCommandMinClientVersion_fra");
        }

        /// <summary>
        /// Imposta l'attributo minClientVersion per il pacchetto creato.
        /// </summary>
        internal static string PackageCommandMinClientVersion_ita
        {
            get { return GetString("PackageCommandMinClientVersion_ita"); }
        }

        /// <summary>
        /// Imposta l'attributo minClientVersion per il pacchetto creato.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_ita()
        {
            return GetString("PackageCommandMinClientVersion_ita");
        }

        /// <summary>
        /// 作成されるパッケージの minClientVersion 属性を設定してください。
        /// </summary>
        internal static string PackageCommandMinClientVersion_jpn
        {
            get { return GetString("PackageCommandMinClientVersion_jpn"); }
        }

        /// <summary>
        /// 作成されるパッケージの minClientVersion 属性を設定してください。
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_jpn()
        {
            return GetString("PackageCommandMinClientVersion_jpn");
        }

        /// <summary>
        /// 만든 패키지에 대해 minClientVersion 특성을 설정합니다.
        /// </summary>
        internal static string PackageCommandMinClientVersion_kor
        {
            get { return GetString("PackageCommandMinClientVersion_kor"); }
        }

        /// <summary>
        /// 만든 패키지에 대해 minClientVersion 특성을 설정합니다.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_kor()
        {
            return GetString("PackageCommandMinClientVersion_kor");
        }

        /// <summary>
        /// Ustaw atrybut minClientVersion dla utworzonego pakietu.
        /// </summary>
        internal static string PackageCommandMinClientVersion_plk
        {
            get { return GetString("PackageCommandMinClientVersion_plk"); }
        }

        /// <summary>
        /// Ustaw atrybut minClientVersion dla utworzonego pakietu.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_plk()
        {
            return GetString("PackageCommandMinClientVersion_plk");
        }

        /// <summary>
        /// Defina o atributo minClientVersion para o pacote criado.
        /// </summary>
        internal static string PackageCommandMinClientVersion_ptb
        {
            get { return GetString("PackageCommandMinClientVersion_ptb"); }
        }

        /// <summary>
        /// Defina o atributo minClientVersion para o pacote criado.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_ptb()
        {
            return GetString("PackageCommandMinClientVersion_ptb");
        }

        /// <summary>
        /// Настройка атрибута minClientVersion для созданного пакета.
        /// </summary>
        internal static string PackageCommandMinClientVersion_rus
        {
            get { return GetString("PackageCommandMinClientVersion_rus"); }
        }

        /// <summary>
        /// Настройка атрибута minClientVersion для созданного пакета.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_rus()
        {
            return GetString("PackageCommandMinClientVersion_rus");
        }

        /// <summary>
        /// Oluşturulan paket için minClientVersion özniteliğini ayarla.
        /// </summary>
        internal static string PackageCommandMinClientVersion_trk
        {
            get { return GetString("PackageCommandMinClientVersion_trk"); }
        }

        /// <summary>
        /// Oluşturulan paket için minClientVersion özniteliğini ayarla.
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_trk()
        {
            return GetString("PackageCommandMinClientVersion_trk");
        }

        /// <summary>
        /// 设置创建的程序包的 minClientVersion 属性。
        /// </summary>
        internal static string PackageCommandMinClientVersion_chs
        {
            get { return GetString("PackageCommandMinClientVersion_chs"); }
        }

        /// <summary>
        /// 设置创建的程序包的 minClientVersion 属性。
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_chs()
        {
            return GetString("PackageCommandMinClientVersion_chs");
        }

        /// <summary>
        /// 為已建立的封裝設定 minClientVersion 屬性。
        /// </summary>
        internal static string PackageCommandMinClientVersion_cht
        {
            get { return GetString("PackageCommandMinClientVersion_cht"); }
        }

        /// <summary>
        /// 為已建立的封裝設定 minClientVersion 屬性。
        /// </summary>
        internal static string FormatPackageCommandMinClientVersion_cht()
        {
            return GetString("PackageCommandMinClientVersion_cht");
        }

        /// <summary>
        /// Zahrne odkazované projekty jako závislosti nebo jako součást balíčku.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_csy
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_csy"); }
        }

        /// <summary>
        /// Zahrne odkazované projekty jako závislosti nebo jako součást balíčku.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_csy()
        {
            return GetString("PackageCommandIncludeReferencedProjects_csy");
        }

        /// <summary>
        /// Projekte, auf die verwiesen wird, als Abhängigkeiten oder Teil des Pakets einschließen.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_deu
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_deu"); }
        }

        /// <summary>
        /// Projekte, auf die verwiesen wird, als Abhängigkeiten oder Teil des Pakets einschließen.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_deu()
        {
            return GetString("PackageCommandIncludeReferencedProjects_deu");
        }

        /// <summary>
        /// Incluir proyectos a los que se hace referencia como dependencias o parte del paquete.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_esp
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_esp"); }
        }

        /// <summary>
        /// Incluir proyectos a los que se hace referencia como dependencias o parte del paquete.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_esp()
        {
            return GetString("PackageCommandIncludeReferencedProjects_esp");
        }

        /// <summary>
        /// Incluez des projets référencés, soit comme dépendances, soit comme éléments du package.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_fra
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_fra"); }
        }

        /// <summary>
        /// Incluez des projets référencés, soit comme dépendances, soit comme éléments du package.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_fra()
        {
            return GetString("PackageCommandIncludeReferencedProjects_fra");
        }

        /// <summary>
        /// Include i progetti di riferimento come dipendenze o parte del pacchetto.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_ita
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_ita"); }
        }

        /// <summary>
        /// Include i progetti di riferimento come dipendenze o parte del pacchetto.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_ita()
        {
            return GetString("PackageCommandIncludeReferencedProjects_ita");
        }

        /// <summary>
        /// 依存関係またはパッケージの一部として、参照されているプロジェクトを含めてください。
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_jpn
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_jpn"); }
        }

        /// <summary>
        /// 依存関係またはパッケージの一部として、参照されているプロジェクトを含めてください。
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_jpn()
        {
            return GetString("PackageCommandIncludeReferencedProjects_jpn");
        }

        /// <summary>
        /// 참조된 프로젝트를 종속성 또는 패키지의 일부로 포함합니다.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_kor
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_kor"); }
        }

        /// <summary>
        /// 참조된 프로젝트를 종속성 또는 패키지의 일부로 포함합니다.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_kor()
        {
            return GetString("PackageCommandIncludeReferencedProjects_kor");
        }

        /// <summary>
        /// Uwzględnij przywoływane projekty jako zależności lub jako części pakietu.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_plk
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_plk"); }
        }

        /// <summary>
        /// Uwzględnij przywoływane projekty jako zależności lub jako części pakietu.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_plk()
        {
            return GetString("PackageCommandIncludeReferencedProjects_plk");
        }

        /// <summary>
        /// Inclua projetos referenciados como dependências ou como parte do pacote.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_ptb
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_ptb"); }
        }

        /// <summary>
        /// Inclua projetos referenciados como dependências ou como parte do pacote.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_ptb()
        {
            return GetString("PackageCommandIncludeReferencedProjects_ptb");
        }

        /// <summary>
        /// Добавляет указанные по ссылкам проекты в качестве зависимостей или части проекта.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_rus
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_rus"); }
        }

        /// <summary>
        /// Добавляет указанные по ссылкам проекты в качестве зависимостей или части проекта.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_rus()
        {
            return GetString("PackageCommandIncludeReferencedProjects_rus");
        }

        /// <summary>
        /// Başvurulan projeleri bağımlılık veya paketin bir parçası olarak dahil et.
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_trk
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_trk"); }
        }

        /// <summary>
        /// Başvurulan projeleri bağımlılık veya paketin bir parçası olarak dahil et.
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_trk()
        {
            return GetString("PackageCommandIncludeReferencedProjects_trk");
        }

        /// <summary>
        /// 包括作为依赖项或作为程序包的一部分的引用项目。
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_chs
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_chs"); }
        }

        /// <summary>
        /// 包括作为依赖项或作为程序包的一部分的引用项目。
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_chs()
        {
            return GetString("PackageCommandIncludeReferencedProjects_chs");
        }

        /// <summary>
        /// 包含做為相依項或部份封裝的已參照專案。
        /// </summary>
        internal static string PackageCommandIncludeReferencedProjects_cht
        {
            get { return GetString("PackageCommandIncludeReferencedProjects_cht"); }
        }

        /// <summary>
        /// 包含做為相依項或部份封裝的已參照專案。
        /// </summary>
        internal static string FormatPackageCommandIncludeReferencedProjects_cht()
        {
            return GetString("PackageCommandIncludeReferencedProjects_cht");
        }

        /// <summary>
        /// Nastaví výchozí akci, pokud soubor z balíčku již existuje v cílovém projektu. Chcete-li vždy přepisovat soubory, nastavte možnost Overwrite. Chcete-li soubory přeskočit, nastavte možnost Ignore. Pokud možnost není zadána, zobrazí se výzva pro každý konfliktní soubor.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_csy
        {
            get { return GetString("UpdateCommandFileConflictAction_csy"); }
        }

        /// <summary>
        /// Nastaví výchozí akci, pokud soubor z balíčku již existuje v cílovém projektu. Chcete-li vždy přepisovat soubory, nastavte možnost Overwrite. Chcete-li soubory přeskočit, nastavte možnost Ignore. Pokud možnost není zadána, zobrazí se výzva pro každý konfliktní soubor.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_csy()
        {
            return GetString("UpdateCommandFileConflictAction_csy");
        }

        /// <summary>
        /// Legt die Standardaktion fest, wenn eine Datei aus einem Paket bereits im Zielprojekt vorhanden ist. Legen Sie den Wert auf "Overwrite" fest, um Dateien immer zu überschreiben. Legen Sie den Wert auf "Ignore" fest, um Dateien zu überspringen. Wenn keine Angabe erfolgt, wird eine Eingabeaufforderung für jede Datei angezeigt, die einen Konflikt verursacht.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_deu
        {
            get { return GetString("UpdateCommandFileConflictAction_deu"); }
        }

        /// <summary>
        /// Legt die Standardaktion fest, wenn eine Datei aus einem Paket bereits im Zielprojekt vorhanden ist. Legen Sie den Wert auf "Overwrite" fest, um Dateien immer zu überschreiben. Legen Sie den Wert auf "Ignore" fest, um Dateien zu überspringen. Wenn keine Angabe erfolgt, wird eine Eingabeaufforderung für jede Datei angezeigt, die einen Konflikt verursacht.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_deu()
        {
            return GetString("UpdateCommandFileConflictAction_deu");
        }

        /// <summary>
        /// Establecer una acción predeterminada cuando un archivo de un paquete ya exista en el proyecto de destino. Establecer a Overwrite para reemplazar siempre los archivos. Establecer a Ignore para omitir los archivos. Si no se especifica, pedirá confirmación para cada archivo conflictivo.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_esp
        {
            get { return GetString("UpdateCommandFileConflictAction_esp"); }
        }

        /// <summary>
        /// Establecer una acción predeterminada cuando un archivo de un paquete ya exista en el proyecto de destino. Establecer a Overwrite para reemplazar siempre los archivos. Establecer a Ignore para omitir los archivos. Si no se especifica, pedirá confirmación para cada archivo conflictivo.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_esp()
        {
            return GetString("UpdateCommandFileConflictAction_esp");
        }

        /// <summary>
        /// Définissez l'action par défaut lorsqu'un fichier du package existe déjà dans le projet cible. Affectez la valeur Overwrite pour remplacer systématiquement les fichiers. Affectez la valeur Ignore pour ignorer les fichiers. En l'absence de spécification, une invite s'affichera pour chaque fichier provoquant un conflit.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_fra
        {
            get { return GetString("UpdateCommandFileConflictAction_fra"); }
        }

        /// <summary>
        /// Définissez l'action par défaut lorsqu'un fichier du package existe déjà dans le projet cible. Affectez la valeur Overwrite pour remplacer systématiquement les fichiers. Affectez la valeur Ignore pour ignorer les fichiers. En l'absence de spécification, une invite s'affichera pour chaque fichier provoquant un conflit.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_fra()
        {
            return GetString("UpdateCommandFileConflictAction_fra");
        }

        /// <summary>
        /// Impostare azione di default quando esiste già un file da un pacchetto. Impostare su Overwrite per sovrascrivere il file. Impostare su Ignore per saltare il file. Se non specificato, richiederà per ogni file in conflitto.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_ita
        {
            get { return GetString("UpdateCommandFileConflictAction_ita"); }
        }

        /// <summary>
        /// Impostare azione di default quando esiste già un file da un pacchetto. Impostare su Overwrite per sovrascrivere il file. Impostare su Ignore per saltare il file. Se non specificato, richiederà per ogni file in conflitto.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_ita()
        {
            return GetString("UpdateCommandFileConflictAction_ita");
        }

        /// <summary>
        /// パッケージのファイルがターゲット プロジェクトに既に存在する場合の既定のアクションを設定します。常にファイルを上書きするには、Overwrite に設定します。ファイルをスキップするには、Ignore に設定します。指定しない場合、競合するファイルごとにプロンプトが表示されます。
        /// </summary>
        internal static string UpdateCommandFileConflictAction_jpn
        {
            get { return GetString("UpdateCommandFileConflictAction_jpn"); }
        }

        /// <summary>
        /// パッケージのファイルがターゲット プロジェクトに既に存在する場合の既定のアクションを設定します。常にファイルを上書きするには、Overwrite に設定します。ファイルをスキップするには、Ignore に設定します。指定しない場合、競合するファイルごとにプロンプトが表示されます。
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_jpn()
        {
            return GetString("UpdateCommandFileConflictAction_jpn");
        }

        /// <summary>
        /// 패키지의 파일이 대상 프로젝트에 이미 있는 경우의 기본 동작을 설정합니다. 파일을 항상 덮어쓰려면 Overwrite로 설정합니다. 파일을 건너뛰려면 Ignore로 설정합니다. 지정되지 않은 경우 충돌하는 각 파일에 대한 메시지를 표시합니다.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_kor
        {
            get { return GetString("UpdateCommandFileConflictAction_kor"); }
        }

        /// <summary>
        /// 패키지의 파일이 대상 프로젝트에 이미 있는 경우의 기본 동작을 설정합니다. 파일을 항상 덮어쓰려면 Overwrite로 설정합니다. 파일을 건너뛰려면 Ignore로 설정합니다. 지정되지 않은 경우 충돌하는 각 파일에 대한 메시지를 표시합니다.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_kor()
        {
            return GetString("UpdateCommandFileConflictAction_kor");
        }

        /// <summary>
        /// Ustaw domyślną akcję, jeśli plik z pakietu istnieje już w projekcie docelowym. Ustaw wartość Overwrite, aby zawsze zastępować pliki. Ustaw wartość Ignore, aby pomijać pliki. Jeśli akcja nie zostanie określona, dla każdego pliku powodującego konflikt będzie wyświetlany monit.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_plk
        {
            get { return GetString("UpdateCommandFileConflictAction_plk"); }
        }

        /// <summary>
        /// Ustaw domyślną akcję, jeśli plik z pakietu istnieje już w projekcie docelowym. Ustaw wartość Overwrite, aby zawsze zastępować pliki. Ustaw wartość Ignore, aby pomijać pliki. Jeśli akcja nie zostanie określona, dla każdego pliku powodującego konflikt będzie wyświetlany monit.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_plk()
        {
            return GetString("UpdateCommandFileConflictAction_plk");
        }

        /// <summary>
        /// Defina a ação padrão quando um arquivo de um pacote já existir no projeto de destino. Defina para Overwrite para sempre substituir arquivos. Defina para Ignore para ignorar arquivos. Se não for especificado, ele avisará sobre cada arquivo conflitante.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_ptb
        {
            get { return GetString("UpdateCommandFileConflictAction_ptb"); }
        }

        /// <summary>
        /// Defina a ação padrão quando um arquivo de um pacote já existir no projeto de destino. Defina para Overwrite para sempre substituir arquivos. Defina para Ignore para ignorar arquivos. Se não for especificado, ele avisará sobre cada arquivo conflitante.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_ptb()
        {
            return GetString("UpdateCommandFileConflictAction_ptb");
        }

        /// <summary>
        /// Задайте действие по умолчанию, которое выполняется, если файл из пакета уже существует в целевом проекте. Если указать значение "Overwrite", файлы всегда будут перезаписываться. Если указать значение "Ignore", файлы будут пропускаться. Если значение не указать, для каждого конфликтного файла будет отображен запрос действия.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_rus
        {
            get { return GetString("UpdateCommandFileConflictAction_rus"); }
        }

        /// <summary>
        /// Задайте действие по умолчанию, которое выполняется, если файл из пакета уже существует в целевом проекте. Если указать значение "Overwrite", файлы всегда будут перезаписываться. Если указать значение "Ignore", файлы будут пропускаться. Если значение не указать, для каждого конфликтного файла будет отображен запрос действия.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_rus()
        {
            return GetString("UpdateCommandFileConflictAction_rus");
        }

        /// <summary>
        /// Paketteki bir dosya hedef projede zaten mevcutsa uygulanacak varsayılan eylemi ayarlayın. Dosyaların her zaman geçersiz kılınması için Overwrite seçimin belirtin. Dosyaların atlanması için Ignore seçimin belirtin. Hiçbiri belirtilmemişse, çakışan her dosya için ne yapılacağını sorar.
        /// </summary>
        internal static string UpdateCommandFileConflictAction_trk
        {
            get { return GetString("UpdateCommandFileConflictAction_trk"); }
        }

        /// <summary>
        /// Paketteki bir dosya hedef projede zaten mevcutsa uygulanacak varsayılan eylemi ayarlayın. Dosyaların her zaman geçersiz kılınması için Overwrite seçimin belirtin. Dosyaların atlanması için Ignore seçimin belirtin. Hiçbiri belirtilmemişse, çakışan her dosya için ne yapılacağını sorar.
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_trk()
        {
            return GetString("UpdateCommandFileConflictAction_trk");
        }

        /// <summary>
        /// 设置当程序包中的文件已在目标项目中存在时的默认操作。设置为 "Overwrite" 可始终覆盖文件。设置为 "Ignore" 可跳过文件。如果未指定，则它将提示每个存在冲突的文件。
        /// </summary>
        internal static string UpdateCommandFileConflictAction_chs
        {
            get { return GetString("UpdateCommandFileConflictAction_chs"); }
        }

        /// <summary>
        /// 设置当程序包中的文件已在目标项目中存在时的默认操作。设置为 "Overwrite" 可始终覆盖文件。设置为 "Ignore" 可跳过文件。如果未指定，则它将提示每个存在冲突的文件。
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_chs()
        {
            return GetString("UpdateCommandFileConflictAction_chs");
        }

        /// <summary>
        /// 當封裝檔案已存在於目標專案時，設定預設動作。設定為 Overwrite 一律覆寫檔案。設定為 Ignore 以略過檔案。若未指定，則會提示每個衝突的檔案。
        /// </summary>
        internal static string UpdateCommandFileConflictAction_cht
        {
            get { return GetString("UpdateCommandFileConflictAction_cht"); }
        }

        /// <summary>
        /// 當封裝檔案已存在於目標專案時，設定預設動作。設定為 Overwrite 一律覆寫檔案。設定為 Ignore 以略過檔案。若未指定，則會提示每個衝突的檔案。
        /// </summary>
        internal static string FormatUpdateCommandFileConflictAction_cht()
        {
            return GetString("UpdateCommandFileConflictAction_cht");
        }

        /// <summary>
        /// Umožňuje uložení přihlašovacích údajů zdroje přenosného balíčku, a to zákazem šifrování hesel.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_csy
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_csy"); }
        }

        /// <summary>
        /// Umožňuje uložení přihlašovacích údajů zdroje přenosného balíčku, a to zákazem šifrování hesel.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_csy()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_csy");
        }

        /// <summary>
        /// Ermöglicht das Speichern der Anmeldeinformationen der portablen Paketquelle durch Deaktivieren von Kennwortverschlüsselung.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_deu
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_deu"); }
        }

        /// <summary>
        /// Ermöglicht das Speichern der Anmeldeinformationen der portablen Paketquelle durch Deaktivieren von Kennwortverschlüsselung.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_deu()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_deu");
        }

        /// <summary>
        /// Habilita el almacenamiento de las credenciales de origen del paquete portátil deshabilitando el cifrado de la contraseña.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_esp
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_esp"); }
        }

        /// <summary>
        /// Habilita el almacenamiento de las credenciales de origen del paquete portátil deshabilitando el cifrado de la contraseña.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_esp()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_esp");
        }

        /// <summary>
        /// Active les informations d'identification de la source du package portable de stockage en désactivant le chiffrement de mot de passe.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_fra
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_fra"); }
        }

        /// <summary>
        /// Active les informations d'identification de la source du package portable de stockage en désactivant le chiffrement de mot de passe.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_fra()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_fra");
        }

        /// <summary>
        /// Permette di immagazzinare le credenziali della fonte disabilitando il criptaggio della password.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_ita
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_ita"); }
        }

        /// <summary>
        /// Permette di immagazzinare le credenziali della fonte disabilitando il criptaggio della password.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_ita()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_ita");
        }

        /// <summary>
        /// パスワードの暗号化を無効にして、ポータブル パッケージ ソースの資格情報の保存を有効にします。
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_jpn
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_jpn"); }
        }

        /// <summary>
        /// パスワードの暗号化を無効にして、ポータブル パッケージ ソースの資格情報の保存を有効にします。
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_jpn()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_jpn");
        }

        /// <summary>
        /// 암호의 암호화를 사용하지 않도록 설정하여 휴대용 패키지 소스 자격 증명을 저장할 수 있도록 합니다.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_kor
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_kor"); }
        }

        /// <summary>
        /// 암호의 암호화를 사용하지 않도록 설정하여 휴대용 패키지 소스 자격 증명을 저장할 수 있도록 합니다.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_kor()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_kor");
        }

        /// <summary>
        /// Umożliwia przechowywanie poświadczeń przenośnego źródła pakietów, wyłączając szyfrowanie haseł.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_plk
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_plk"); }
        }

        /// <summary>
        /// Umożliwia przechowywanie poświadczeń przenośnego źródła pakietów, wyłączając szyfrowanie haseł.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_plk()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_plk");
        }

        /// <summary>
        /// Ativa as credenciais de origem do pacote portátil de armazenamento desativando a criptografia de senha.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_ptb
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_ptb"); }
        }

        /// <summary>
        /// Ativa as credenciais de origem do pacote portátil de armazenamento desativando a criptografia de senha.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_ptb()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_ptb");
        }

        /// <summary>
        /// Позволяет хранить переносимые учетные данные источника пакетов посредством отключения шифрования пароля.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_rus
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_rus"); }
        }

        /// <summary>
        /// Позволяет хранить переносимые учетные данные источника пакетов посредством отключения шифрования пароля.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_rus()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_rus");
        }

        /// <summary>
        /// Parola şifrelemesini devre dışı bırakarak taşınabilir paket kaynağı kimlik bilgilerinin saklanmasını sağlar.
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_trk
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_trk"); }
        }

        /// <summary>
        /// Parola şifrelemesini devre dışı bırakarak taşınabilir paket kaynağı kimlik bilgilerinin saklanmasını sağlar.
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_trk()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_trk");
        }

        /// <summary>
        /// 通过禁用密码加密来允许存储可移植程序包源凭据。
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_chs
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_chs"); }
        }

        /// <summary>
        /// 通过禁用密码加密来允许存储可移植程序包源凭据。
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_chs()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_chs");
        }

        /// <summary>
        /// 以停用密碼加密的方式來啟用儲存可攜式封裝來源認證。
        /// </summary>
        internal static string SourcesCommandStorePasswordInClearTextDescription_cht
        {
            get { return GetString("SourcesCommandStorePasswordInClearTextDescription_cht"); }
        }

        /// <summary>
        /// 以停用密碼加密的方式來啟用儲存可攜式封裝來源認證。
        /// </summary>
        internal static string FormatSourcesCommandStorePasswordInClearTextDescription_cht()
        {
            return GetString("SourcesCommandStorePasswordInClearTextDescription_cht");
        }

        /// <summary>
        /// Obnoví balíčky NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_csy
        {
            get { return GetString("RestoreCommandDescription_csy"); }
        }

        /// <summary>
        /// Obnoví balíčky NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_csy()
        {
            return GetString("RestoreCommandDescription_csy");
        }

        /// <summary>
        /// Stellt NuGet-Pakete wieder her.
        /// </summary>
        internal static string RestoreCommandDescription_deu
        {
            get { return GetString("RestoreCommandDescription_deu"); }
        }

        /// <summary>
        /// Stellt NuGet-Pakete wieder her.
        /// </summary>
        internal static string FormatRestoreCommandDescription_deu()
        {
            return GetString("RestoreCommandDescription_deu");
        }

        /// <summary>
        /// Restaura los paquetes NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_esp
        {
            get { return GetString("RestoreCommandDescription_esp"); }
        }

        /// <summary>
        /// Restaura los paquetes NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_esp()
        {
            return GetString("RestoreCommandDescription_esp");
        }

        /// <summary>
        /// Restaure les packages NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_fra
        {
            get { return GetString("RestoreCommandDescription_fra"); }
        }

        /// <summary>
        /// Restaure les packages NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_fra()
        {
            return GetString("RestoreCommandDescription_fra");
        }

        /// <summary>
        /// Ripristina pacchetti NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_ita
        {
            get { return GetString("RestoreCommandDescription_ita"); }
        }

        /// <summary>
        /// Ripristina pacchetti NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_ita()
        {
            return GetString("RestoreCommandDescription_ita");
        }

        /// <summary>
        /// NuGet パッケージを復元します。
        /// </summary>
        internal static string RestoreCommandDescription_jpn
        {
            get { return GetString("RestoreCommandDescription_jpn"); }
        }

        /// <summary>
        /// NuGet パッケージを復元します。
        /// </summary>
        internal static string FormatRestoreCommandDescription_jpn()
        {
            return GetString("RestoreCommandDescription_jpn");
        }

        /// <summary>
        /// NuGet 패키지를 복원합니다.
        /// </summary>
        internal static string RestoreCommandDescription_kor
        {
            get { return GetString("RestoreCommandDescription_kor"); }
        }

        /// <summary>
        /// NuGet 패키지를 복원합니다.
        /// </summary>
        internal static string FormatRestoreCommandDescription_kor()
        {
            return GetString("RestoreCommandDescription_kor");
        }

        /// <summary>
        /// Przywraca pakiety NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_plk
        {
            get { return GetString("RestoreCommandDescription_plk"); }
        }

        /// <summary>
        /// Przywraca pakiety NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_plk()
        {
            return GetString("RestoreCommandDescription_plk");
        }

        /// <summary>
        /// Restaura os pacotes NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_ptb
        {
            get { return GetString("RestoreCommandDescription_ptb"); }
        }

        /// <summary>
        /// Restaura os pacotes NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_ptb()
        {
            return GetString("RestoreCommandDescription_ptb");
        }

        /// <summary>
        /// Восстанавливает пакеты NuGet.
        /// </summary>
        internal static string RestoreCommandDescription_rus
        {
            get { return GetString("RestoreCommandDescription_rus"); }
        }

        /// <summary>
        /// Восстанавливает пакеты NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDescription_rus()
        {
            return GetString("RestoreCommandDescription_rus");
        }

        /// <summary>
        /// NuGet paketlerini geri yükler.
        /// </summary>
        internal static string RestoreCommandDescription_trk
        {
            get { return GetString("RestoreCommandDescription_trk"); }
        }

        /// <summary>
        /// NuGet paketlerini geri yükler.
        /// </summary>
        internal static string FormatRestoreCommandDescription_trk()
        {
            return GetString("RestoreCommandDescription_trk");
        }

        /// <summary>
        /// 还原 NuGet 程序包。
        /// </summary>
        internal static string RestoreCommandDescription_chs
        {
            get { return GetString("RestoreCommandDescription_chs"); }
        }

        /// <summary>
        /// 还原 NuGet 程序包。
        /// </summary>
        internal static string FormatRestoreCommandDescription_chs()
        {
            return GetString("RestoreCommandDescription_chs");
        }

        /// <summary>
        /// 還原 NuGet 封裝。
        /// </summary>
        internal static string RestoreCommandDescription_cht
        {
            get { return GetString("RestoreCommandDescription_cht"); }
        }

        /// <summary>
        /// 還原 NuGet 封裝。
        /// </summary>
        internal static string FormatRestoreCommandDescription_cht()
        {
            return GetString("RestoreCommandDescription_cht");
        }

        /// <summary>
        /// Zakáže obnovení paralelních balíčků nuget.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_csy
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_csy"); }
        }

        /// <summary>
        /// Zakáže obnovení paralelních balíčků nuget.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_csy()
        {
            return GetString("RestoreCommandDisableParallelProcessing_csy");
        }

        /// <summary>
        /// Parallele nuget-Paketwiederherstllungen deaktivieren.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_deu
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_deu"); }
        }

        /// <summary>
        /// Parallele nuget-Paketwiederherstllungen deaktivieren.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_deu()
        {
            return GetString("RestoreCommandDisableParallelProcessing_deu");
        }

        /// <summary>
        /// Deshabilitar las restauraciones del paquete nuget en paralelo.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_esp
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_esp"); }
        }

        /// <summary>
        /// Deshabilitar las restauraciones del paquete nuget en paralelo.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_esp()
        {
            return GetString("RestoreCommandDisableParallelProcessing_esp");
        }

        /// <summary>
        /// Désactivez les restaurations du package nuget parallèle.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_fra
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_fra"); }
        }

        /// <summary>
        /// Désactivez les restaurations du package nuget parallèle.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_fra()
        {
            return GetString("RestoreCommandDisableParallelProcessing_fra");
        }

        /// <summary>
        /// Disailita  il ripristino parallel nuget package.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_ita
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_ita"); }
        }

        /// <summary>
        /// Disailita  il ripristino parallel nuget package.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_ita()
        {
            return GetString("RestoreCommandDisableParallelProcessing_ita");
        }

        /// <summary>
        /// nuget パッケージの並列復元を無効にします。
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_jpn
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_jpn"); }
        }

        /// <summary>
        /// nuget パッケージの並列復元を無効にします。
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_jpn()
        {
            return GetString("RestoreCommandDisableParallelProcessing_jpn");
        }

        /// <summary>
        /// 병렬 nuget 패키지 복원을 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_kor
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_kor"); }
        }

        /// <summary>
        /// 병렬 nuget 패키지 복원을 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_kor()
        {
            return GetString("RestoreCommandDisableParallelProcessing_kor");
        }

        /// <summary>
        /// Wyłącz równoległe przywracanie pakietów NuGet.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_plk
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_plk"); }
        }

        /// <summary>
        /// Wyłącz równoległe przywracanie pakietów NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_plk()
        {
            return GetString("RestoreCommandDisableParallelProcessing_plk");
        }

        /// <summary>
        /// Desative as restaurações do pacote nuget paralelo.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_ptb
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_ptb"); }
        }

        /// <summary>
        /// Desative as restaurações do pacote nuget paralelo.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_ptb()
        {
            return GetString("RestoreCommandDisableParallelProcessing_ptb");
        }

        /// <summary>
        /// Отключает параллельное восстановление пакетов NuGet.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_rus
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_rus"); }
        }

        /// <summary>
        /// Отключает параллельное восстановление пакетов NuGet.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_rus()
        {
            return GetString("RestoreCommandDisableParallelProcessing_rus");
        }

        /// <summary>
        /// Paralel nuget paketi geri yüklemelerini devre dışı bırak.
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_trk
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_trk"); }
        }

        /// <summary>
        /// Paralel nuget paketi geri yüklemelerini devre dışı bırak.
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_trk()
        {
            return GetString("RestoreCommandDisableParallelProcessing_trk");
        }

        /// <summary>
        /// 禁止并行 nuget 程序包还原。
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_chs
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_chs"); }
        }

        /// <summary>
        /// 禁止并行 nuget 程序包还原。
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_chs()
        {
            return GetString("RestoreCommandDisableParallelProcessing_chs");
        }

        /// <summary>
        /// 停用平行 nuget 封裝還原。
        /// </summary>
        internal static string RestoreCommandDisableParallelProcessing_cht
        {
            get { return GetString("RestoreCommandDisableParallelProcessing_cht"); }
        }

        /// <summary>
        /// 停用平行 nuget 封裝還原。
        /// </summary>
        internal static string FormatRestoreCommandDisableParallelProcessing_cht()
        {
            return GetString("RestoreCommandDisableParallelProcessing_cht");
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string RestoreCommandNoCache_csy
        {
            get { return GetString("RestoreCommandNoCache_csy"); }
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_csy()
        {
            return GetString("RestoreCommandNoCache_csy");
        }

        /// <summary>
        /// Verwendung des Computercaches als erste Paketquelle deaktivieren.
        /// </summary>
        internal static string RestoreCommandNoCache_deu
        {
            get { return GetString("RestoreCommandNoCache_deu"); }
        }

        /// <summary>
        /// Verwendung des Computercaches als erste Paketquelle deaktivieren.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_deu()
        {
            return GetString("RestoreCommandNoCache_deu");
        }

        /// <summary>
        /// Deshabilitar el uso del caché de máquina como origen del primer paquete.
        /// </summary>
        internal static string RestoreCommandNoCache_esp
        {
            get { return GetString("RestoreCommandNoCache_esp"); }
        }

        /// <summary>
        /// Deshabilitar el uso del caché de máquina como origen del primer paquete.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_esp()
        {
            return GetString("RestoreCommandNoCache_esp");
        }

        /// <summary>
        /// Désactivation grâce au cache de l'ordinateur, agissant comme première source du package.
        /// </summary>
        internal static string RestoreCommandNoCache_fra
        {
            get { return GetString("RestoreCommandNoCache_fra"); }
        }

        /// <summary>
        /// Désactivation grâce au cache de l'ordinateur, agissant comme première source du package.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_fra()
        {
            return GetString("RestoreCommandNoCache_fra");
        }

        /// <summary>
        /// Disablita usando la cache della macchina come prima fonte del pacchetto.
        /// </summary>
        internal static string RestoreCommandNoCache_ita
        {
            get { return GetString("RestoreCommandNoCache_ita"); }
        }

        /// <summary>
        /// Disablita usando la cache della macchina come prima fonte del pacchetto.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_ita()
        {
            return GetString("RestoreCommandNoCache_ita");
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてのコンピューター キャッシュの使用を無効にします。
        /// </summary>
        internal static string RestoreCommandNoCache_jpn
        {
            get { return GetString("RestoreCommandNoCache_jpn"); }
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてのコンピューター キャッシュの使用を無効にします。
        /// </summary>
        internal static string FormatRestoreCommandNoCache_jpn()
        {
            return GetString("RestoreCommandNoCache_jpn");
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string RestoreCommandNoCache_kor
        {
            get { return GetString("RestoreCommandNoCache_kor"); }
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_kor()
        {
            return GetString("RestoreCommandNoCache_kor");
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string RestoreCommandNoCache_plk
        {
            get { return GetString("RestoreCommandNoCache_plk"); }
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_plk()
        {
            return GetString("RestoreCommandNoCache_plk");
        }

        /// <summary>
        /// Desative usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string RestoreCommandNoCache_ptb
        {
            get { return GetString("RestoreCommandNoCache_ptb"); }
        }

        /// <summary>
        /// Desative usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_ptb()
        {
            return GetString("RestoreCommandNoCache_ptb");
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string RestoreCommandNoCache_rus
        {
            get { return GetString("RestoreCommandNoCache_rus"); }
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_rus()
        {
            return GetString("RestoreCommandNoCache_rus");
        }

        /// <summary>
        /// Birinci paket kaynağı olarak makine önbelleğinin kullanılmasını devre dışı bırak.
        /// </summary>
        internal static string RestoreCommandNoCache_trk
        {
            get { return GetString("RestoreCommandNoCache_trk"); }
        }

        /// <summary>
        /// Birinci paket kaynağı olarak makine önbelleğinin kullanılmasını devre dışı bırak.
        /// </summary>
        internal static string FormatRestoreCommandNoCache_trk()
        {
            return GetString("RestoreCommandNoCache_trk");
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string RestoreCommandNoCache_chs
        {
            get { return GetString("RestoreCommandNoCache_chs"); }
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string FormatRestoreCommandNoCache_chs()
        {
            return GetString("RestoreCommandNoCache_chs");
        }

        /// <summary>
        /// 停用使用機器快取做為第一個封裝來源。
        /// </summary>
        internal static string RestoreCommandNoCache_cht
        {
            get { return GetString("RestoreCommandNoCache_cht"); }
        }

        /// <summary>
        /// 停用使用機器快取做為第一個封裝來源。
        /// </summary>
        internal static string FormatRestoreCommandNoCache_cht()
        {
            return GetString("RestoreCommandNoCache_cht");
        }

        /// <summary>
        /// Určuje složku balíčků.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_csy
        {
            get { return GetString("RestoreCommandPackagesDirectory_csy"); }
        }

        /// <summary>
        /// Určuje složku balíčků.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_csy()
        {
            return GetString("RestoreCommandPackagesDirectory_csy");
        }

        /// <summary>
        /// Gibt den Paketordner an.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_deu
        {
            get { return GetString("RestoreCommandPackagesDirectory_deu"); }
        }

        /// <summary>
        /// Gibt den Paketordner an.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_deu()
        {
            return GetString("RestoreCommandPackagesDirectory_deu");
        }

        /// <summary>
        /// Especifica la carpeta de los paquetes.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_esp
        {
            get { return GetString("RestoreCommandPackagesDirectory_esp"); }
        }

        /// <summary>
        /// Especifica la carpeta de los paquetes.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_esp()
        {
            return GetString("RestoreCommandPackagesDirectory_esp");
        }

        /// <summary>
        /// Spécifie le dossier des packages.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_fra
        {
            get { return GetString("RestoreCommandPackagesDirectory_fra"); }
        }

        /// <summary>
        /// Spécifie le dossier des packages.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_fra()
        {
            return GetString("RestoreCommandPackagesDirectory_fra");
        }

        /// <summary>
        /// Specifica la cartella pacchetto.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_ita
        {
            get { return GetString("RestoreCommandPackagesDirectory_ita"); }
        }

        /// <summary>
        /// Specifica la cartella pacchetto.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_ita()
        {
            return GetString("RestoreCommandPackagesDirectory_ita");
        }

        /// <summary>
        /// パッケージ フォルダーを指定します。
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_jpn
        {
            get { return GetString("RestoreCommandPackagesDirectory_jpn"); }
        }

        /// <summary>
        /// パッケージ フォルダーを指定します。
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_jpn()
        {
            return GetString("RestoreCommandPackagesDirectory_jpn");
        }

        /// <summary>
        /// 패키지 폴더를 지정합니다.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_kor
        {
            get { return GetString("RestoreCommandPackagesDirectory_kor"); }
        }

        /// <summary>
        /// 패키지 폴더를 지정합니다.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_kor()
        {
            return GetString("RestoreCommandPackagesDirectory_kor");
        }

        /// <summary>
        /// Określa folder pakietów.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_plk
        {
            get { return GetString("RestoreCommandPackagesDirectory_plk"); }
        }

        /// <summary>
        /// Określa folder pakietów.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_plk()
        {
            return GetString("RestoreCommandPackagesDirectory_plk");
        }

        /// <summary>
        /// Especifica a pasta de pacotes.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_ptb
        {
            get { return GetString("RestoreCommandPackagesDirectory_ptb"); }
        }

        /// <summary>
        /// Especifica a pasta de pacotes.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_ptb()
        {
            return GetString("RestoreCommandPackagesDirectory_ptb");
        }

        /// <summary>
        /// Указывает папку пакетов.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_rus
        {
            get { return GetString("RestoreCommandPackagesDirectory_rus"); }
        }

        /// <summary>
        /// Указывает папку пакетов.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_rus()
        {
            return GetString("RestoreCommandPackagesDirectory_rus");
        }

        /// <summary>
        /// Paket klasörünü belirtir.
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_trk
        {
            get { return GetString("RestoreCommandPackagesDirectory_trk"); }
        }

        /// <summary>
        /// Paket klasörünü belirtir.
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_trk()
        {
            return GetString("RestoreCommandPackagesDirectory_trk");
        }

        /// <summary>
        /// 指定程序包文件夹。
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_chs
        {
            get { return GetString("RestoreCommandPackagesDirectory_chs"); }
        }

        /// <summary>
        /// 指定程序包文件夹。
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_chs()
        {
            return GetString("RestoreCommandPackagesDirectory_chs");
        }

        /// <summary>
        /// 指定封裝資料夾。
        /// </summary>
        internal static string RestoreCommandPackagesDirectory_cht
        {
            get { return GetString("RestoreCommandPackagesDirectory_cht"); }
        }

        /// <summary>
        /// 指定封裝資料夾。
        /// </summary>
        internal static string FormatRestoreCommandPackagesDirectory_cht()
        {
            return GetString("RestoreCommandPackagesDirectory_cht");
        }

        /// <summary>
        /// Před zahájením instalace balíčku ověří, zda je udělen souhlas s obnovením tohoto balíčku.
        /// </summary>
        internal static string RestoreCommandRequireConsent_csy
        {
            get { return GetString("RestoreCommandRequireConsent_csy"); }
        }

        /// <summary>
        /// Před zahájením instalace balíčku ověří, zda je udělen souhlas s obnovením tohoto balíčku.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_csy()
        {
            return GetString("RestoreCommandRequireConsent_csy");
        }

        /// <summary>
        /// Überprüft, ob die Zustimmung zur Paketwiederherstellung erteilt wurde, bevor ein Paket installiert wird.
        /// </summary>
        internal static string RestoreCommandRequireConsent_deu
        {
            get { return GetString("RestoreCommandRequireConsent_deu"); }
        }

        /// <summary>
        /// Überprüft, ob die Zustimmung zur Paketwiederherstellung erteilt wurde, bevor ein Paket installiert wird.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_deu()
        {
            return GetString("RestoreCommandRequireConsent_deu");
        }

        /// <summary>
        /// Comprueba si se concede consentimiento de restauración del paquete antes de instalar un paquete.
        /// </summary>
        internal static string RestoreCommandRequireConsent_esp
        {
            get { return GetString("RestoreCommandRequireConsent_esp"); }
        }

        /// <summary>
        /// Comprueba si se concede consentimiento de restauración del paquete antes de instalar un paquete.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_esp()
        {
            return GetString("RestoreCommandRequireConsent_esp");
        }

        /// <summary>
        /// Vérifie si l'accord de restauration du package est donné avant d'installer le package.
        /// </summary>
        internal static string RestoreCommandRequireConsent_fra
        {
            get { return GetString("RestoreCommandRequireConsent_fra"); }
        }

        /// <summary>
        /// Vérifie si l'accord de restauration du package est donné avant d'installer le package.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_fra()
        {
            return GetString("RestoreCommandRequireConsent_fra");
        }

        /// <summary>
        /// Verificare che sia garantito il consenso al ripristino prima di installare il pacchetto.
        /// </summary>
        internal static string RestoreCommandRequireConsent_ita
        {
            get { return GetString("RestoreCommandRequireConsent_ita"); }
        }

        /// <summary>
        /// Verificare che sia garantito il consenso al ripristino prima di installare il pacchetto.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_ita()
        {
            return GetString("RestoreCommandRequireConsent_ita");
        }

        /// <summary>
        /// パッケージをインストールする前に、パッケージの復元が同意されているかどうかを確認します。
        /// </summary>
        internal static string RestoreCommandRequireConsent_jpn
        {
            get { return GetString("RestoreCommandRequireConsent_jpn"); }
        }

        /// <summary>
        /// パッケージをインストールする前に、パッケージの復元が同意されているかどうかを確認します。
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_jpn()
        {
            return GetString("RestoreCommandRequireConsent_jpn");
        }

        /// <summary>
        /// 패키지를 설치하기 전에 패키지 복원에 동의했는지 확인하십시오.
        /// </summary>
        internal static string RestoreCommandRequireConsent_kor
        {
            get { return GetString("RestoreCommandRequireConsent_kor"); }
        }

        /// <summary>
        /// 패키지를 설치하기 전에 패키지 복원에 동의했는지 확인하십시오.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_kor()
        {
            return GetString("RestoreCommandRequireConsent_kor");
        }

        /// <summary>
        /// Sprawdza przed zainstalowaniem pakietu, czy udzielono zgody na przywrócenie pakietu.
        /// </summary>
        internal static string RestoreCommandRequireConsent_plk
        {
            get { return GetString("RestoreCommandRequireConsent_plk"); }
        }

        /// <summary>
        /// Sprawdza przed zainstalowaniem pakietu, czy udzielono zgody na przywrócenie pakietu.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_plk()
        {
            return GetString("RestoreCommandRequireConsent_plk");
        }

        /// <summary>
        /// Verifica se a autorização de restauração de pacote é concedida antes de instalar um pacote.
        /// </summary>
        internal static string RestoreCommandRequireConsent_ptb
        {
            get { return GetString("RestoreCommandRequireConsent_ptb"); }
        }

        /// <summary>
        /// Verifica se a autorização de restauração de pacote é concedida antes de instalar um pacote.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_ptb()
        {
            return GetString("RestoreCommandRequireConsent_ptb");
        }

        /// <summary>
        /// Проверяет, было ли дано согласие на восстановление пакета перед установкой пакета.
        /// </summary>
        internal static string RestoreCommandRequireConsent_rus
        {
            get { return GetString("RestoreCommandRequireConsent_rus"); }
        }

        /// <summary>
        /// Проверяет, было ли дано согласие на восстановление пакета перед установкой пакета.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_rus()
        {
            return GetString("RestoreCommandRequireConsent_rus");
        }

        /// <summary>
        /// Paketin yüklenmesinden önce paket geri yükleme onayının verilip verilmediğini denetler.
        /// </summary>
        internal static string RestoreCommandRequireConsent_trk
        {
            get { return GetString("RestoreCommandRequireConsent_trk"); }
        }

        /// <summary>
        /// Paketin yüklenmesinden önce paket geri yükleme onayının verilip verilmediğini denetler.
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_trk()
        {
            return GetString("RestoreCommandRequireConsent_trk");
        }

        /// <summary>
        /// 在安装程序包之前，检查是否已同意还原程序包。
        /// </summary>
        internal static string RestoreCommandRequireConsent_chs
        {
            get { return GetString("RestoreCommandRequireConsent_chs"); }
        }

        /// <summary>
        /// 在安装程序包之前，检查是否已同意还原程序包。
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_chs()
        {
            return GetString("RestoreCommandRequireConsent_chs");
        }

        /// <summary>
        /// 檢查是否在安裝封裝前已授予封裝還原同意。
        /// </summary>
        internal static string RestoreCommandRequireConsent_cht
        {
            get { return GetString("RestoreCommandRequireConsent_cht"); }
        }

        /// <summary>
        /// 檢查是否在安裝封裝前已授予封裝還原同意。
        /// </summary>
        internal static string FormatRestoreCommandRequireConsent_cht()
        {
            return GetString("RestoreCommandRequireConsent_cht");
        }

        /// <summary>
        /// Určuje adresář řešení. Není platné při obnovování balíčků pro řešení.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_csy
        {
            get { return GetString("RestoreCommandSolutionDirectory_csy"); }
        }

        /// <summary>
        /// Určuje adresář řešení. Není platné při obnovování balíčků pro řešení.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_csy()
        {
            return GetString("RestoreCommandSolutionDirectory_csy");
        }

        /// <summary>
        /// Gibt das Projektverzeichnis an. Beim Wiederherstellen von Paketen für ein Projekt nicht gültig.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_deu
        {
            get { return GetString("RestoreCommandSolutionDirectory_deu"); }
        }

        /// <summary>
        /// Gibt das Projektverzeichnis an. Beim Wiederherstellen von Paketen für ein Projekt nicht gültig.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_deu()
        {
            return GetString("RestoreCommandSolutionDirectory_deu");
        }

        /// <summary>
        /// Especifica el directorio de la solución. No es válido cuando se restauran paquetes para una solución.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_esp
        {
            get { return GetString("RestoreCommandSolutionDirectory_esp"); }
        }

        /// <summary>
        /// Especifica el directorio de la solución. No es válido cuando se restauran paquetes para una solución.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_esp()
        {
            return GetString("RestoreCommandSolutionDirectory_esp");
        }

        /// <summary>
        /// Spécifie le répertoire de la solution. Non valide lors de la restauration de packages pour une solution.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_fra
        {
            get { return GetString("RestoreCommandSolutionDirectory_fra"); }
        }

        /// <summary>
        /// Spécifie le répertoire de la solution. Non valide lors de la restauration de packages pour une solution.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_fra()
        {
            return GetString("RestoreCommandSolutionDirectory_fra");
        }

        /// <summary>
        /// Specifica la soluzione della directory. Non valida quando si ripristinano pacchetti per una soluzione.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_ita
        {
            get { return GetString("RestoreCommandSolutionDirectory_ita"); }
        }

        /// <summary>
        /// Specifica la soluzione della directory. Non valida quando si ripristinano pacchetti per una soluzione.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_ita()
        {
            return GetString("RestoreCommandSolutionDirectory_ita");
        }

        /// <summary>
        /// ソリューション ディレクトリを指定します。ソリューションのパッケージを復元する場合、無効です。
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_jpn
        {
            get { return GetString("RestoreCommandSolutionDirectory_jpn"); }
        }

        /// <summary>
        /// ソリューション ディレクトリを指定します。ソリューションのパッケージを復元する場合、無効です。
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_jpn()
        {
            return GetString("RestoreCommandSolutionDirectory_jpn");
        }

        /// <summary>
        /// 솔루션 디렉터리를 지정합니다. 솔루션 패키지를 복원하는 경우 사용할 수 없습니다.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_kor
        {
            get { return GetString("RestoreCommandSolutionDirectory_kor"); }
        }

        /// <summary>
        /// 솔루션 디렉터리를 지정합니다. 솔루션 패키지를 복원하는 경우 사용할 수 없습니다.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_kor()
        {
            return GetString("RestoreCommandSolutionDirectory_kor");
        }

        /// <summary>
        /// Określa katalog rozwiązania. W przypadku przywracania pakietów dla rozwiązania nie jest on obowiązujący.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_plk
        {
            get { return GetString("RestoreCommandSolutionDirectory_plk"); }
        }

        /// <summary>
        /// Określa katalog rozwiązania. W przypadku przywracania pakietów dla rozwiązania nie jest on obowiązujący.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_plk()
        {
            return GetString("RestoreCommandSolutionDirectory_plk");
        }

        /// <summary>
        /// Especifica o diretório de solução. Não é válido ao restaurar pacotes para uma solução.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_ptb
        {
            get { return GetString("RestoreCommandSolutionDirectory_ptb"); }
        }

        /// <summary>
        /// Especifica o diretório de solução. Não é válido ao restaurar pacotes para uma solução.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_ptb()
        {
            return GetString("RestoreCommandSolutionDirectory_ptb");
        }

        /// <summary>
        /// Указывает каталог решения. При восстановлении пакетов для решения является недопустимым.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_rus
        {
            get { return GetString("RestoreCommandSolutionDirectory_rus"); }
        }

        /// <summary>
        /// Указывает каталог решения. При восстановлении пакетов для решения является недопустимым.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_rus()
        {
            return GetString("RestoreCommandSolutionDirectory_rus");
        }

        /// <summary>
        /// Çözüm dizinini belirtir. Bir çözüm için paketler geri yüklenirken geçerli değildir.
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_trk
        {
            get { return GetString("RestoreCommandSolutionDirectory_trk"); }
        }

        /// <summary>
        /// Çözüm dizinini belirtir. Bir çözüm için paketler geri yüklenirken geçerli değildir.
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_trk()
        {
            return GetString("RestoreCommandSolutionDirectory_trk");
        }

        /// <summary>
        /// 指定解决方案目录。当还原解决方案的程序包时无效。
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_chs
        {
            get { return GetString("RestoreCommandSolutionDirectory_chs"); }
        }

        /// <summary>
        /// 指定解决方案目录。当还原解决方案的程序包时无效。
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_chs()
        {
            return GetString("RestoreCommandSolutionDirectory_chs");
        }

        /// <summary>
        /// 指定方案目錄。還原方案封裝時無效。
        /// </summary>
        internal static string RestoreCommandSolutionDirectory_cht
        {
            get { return GetString("RestoreCommandSolutionDirectory_cht"); }
        }

        /// <summary>
        /// 指定方案目錄。還原方案封裝時無效。
        /// </summary>
        internal static string FormatRestoreCommandSolutionDirectory_cht()
        {
            return GetString("RestoreCommandSolutionDirectory_cht");
        }

        /// <summary>
        /// Seznam zdrojů balíčků k použití
        /// </summary>
        internal static string RestoreCommandSourceDescription_csy
        {
            get { return GetString("RestoreCommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Seznam zdrojů balíčků k použití
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_csy()
        {
            return GetString("RestoreCommandSourceDescription_csy");
        }

        /// <summary>
        /// Eine Liste der zu verwendenden Paketquellen.
        /// </summary>
        internal static string RestoreCommandSourceDescription_deu
        {
            get { return GetString("RestoreCommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Eine Liste der zu verwendenden Paketquellen.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_deu()
        {
            return GetString("RestoreCommandSourceDescription_deu");
        }

        /// <summary>
        /// Una lista de orígenes de paquetes para usar.
        /// </summary>
        internal static string RestoreCommandSourceDescription_esp
        {
            get { return GetString("RestoreCommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Una lista de orígenes de paquetes para usar.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_esp()
        {
            return GetString("RestoreCommandSourceDescription_esp");
        }

        /// <summary>
        /// Liste de sources de packages à utiliser.
        /// </summary>
        internal static string RestoreCommandSourceDescription_fra
        {
            get { return GetString("RestoreCommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Liste de sources de packages à utiliser.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_fra()
        {
            return GetString("RestoreCommandSourceDescription_fra");
        }

        /// <summary>
        /// Lista di fonti pacchetti da usare.
        /// </summary>
        internal static string RestoreCommandSourceDescription_ita
        {
            get { return GetString("RestoreCommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Lista di fonti pacchetti da usare.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_ita()
        {
            return GetString("RestoreCommandSourceDescription_ita");
        }

        /// <summary>
        /// 使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string RestoreCommandSourceDescription_jpn
        {
            get { return GetString("RestoreCommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// 使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_jpn()
        {
            return GetString("RestoreCommandSourceDescription_jpn");
        }

        /// <summary>
        /// 사용할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string RestoreCommandSourceDescription_kor
        {
            get { return GetString("RestoreCommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 사용할 패키지 소스의 목록입니다.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_kor()
        {
            return GetString("RestoreCommandSourceDescription_kor");
        }

        /// <summary>
        /// Lista źródeł pakietów dostępnych do użycia.
        /// </summary>
        internal static string RestoreCommandSourceDescription_plk
        {
            get { return GetString("RestoreCommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Lista źródeł pakietów dostępnych do użycia.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_plk()
        {
            return GetString("RestoreCommandSourceDescription_plk");
        }

        /// <summary>
        /// Uma lista de origens de pacotes a serem usados.
        /// </summary>
        internal static string RestoreCommandSourceDescription_ptb
        {
            get { return GetString("RestoreCommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Uma lista de origens de pacotes a serem usados.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_ptb()
        {
            return GetString("RestoreCommandSourceDescription_ptb");
        }

        /// <summary>
        /// Список используемых источников пакетов.
        /// </summary>
        internal static string RestoreCommandSourceDescription_rus
        {
            get { return GetString("RestoreCommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Список используемых источников пакетов.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_rus()
        {
            return GetString("RestoreCommandSourceDescription_rus");
        }

        /// <summary>
        /// Kullanılacak paket kaynaklarının listesi.
        /// </summary>
        internal static string RestoreCommandSourceDescription_trk
        {
            get { return GetString("RestoreCommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Kullanılacak paket kaynaklarının listesi.
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_trk()
        {
            return GetString("RestoreCommandSourceDescription_trk");
        }

        /// <summary>
        /// 要使用的程序包源的列表。
        /// </summary>
        internal static string RestoreCommandSourceDescription_chs
        {
            get { return GetString("RestoreCommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 要使用的程序包源的列表。
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_chs()
        {
            return GetString("RestoreCommandSourceDescription_chs");
        }

        /// <summary>
        /// 要使用的封裝來源清單。
        /// </summary>
        internal static string RestoreCommandSourceDescription_cht
        {
            get { return GetString("RestoreCommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 要使用的封裝來源清單。
        /// </summary>
        internal static string FormatRestoreCommandSourceDescription_cht()
        {
            return GetString("RestoreCommandSourceDescription_cht");
        }

        /// <summary>
        /// Je-li zadáno řešení, tento příkaz obnoví balíčky NuGet, které jsou nainstalovány v řešení a v projektech obsažených v tomto řešení. V opačném případě tento příkaz obnoví balíčky uvedené v zadaném souboru packages.config.
        /// </summary>
        internal static string RestoreCommandUsageDescription_csy
        {
            get { return GetString("RestoreCommandUsageDescription_csy"); }
        }

        /// <summary>
        /// Je-li zadáno řešení, tento příkaz obnoví balíčky NuGet, které jsou nainstalovány v řešení a v projektech obsažených v tomto řešení. V opačném případě tento příkaz obnoví balíčky uvedené v zadaném souboru packages.config.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_csy()
        {
            return GetString("RestoreCommandUsageDescription_csy");
        }

        /// <summary>
        /// Wenn ein Projekt angegeben wird, stellt dieser Befehl NuGet-Pakete wieder her, die im Projekt und den darin enthaltenen Projekten installiert sind. Andernfalls stellt der Befehl Pakete wieder her, die in der angegebenen Datei "packages.config" aufgelistet werden.
        /// </summary>
        internal static string RestoreCommandUsageDescription_deu
        {
            get { return GetString("RestoreCommandUsageDescription_deu"); }
        }

        /// <summary>
        /// Wenn ein Projekt angegeben wird, stellt dieser Befehl NuGet-Pakete wieder her, die im Projekt und den darin enthaltenen Projekten installiert sind. Andernfalls stellt der Befehl Pakete wieder her, die in der angegebenen Datei "packages.config" aufgelistet werden.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_deu()
        {
            return GetString("RestoreCommandUsageDescription_deu");
        }

        /// <summary>
        /// Si se especifica una solución, este comando restaura los paquetes NuGet que están instalados en la solución y los proyectos que contiene la solución. De lo contrario, el comando restaura los paquetes mostrados en el archivo packages.config especificado.
        /// </summary>
        internal static string RestoreCommandUsageDescription_esp
        {
            get { return GetString("RestoreCommandUsageDescription_esp"); }
        }

        /// <summary>
        /// Si se especifica una solución, este comando restaura los paquetes NuGet que están instalados en la solución y los proyectos que contiene la solución. De lo contrario, el comando restaura los paquetes mostrados en el archivo packages.config especificado.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_esp()
        {
            return GetString("RestoreCommandUsageDescription_esp");
        }

        /// <summary>
        /// Si une solution est spécifiée, cette commande restaure les packages NuGet installés dans la solution et dans les projets contenus dans la solution. Sinon, la commande restaure les packages répertoriés dans le fichier packages.config spécifié.
        /// </summary>
        internal static string RestoreCommandUsageDescription_fra
        {
            get { return GetString("RestoreCommandUsageDescription_fra"); }
        }

        /// <summary>
        /// Si une solution est spécifiée, cette commande restaure les packages NuGet installés dans la solution et dans les projets contenus dans la solution. Sinon, la commande restaure les packages répertoriés dans le fichier packages.config spécifié.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_fra()
        {
            return GetString("RestoreCommandUsageDescription_fra");
        }

        /// <summary>
        /// Se si specifica una soluzione, questo comando ripristina i pacchetti NuGet installati nella soluzione e nei progetti contenuti nella soluzione. Altrimenti, il comando ripristina i pacchetti elencati nel file packages.config.
        /// </summary>
        internal static string RestoreCommandUsageDescription_ita
        {
            get { return GetString("RestoreCommandUsageDescription_ita"); }
        }

        /// <summary>
        /// Se si specifica una soluzione, questo comando ripristina i pacchetti NuGet installati nella soluzione e nei progetti contenuti nella soluzione. Altrimenti, il comando ripristina i pacchetti elencati nel file packages.config.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_ita()
        {
            return GetString("RestoreCommandUsageDescription_ita");
        }

        /// <summary>
        /// ソリューションが指定された場合、ソリューションでインストールされた NuGet パッケージとソリューションに含まれるプロジェクトが復元されます。ソリューションが指定されない場合、指定された packages.config ファイルに含まれるパッケージが復元されます。
        /// </summary>
        internal static string RestoreCommandUsageDescription_jpn
        {
            get { return GetString("RestoreCommandUsageDescription_jpn"); }
        }

        /// <summary>
        /// ソリューションが指定された場合、ソリューションでインストールされた NuGet パッケージとソリューションに含まれるプロジェクトが復元されます。ソリューションが指定されない場合、指定された packages.config ファイルに含まれるパッケージが復元されます。
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_jpn()
        {
            return GetString("RestoreCommandUsageDescription_jpn");
        }

        /// <summary>
        /// 솔루션이 지정된 경우 이 명령은 솔루션 및 솔루션에 포함된 프로젝트에 설치된 NuGet 패키지를 복원합니다. 솔루션이 지정되지 않은 경우 명령은 지정된 packages.config 파일에 나열된 패키지를 복원합니다.
        /// </summary>
        internal static string RestoreCommandUsageDescription_kor
        {
            get { return GetString("RestoreCommandUsageDescription_kor"); }
        }

        /// <summary>
        /// 솔루션이 지정된 경우 이 명령은 솔루션 및 솔루션에 포함된 프로젝트에 설치된 NuGet 패키지를 복원합니다. 솔루션이 지정되지 않은 경우 명령은 지정된 packages.config 파일에 나열된 패키지를 복원합니다.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_kor()
        {
            return GetString("RestoreCommandUsageDescription_kor");
        }

        /// <summary>
        /// Jeśli zostało określone rozwiązanie, to polecenie przywraca pakiety NuGet zainstalowane w rozwiązaniu oraz w projektach zawartych w rozwiązaniu. W przeciwnym razie to polecenie przywraca pakiety wymienione w określonym pliku packages.config.
        /// </summary>
        internal static string RestoreCommandUsageDescription_plk
        {
            get { return GetString("RestoreCommandUsageDescription_plk"); }
        }

        /// <summary>
        /// Jeśli zostało określone rozwiązanie, to polecenie przywraca pakiety NuGet zainstalowane w rozwiązaniu oraz w projektach zawartych w rozwiązaniu. W przeciwnym razie to polecenie przywraca pakiety wymienione w określonym pliku packages.config.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_plk()
        {
            return GetString("RestoreCommandUsageDescription_plk");
        }

        /// <summary>
        /// Se uma solução for especificada, este comando restaura os pacotes NuGet que estão instalados na solução e em projetos contidos na solução. Caso contrário, o comando restaura pacotes listados no arquivo especificado packages.config.
        /// </summary>
        internal static string RestoreCommandUsageDescription_ptb
        {
            get { return GetString("RestoreCommandUsageDescription_ptb"); }
        }

        /// <summary>
        /// Se uma solução for especificada, este comando restaura os pacotes NuGet que estão instalados na solução e em projetos contidos na solução. Caso contrário, o comando restaura pacotes listados no arquivo especificado packages.config.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_ptb()
        {
            return GetString("RestoreCommandUsageDescription_ptb");
        }

        /// <summary>
        /// Если указано решение, эта команда восстанавливает пакеты NuGet, установленные в решении и проектах, содержащихся в решении. В противном случае команда восстанавливает пакеты, указанные в файле packages.config.
        /// </summary>
        internal static string RestoreCommandUsageDescription_rus
        {
            get { return GetString("RestoreCommandUsageDescription_rus"); }
        }

        /// <summary>
        /// Если указано решение, эта команда восстанавливает пакеты NuGet, установленные в решении и проектах, содержащихся в решении. В противном случае команда восстанавливает пакеты, указанные в файле packages.config.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_rus()
        {
            return GetString("RestoreCommandUsageDescription_rus");
        }

        /// <summary>
        /// Bir çözüm belirtilmişse, bu komut çözüm içindeki ve çözüm içinde yer alan paketlerdeki yüklü NuGet paketlerini geri yükler. Aksi takdirde, komut belirtilen packages.config dosyasında listelenen paketleri geri yükler.
        /// </summary>
        internal static string RestoreCommandUsageDescription_trk
        {
            get { return GetString("RestoreCommandUsageDescription_trk"); }
        }

        /// <summary>
        /// Bir çözüm belirtilmişse, bu komut çözüm içindeki ve çözüm içinde yer alan paketlerdeki yüklü NuGet paketlerini geri yükler. Aksi takdirde, komut belirtilen packages.config dosyasında listelenen paketleri geri yükler.
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_trk()
        {
            return GetString("RestoreCommandUsageDescription_trk");
        }

        /// <summary>
        /// 如果指定了解决方案，则此命令将还原解决方案中安装的 NuGet 程序包，以及解决方案包含的项目中的 NuGet 程序包。否则，此命令将还原指定的 packages.config 文件中列出的程序包。
        /// </summary>
        internal static string RestoreCommandUsageDescription_chs
        {
            get { return GetString("RestoreCommandUsageDescription_chs"); }
        }

        /// <summary>
        /// 如果指定了解决方案，则此命令将还原解决方案中安装的 NuGet 程序包，以及解决方案包含的项目中的 NuGet 程序包。否则，此命令将还原指定的 packages.config 文件中列出的程序包。
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_chs()
        {
            return GetString("RestoreCommandUsageDescription_chs");
        }

        /// <summary>
        /// 如果已指定方案，此命令會還原方案中安裝在方案和專案中的 NuGet 封裝。否則命令會還原列在指定 packages.config 檔案中的封裝。
        /// </summary>
        internal static string RestoreCommandUsageDescription_cht
        {
            get { return GetString("RestoreCommandUsageDescription_cht"); }
        }

        /// <summary>
        /// 如果已指定方案，此命令會還原方案中安裝在方案和專案中的 NuGet 封裝。否則命令會還原列在指定 packages.config 檔案中的封裝。
        /// </summary>
        internal static string FormatRestoreCommandUsageDescription_cht()
        {
            return GetString("RestoreCommandUsageDescription_cht");
        }

        /// <summary>
        /// [&lt;řešení&gt; | &lt;soubor packages.config&gt;] [možnosti]
        /// </summary>
        internal static string RestoreCommandUsageSummary_csy
        {
            get { return GetString("RestoreCommandUsageSummary_csy"); }
        }

        /// <summary>
        /// [&lt;řešení&gt; | &lt;soubor packages.config&gt;] [možnosti]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_csy()
        {
            return GetString("RestoreCommandUsageSummary_csy");
        }

        /// <summary>
        /// [&lt;Projekt&gt; | &lt;packages.config-Datei&gt;] [Optionen]
        /// </summary>
        internal static string RestoreCommandUsageSummary_deu
        {
            get { return GetString("RestoreCommandUsageSummary_deu"); }
        }

        /// <summary>
        /// [&lt;Projekt&gt; | &lt;packages.config-Datei&gt;] [Optionen]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_deu()
        {
            return GetString("RestoreCommandUsageSummary_deu");
        }

        /// <summary>
        /// [&lt;solución&gt; | &lt;packages.config file&gt;] [opciones]
        /// </summary>
        internal static string RestoreCommandUsageSummary_esp
        {
            get { return GetString("RestoreCommandUsageSummary_esp"); }
        }

        /// <summary>
        /// [&lt;solución&gt; | &lt;packages.config file&gt;] [opciones]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_esp()
        {
            return GetString("RestoreCommandUsageSummary_esp");
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string RestoreCommandUsageSummary_fra
        {
            get { return GetString("RestoreCommandUsageSummary_fra"); }
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_fra()
        {
            return GetString("RestoreCommandUsageSummary_fra");
        }

        /// <summary>
        /// [&lt;soluzione&gt; | &lt;packages.config file&gt;] [opzioni]
        /// </summary>
        internal static string RestoreCommandUsageSummary_ita
        {
            get { return GetString("RestoreCommandUsageSummary_ita"); }
        }

        /// <summary>
        /// [&lt;soluzione&gt; | &lt;packages.config file&gt;] [opzioni]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_ita()
        {
            return GetString("RestoreCommandUsageSummary_ita");
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string RestoreCommandUsageSummary_jpn
        {
            get { return GetString("RestoreCommandUsageSummary_jpn"); }
        }

        /// <summary>
        /// [&lt;solution&gt; | &lt;packages.config file&gt;] [options]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_jpn()
        {
            return GetString("RestoreCommandUsageSummary_jpn");
        }

        /// <summary>
        /// [&lt;솔루션&gt; | &lt;packages.config 파일&gt;] [옵션]
        /// </summary>
        internal static string RestoreCommandUsageSummary_kor
        {
            get { return GetString("RestoreCommandUsageSummary_kor"); }
        }

        /// <summary>
        /// [&lt;솔루션&gt; | &lt;packages.config 파일&gt;] [옵션]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_kor()
        {
            return GetString("RestoreCommandUsageSummary_kor");
        }

        /// <summary>
        /// [&lt;rozwiązanie&gt; | &lt;plik packages.config&gt;] [opcje]
        /// </summary>
        internal static string RestoreCommandUsageSummary_plk
        {
            get { return GetString("RestoreCommandUsageSummary_plk"); }
        }

        /// <summary>
        /// [&lt;rozwiązanie&gt; | &lt;plik packages.config&gt;] [opcje]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_plk()
        {
            return GetString("RestoreCommandUsageSummary_plk");
        }

        /// <summary>
        /// [&lt;solução&gt; | &lt;arquivo packages.config&gt;] [opções]
        /// </summary>
        internal static string RestoreCommandUsageSummary_ptb
        {
            get { return GetString("RestoreCommandUsageSummary_ptb"); }
        }

        /// <summary>
        /// [&lt;solução&gt; | &lt;arquivo packages.config&gt;] [opções]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_ptb()
        {
            return GetString("RestoreCommandUsageSummary_ptb");
        }

        /// <summary>
        /// [&lt;решение&gt; | &lt;файл packages.config&gt;] [параметры]
        /// </summary>
        internal static string RestoreCommandUsageSummary_rus
        {
            get { return GetString("RestoreCommandUsageSummary_rus"); }
        }

        /// <summary>
        /// [&lt;решение&gt; | &lt;файл packages.config&gt;] [параметры]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_rus()
        {
            return GetString("RestoreCommandUsageSummary_rus");
        }

        /// <summary>
        /// [&lt;çözüm&gt; | &lt;packages.config file&gt;] [seçenekler]
        /// </summary>
        internal static string RestoreCommandUsageSummary_trk
        {
            get { return GetString("RestoreCommandUsageSummary_trk"); }
        }

        /// <summary>
        /// [&lt;çözüm&gt; | &lt;packages.config file&gt;] [seçenekler]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_trk()
        {
            return GetString("RestoreCommandUsageSummary_trk");
        }

        /// <summary>
        /// [&lt;解决方案&gt; | &lt;packages.config 文件&gt;] [选项]
        /// </summary>
        internal static string RestoreCommandUsageSummary_chs
        {
            get { return GetString("RestoreCommandUsageSummary_chs"); }
        }

        /// <summary>
        /// [&lt;解决方案&gt; | &lt;packages.config 文件&gt;] [选项]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_chs()
        {
            return GetString("RestoreCommandUsageSummary_chs");
        }

        /// <summary>
        /// [&lt;方案&gt; | &lt;packages.config 檔案&gt;] [選項]
        /// </summary>
        internal static string RestoreCommandUsageSummary_cht
        {
            get { return GetString("RestoreCommandUsageSummary_cht"); }
        }

        /// <summary>
        /// [&lt;方案&gt; | &lt;packages.config 檔案&gt;] [選項]
        /// </summary>
        internal static string FormatRestoreCommandUsageSummary_cht()
        {
            return GetString("RestoreCommandUsageSummary_cht");
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string CommandNoCache_csy
        {
            get { return GetString("CommandNoCache_csy"); }
        }

        /// <summary>
        /// Zakáže použití mezipaměti počítače jako prvního zdroje balíčků.
        /// </summary>
        internal static string FormatCommandNoCache_csy()
        {
            return GetString("CommandNoCache_csy");
        }

        /// <summary>
        /// Deaktivieren der Verwendung des Computercaches als erste Paketquelle.
        /// </summary>
        internal static string CommandNoCache_deu
        {
            get { return GetString("CommandNoCache_deu"); }
        }

        /// <summary>
        /// Deaktivieren der Verwendung des Computercaches als erste Paketquelle.
        /// </summary>
        internal static string FormatCommandNoCache_deu()
        {
            return GetString("CommandNoCache_deu");
        }

        /// <summary>
        /// Deshabilitar el uso de la caché del equipo como primer origen del paquete.
        /// </summary>
        internal static string CommandNoCache_esp
        {
            get { return GetString("CommandNoCache_esp"); }
        }

        /// <summary>
        /// Deshabilitar el uso de la caché del equipo como primer origen del paquete.
        /// </summary>
        internal static string FormatCommandNoCache_esp()
        {
            return GetString("CommandNoCache_esp");
        }

        /// <summary>
        /// Désactivez l'utilisation du cache de l'ordinateur comme première source de package.
        /// </summary>
        internal static string CommandNoCache_fra
        {
            get { return GetString("CommandNoCache_fra"); }
        }

        /// <summary>
        /// Désactivez l'utilisation du cache de l'ordinateur comme première source de package.
        /// </summary>
        internal static string FormatCommandNoCache_fra()
        {
            return GetString("CommandNoCache_fra");
        }

        /// <summary>
        /// Disabilitare utilizzando la cache del computer come prima origine pacchetto.
        /// </summary>
        internal static string CommandNoCache_ita
        {
            get { return GetString("CommandNoCache_ita"); }
        }

        /// <summary>
        /// Disabilitare utilizzando la cache del computer come prima origine pacchetto.
        /// </summary>
        internal static string FormatCommandNoCache_ita()
        {
            return GetString("CommandNoCache_ita");
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてマシン キャッシュを使用して無効にします。
        /// </summary>
        internal static string CommandNoCache_jpn
        {
            get { return GetString("CommandNoCache_jpn"); }
        }

        /// <summary>
        /// 最初のパッケージ ソースとしてマシン キャッシュを使用して無効にします。
        /// </summary>
        internal static string FormatCommandNoCache_jpn()
        {
            return GetString("CommandNoCache_jpn");
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string CommandNoCache_kor
        {
            get { return GetString("CommandNoCache_kor"); }
        }

        /// <summary>
        /// 시스템 캐시를 첫 번째 패키지 소스로 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatCommandNoCache_kor()
        {
            return GetString("CommandNoCache_kor");
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string CommandNoCache_plk
        {
            get { return GetString("CommandNoCache_plk"); }
        }

        /// <summary>
        /// Wyłącz, używając pamięci podręcznej komputera jako pierwszego źródła pakietu.
        /// </summary>
        internal static string FormatCommandNoCache_plk()
        {
            return GetString("CommandNoCache_plk");
        }

        /// <summary>
        /// Desativar usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string CommandNoCache_ptb
        {
            get { return GetString("CommandNoCache_ptb"); }
        }

        /// <summary>
        /// Desativar usando o cache da máquina como a primeira origem de pacotes.
        /// </summary>
        internal static string FormatCommandNoCache_ptb()
        {
            return GetString("CommandNoCache_ptb");
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string CommandNoCache_rus
        {
            get { return GetString("CommandNoCache_rus"); }
        }

        /// <summary>
        /// Отключает использование кэша компьютера в качестве первого источника пакетов.
        /// </summary>
        internal static string FormatCommandNoCache_rus()
        {
            return GetString("CommandNoCache_rus");
        }

        /// <summary>
        /// Makine önbelleğini ilk paket kaynağı olarak kullanarak devre dışı bırakın.
        /// </summary>
        internal static string CommandNoCache_trk
        {
            get { return GetString("CommandNoCache_trk"); }
        }

        /// <summary>
        /// Makine önbelleğini ilk paket kaynağı olarak kullanarak devre dışı bırakın.
        /// </summary>
        internal static string FormatCommandNoCache_trk()
        {
            return GetString("CommandNoCache_trk");
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string CommandNoCache_chs
        {
            get { return GetString("CommandNoCache_chs"); }
        }

        /// <summary>
        /// 禁止使用计算机缓存作为第一个程序包源。
        /// </summary>
        internal static string FormatCommandNoCache_chs()
        {
            return GetString("CommandNoCache_chs");
        }

        /// <summary>
        /// 停用使用機器快取做為第一個套件
        /// </summary>
        internal static string CommandNoCache_cht
        {
            get { return GetString("CommandNoCache_cht"); }
        }

        /// <summary>
        /// 停用使用機器快取做為第一個套件
        /// </summary>
        internal static string FormatCommandNoCache_cht()
        {
            return GetString("CommandNoCache_cht");
        }

        /// <summary>
        /// Seznam zdrojů balíčků použitých tímto příkazem
        /// </summary>
        internal static string CommandSourceDescription_csy
        {
            get { return GetString("CommandSourceDescription_csy"); }
        }

        /// <summary>
        /// Seznam zdrojů balíčků použitých tímto příkazem
        /// </summary>
        internal static string FormatCommandSourceDescription_csy()
        {
            return GetString("CommandSourceDescription_csy");
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die für diesen Befehl verwendet werden sollen.
        /// </summary>
        internal static string CommandSourceDescription_deu
        {
            get { return GetString("CommandSourceDescription_deu"); }
        }

        /// <summary>
        /// Eine Liste der Paketquellen, die für diesen Befehl verwendet werden sollen.
        /// </summary>
        internal static string FormatCommandSourceDescription_deu()
        {
            return GetString("CommandSourceDescription_deu");
        }

        /// <summary>
        /// Lista de orígenes de paquetes para usar para este comando.
        /// </summary>
        internal static string CommandSourceDescription_esp
        {
            get { return GetString("CommandSourceDescription_esp"); }
        }

        /// <summary>
        /// Lista de orígenes de paquetes para usar para este comando.
        /// </summary>
        internal static string FormatCommandSourceDescription_esp()
        {
            return GetString("CommandSourceDescription_esp");
        }

        /// <summary>
        /// Liste de sources de packages à utiliser pour cette commande.
        /// </summary>
        internal static string CommandSourceDescription_fra
        {
            get { return GetString("CommandSourceDescription_fra"); }
        }

        /// <summary>
        /// Liste de sources de packages à utiliser pour cette commande.
        /// </summary>
        internal static string FormatCommandSourceDescription_fra()
        {
            return GetString("CommandSourceDescription_fra");
        }

        /// <summary>
        /// Elenco di origini pacchetti da utilizzare per questo comando.
        /// </summary>
        internal static string CommandSourceDescription_ita
        {
            get { return GetString("CommandSourceDescription_ita"); }
        }

        /// <summary>
        /// Elenco di origini pacchetti da utilizzare per questo comando.
        /// </summary>
        internal static string FormatCommandSourceDescription_ita()
        {
            return GetString("CommandSourceDescription_ita");
        }

        /// <summary>
        /// このコマンドで使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string CommandSourceDescription_jpn
        {
            get { return GetString("CommandSourceDescription_jpn"); }
        }

        /// <summary>
        /// このコマンドで使用するパッケージ ソースの一覧。
        /// </summary>
        internal static string FormatCommandSourceDescription_jpn()
        {
            return GetString("CommandSourceDescription_jpn");
        }

        /// <summary>
        /// 이 명령에 사용할 패키지 소스 목록입니다.
        /// </summary>
        internal static string CommandSourceDescription_kor
        {
            get { return GetString("CommandSourceDescription_kor"); }
        }

        /// <summary>
        /// 이 명령에 사용할 패키지 소스 목록입니다.
        /// </summary>
        internal static string FormatCommandSourceDescription_kor()
        {
            return GetString("CommandSourceDescription_kor");
        }

        /// <summary>
        /// Lista źródeł pakietów do użycia na potrzeby tego polecenia.
        /// </summary>
        internal static string CommandSourceDescription_plk
        {
            get { return GetString("CommandSourceDescription_plk"); }
        }

        /// <summary>
        /// Lista źródeł pakietów do użycia na potrzeby tego polecenia.
        /// </summary>
        internal static string FormatCommandSourceDescription_plk()
        {
            return GetString("CommandSourceDescription_plk");
        }

        /// <summary>
        /// Uma lista de origens de pacotes para usar para esse comando.
        /// </summary>
        internal static string CommandSourceDescription_ptb
        {
            get { return GetString("CommandSourceDescription_ptb"); }
        }

        /// <summary>
        /// Uma lista de origens de pacotes para usar para esse comando.
        /// </summary>
        internal static string FormatCommandSourceDescription_ptb()
        {
            return GetString("CommandSourceDescription_ptb");
        }

        /// <summary>
        /// Список источников пакетов, используемых для этой команды.
        /// </summary>
        internal static string CommandSourceDescription_rus
        {
            get { return GetString("CommandSourceDescription_rus"); }
        }

        /// <summary>
        /// Список источников пакетов, используемых для этой команды.
        /// </summary>
        internal static string FormatCommandSourceDescription_rus()
        {
            return GetString("CommandSourceDescription_rus");
        }

        /// <summary>
        /// Bu komut için kullanılacak paket kaynaklarının listesi.
        /// </summary>
        internal static string CommandSourceDescription_trk
        {
            get { return GetString("CommandSourceDescription_trk"); }
        }

        /// <summary>
        /// Bu komut için kullanılacak paket kaynaklarının listesi.
        /// </summary>
        internal static string FormatCommandSourceDescription_trk()
        {
            return GetString("CommandSourceDescription_trk");
        }

        /// <summary>
        /// 要用于此命令的程序包源列表。
        /// </summary>
        internal static string CommandSourceDescription_chs
        {
            get { return GetString("CommandSourceDescription_chs"); }
        }

        /// <summary>
        /// 要用于此命令的程序包源列表。
        /// </summary>
        internal static string FormatCommandSourceDescription_chs()
        {
            return GetString("CommandSourceDescription_chs");
        }

        /// <summary>
        /// 此命令使用的套件來源清單。
        /// </summary>
        internal static string CommandSourceDescription_cht
        {
            get { return GetString("CommandSourceDescription_cht"); }
        }

        /// <summary>
        /// 此命令使用的套件來源清單。
        /// </summary>
        internal static string FormatCommandSourceDescription_cht()
        {
            return GetString("CommandSourceDescription_cht");
        }

        /// <summary>
        /// Předá balíček na server a publikuje jej.
        /// </summary>
        internal static string PushCommandDescription_csy
        {
            get { return GetString("PushCommandDescription_csy"); }
        }

        /// <summary>
        /// Předá balíček na server a publikuje jej.
        /// </summary>
        internal static string FormatPushCommandDescription_csy()
        {
            return GetString("PushCommandDescription_csy");
        }

        /// <summary>
        /// Übertragen eines Paket mithilfe von Push auf den Server und Veröffentlichen des Pakets.
        /// </summary>
        internal static string PushCommandDescription_deu
        {
            get { return GetString("PushCommandDescription_deu"); }
        }

        /// <summary>
        /// Übertragen eines Paket mithilfe von Push auf den Server und Veröffentlichen des Pakets.
        /// </summary>
        internal static string FormatPushCommandDescription_deu()
        {
            return GetString("PushCommandDescription_deu");
        }

        /// <summary>
        /// Inserta un paquete en el servidor y lo publica.
        /// </summary>
        internal static string PushCommandDescription_esp
        {
            get { return GetString("PushCommandDescription_esp"); }
        }

        /// <summary>
        /// Inserta un paquete en el servidor y lo publica.
        /// </summary>
        internal static string FormatPushCommandDescription_esp()
        {
            return GetString("PushCommandDescription_esp");
        }

        /// <summary>
        /// Applique au package un Push vers le serveur et le publie.
        /// </summary>
        internal static string PushCommandDescription_fra
        {
            get { return GetString("PushCommandDescription_fra"); }
        }

        /// <summary>
        /// Applique au package un Push vers le serveur et le publie.
        /// </summary>
        internal static string FormatPushCommandDescription_fra()
        {
            return GetString("PushCommandDescription_fra");
        }

        /// <summary>
        /// Effettua il push di un pacchetto verso il server e lo pubblica.
        /// </summary>
        internal static string PushCommandDescription_ita
        {
            get { return GetString("PushCommandDescription_ita"); }
        }

        /// <summary>
        /// Effettua il push di un pacchetto verso il server e lo pubblica.
        /// </summary>
        internal static string FormatPushCommandDescription_ita()
        {
            return GetString("PushCommandDescription_ita");
        }

        /// <summary>
        /// サーバーにパッケージをプッシュして、公開します。
        /// </summary>
        internal static string PushCommandDescription_jpn
        {
            get { return GetString("PushCommandDescription_jpn"); }
        }

        /// <summary>
        /// サーバーにパッケージをプッシュして、公開します。
        /// </summary>
        internal static string FormatPushCommandDescription_jpn()
        {
            return GetString("PushCommandDescription_jpn");
        }

        /// <summary>
        /// 서버에 패키지를 푸시하고 게시합니다.
        /// </summary>
        internal static string PushCommandDescription_kor
        {
            get { return GetString("PushCommandDescription_kor"); }
        }

        /// <summary>
        /// 서버에 패키지를 푸시하고 게시합니다.
        /// </summary>
        internal static string FormatPushCommandDescription_kor()
        {
            return GetString("PushCommandDescription_kor");
        }

        /// <summary>
        /// Wypycha pakiet na serwer i go publikuje.
        /// </summary>
        internal static string PushCommandDescription_plk
        {
            get { return GetString("PushCommandDescription_plk"); }
        }

        /// <summary>
        /// Wypycha pakiet na serwer i go publikuje.
        /// </summary>
        internal static string FormatPushCommandDescription_plk()
        {
            return GetString("PushCommandDescription_plk");
        }

        /// <summary>
        /// Envia um pacote para o servidor e publica-o.
        /// </summary>
        internal static string PushCommandDescription_ptb
        {
            get { return GetString("PushCommandDescription_ptb"); }
        }

        /// <summary>
        /// Envia um pacote para o servidor e publica-o.
        /// </summary>
        internal static string FormatPushCommandDescription_ptb()
        {
            return GetString("PushCommandDescription_ptb");
        }

        /// <summary>
        /// Отправляет пакет на сервер и публикует его.
        /// </summary>
        internal static string PushCommandDescription_rus
        {
            get { return GetString("PushCommandDescription_rus"); }
        }

        /// <summary>
        /// Отправляет пакет на сервер и публикует его.
        /// </summary>
        internal static string FormatPushCommandDescription_rus()
        {
            return GetString("PushCommandDescription_rus");
        }

        /// <summary>
        /// Paketi sunucuya gönderir ve yayımlar.
        /// </summary>
        internal static string PushCommandDescription_trk
        {
            get { return GetString("PushCommandDescription_trk"); }
        }

        /// <summary>
        /// Paketi sunucuya gönderir ve yayımlar.
        /// </summary>
        internal static string FormatPushCommandDescription_trk()
        {
            return GetString("PushCommandDescription_trk");
        }

        /// <summary>
        /// 将程序包推送到服务器并进行发布。
        /// </summary>
        internal static string PushCommandDescription_chs
        {
            get { return GetString("PushCommandDescription_chs"); }
        }

        /// <summary>
        /// 将程序包推送到服务器并进行发布。
        /// </summary>
        internal static string FormatPushCommandDescription_chs()
        {
            return GetString("PushCommandDescription_chs");
        }

        /// <summary>
        /// 將套件推向伺服器並發佈。
        /// </summary>
        internal static string PushCommandDescription_cht
        {
            get { return GetString("PushCommandDescription_cht"); }
        }

        /// <summary>
        /// 將套件推向伺服器並發佈。
        /// </summary>
        internal static string FormatPushCommandDescription_cht()
        {
            return GetString("PushCommandDescription_cht");
        }

        /// <summary>
        /// Použije se na akce se seznamem. Přijímá dvě hodnoty: Podrobné (výchozí hodnota) a Krátké.
        /// </summary>
        internal static string SourcesCommandFormatDescription_csy
        {
            get { return GetString("SourcesCommandFormatDescription_csy"); }
        }

        /// <summary>
        /// Použije se na akce se seznamem. Přijímá dvě hodnoty: Podrobné (výchozí hodnota) a Krátké.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_csy()
        {
            return GetString("SourcesCommandFormatDescription_csy");
        }

        /// <summary>
        /// Gilt für die Listenaktion. Nimmt zwei Werte an: "Detailed" (Standardwert) und "Short".
        /// </summary>
        internal static string SourcesCommandFormatDescription_deu
        {
            get { return GetString("SourcesCommandFormatDescription_deu"); }
        }

        /// <summary>
        /// Gilt für die Listenaktion. Nimmt zwei Werte an: "Detailed" (Standardwert) und "Short".
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_deu()
        {
            return GetString("SourcesCommandFormatDescription_deu");
        }

        /// <summary>
        /// Se aplica a la acción de la lista. Acepta dos valores: Detallado (predeterminado) y Breve.
        /// </summary>
        internal static string SourcesCommandFormatDescription_esp
        {
            get { return GetString("SourcesCommandFormatDescription_esp"); }
        }

        /// <summary>
        /// Se aplica a la acción de la lista. Acepta dos valores: Detallado (predeterminado) y Breve.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_esp()
        {
            return GetString("SourcesCommandFormatDescription_esp");
        }

        /// <summary>
        /// S'applique à l'action de la liste. Accepte deux valeurs : Détaillé (valeur par défaut) et Bref.
        /// </summary>
        internal static string SourcesCommandFormatDescription_fra
        {
            get { return GetString("SourcesCommandFormatDescription_fra"); }
        }

        /// <summary>
        /// S'applique à l'action de la liste. Accepte deux valeurs : Détaillé (valeur par défaut) et Bref.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_fra()
        {
            return GetString("SourcesCommandFormatDescription_fra");
        }

        /// <summary>
        /// Si applica all'azione list. Accetta due valori: Detailed (impostazione predefinita) e Short.
        /// </summary>
        internal static string SourcesCommandFormatDescription_ita
        {
            get { return GetString("SourcesCommandFormatDescription_ita"); }
        }

        /// <summary>
        /// Si applica all'azione list. Accetta due valori: Detailed (impostazione predefinita) e Short.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_ita()
        {
            return GetString("SourcesCommandFormatDescription_ita");
        }

        /// <summary>
        /// リストの操作に適用します。Detailed (既定) および Short の 2 つの値を受け入れます。
        /// </summary>
        internal static string SourcesCommandFormatDescription_jpn
        {
            get { return GetString("SourcesCommandFormatDescription_jpn"); }
        }

        /// <summary>
        /// リストの操作に適用します。Detailed (既定) および Short の 2 つの値を受け入れます。
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_jpn()
        {
            return GetString("SourcesCommandFormatDescription_jpn");
        }

        /// <summary>
        /// 목록 동작에 적용합니다. [자세히](기본값) 및 [짧게]의 두 가지 값을 사용할 수 있습니다.
        /// </summary>
        internal static string SourcesCommandFormatDescription_kor
        {
            get { return GetString("SourcesCommandFormatDescription_kor"); }
        }

        /// <summary>
        /// 목록 동작에 적용합니다. [자세히](기본값) 및 [짧게]의 두 가지 값을 사용할 수 있습니다.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_kor()
        {
            return GetString("SourcesCommandFormatDescription_kor");
        }

        /// <summary>
        /// Jest stosowany do akcji z listy. Akceptuje dwie wartości: Szczegółowe (wartość domyślna) i Krótkie.
        /// </summary>
        internal static string SourcesCommandFormatDescription_plk
        {
            get { return GetString("SourcesCommandFormatDescription_plk"); }
        }

        /// <summary>
        /// Jest stosowany do akcji z listy. Akceptuje dwie wartości: Szczegółowe (wartość domyślna) i Krótkie.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_plk()
        {
            return GetString("SourcesCommandFormatDescription_plk");
        }

        /// <summary>
        /// Aplica à ação da lista. Aceita dois valores: Detalhada (a padrão) e Curta.
        /// </summary>
        internal static string SourcesCommandFormatDescription_ptb
        {
            get { return GetString("SourcesCommandFormatDescription_ptb"); }
        }

        /// <summary>
        /// Aplica à ação da lista. Aceita dois valores: Detalhada (a padrão) e Curta.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_ptb()
        {
            return GetString("SourcesCommandFormatDescription_ptb");
        }

        /// <summary>
        /// Применяется к действию со списком. Принимает два значения: "Detailed" (по умолчанию) и "Short".
        /// </summary>
        internal static string SourcesCommandFormatDescription_rus
        {
            get { return GetString("SourcesCommandFormatDescription_rus"); }
        }

        /// <summary>
        /// Применяется к действию со списком. Принимает два значения: "Detailed" (по умолчанию) и "Short".
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_rus()
        {
            return GetString("SourcesCommandFormatDescription_rus");
        }

        /// <summary>
        /// Liste eylemi için geçerlidir. Ayrıntılı (varsayılan) ve Kısa olmak üzere iki değer kabul eder.
        /// </summary>
        internal static string SourcesCommandFormatDescription_trk
        {
            get { return GetString("SourcesCommandFormatDescription_trk"); }
        }

        /// <summary>
        /// Liste eylemi için geçerlidir. Ayrıntılı (varsayılan) ve Kısa olmak üzere iki değer kabul eder.
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_trk()
        {
            return GetString("SourcesCommandFormatDescription_trk");
        }

        /// <summary>
        /// 适用于列表操作。接受两个值:“详细”(默认值)和“简短”。
        /// </summary>
        internal static string SourcesCommandFormatDescription_chs
        {
            get { return GetString("SourcesCommandFormatDescription_chs"); }
        }

        /// <summary>
        /// 适用于列表操作。接受两个值:“详细”(默认值)和“简短”。
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_chs()
        {
            return GetString("SourcesCommandFormatDescription_chs");
        }

        /// <summary>
        /// 套用至清單動作。接受兩種值: 詳細 (預設) 及簡短。
        /// </summary>
        internal static string SourcesCommandFormatDescription_cht
        {
            get { return GetString("SourcesCommandFormatDescription_cht"); }
        }

        /// <summary>
        /// 套用至清單動作。接受兩種值: 詳細 (預設) 及簡短。
        /// </summary>
        internal static string FormatSourcesCommandFormatDescription_cht()
        {
            return GetString("SourcesCommandFormatDescription_cht");
        }

        /// <summary>
        /// Zakáže pro tento příkaz paralelní zpracování balíčků.
        /// </summary>
        internal static string CommandDisableParallelProcessing_csy
        {
            get { return GetString("CommandDisableParallelProcessing_csy"); }
        }

        /// <summary>
        /// Zakáže pro tento příkaz paralelní zpracování balíčků.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_csy()
        {
            return GetString("CommandDisableParallelProcessing_csy");
        }

        /// <summary>
        /// Deaktivieren paralleler Verarbeitung von Pakten für diesen Befehl.
        /// </summary>
        internal static string CommandDisableParallelProcessing_deu
        {
            get { return GetString("CommandDisableParallelProcessing_deu"); }
        }

        /// <summary>
        /// Deaktivieren paralleler Verarbeitung von Pakten für diesen Befehl.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_deu()
        {
            return GetString("CommandDisableParallelProcessing_deu");
        }

        /// <summary>
        /// Deshabilitar el procesamiento paralelo de paquetes para este comando.
        /// </summary>
        internal static string CommandDisableParallelProcessing_esp
        {
            get { return GetString("CommandDisableParallelProcessing_esp"); }
        }

        /// <summary>
        /// Deshabilitar el procesamiento paralelo de paquetes para este comando.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_esp()
        {
            return GetString("CommandDisableParallelProcessing_esp");
        }

        /// <summary>
        /// Désactive le traitement parallèle des packages pour cette commande.
        /// </summary>
        internal static string CommandDisableParallelProcessing_fra
        {
            get { return GetString("CommandDisableParallelProcessing_fra"); }
        }

        /// <summary>
        /// Désactive le traitement parallèle des packages pour cette commande.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_fra()
        {
            return GetString("CommandDisableParallelProcessing_fra");
        }

        /// <summary>
        /// Disabilitare l'elaborazione parallela dei pacchetti per questo comando.
        /// </summary>
        internal static string CommandDisableParallelProcessing_ita
        {
            get { return GetString("CommandDisableParallelProcessing_ita"); }
        }

        /// <summary>
        /// Disabilitare l'elaborazione parallela dei pacchetti per questo comando.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_ita()
        {
            return GetString("CommandDisableParallelProcessing_ita");
        }

        /// <summary>
        /// このコマンドのために、パッケージの並列処理を無効にします。
        /// </summary>
        internal static string CommandDisableParallelProcessing_jpn
        {
            get { return GetString("CommandDisableParallelProcessing_jpn"); }
        }

        /// <summary>
        /// このコマンドのために、パッケージの並列処理を無効にします。
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_jpn()
        {
            return GetString("CommandDisableParallelProcessing_jpn");
        }

        /// <summary>
        /// 이 명령에 대한 패키지 병렬 처리를 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string CommandDisableParallelProcessing_kor
        {
            get { return GetString("CommandDisableParallelProcessing_kor"); }
        }

        /// <summary>
        /// 이 명령에 대한 패키지 병렬 처리를 사용하지 않도록 설정합니다.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_kor()
        {
            return GetString("CommandDisableParallelProcessing_kor");
        }

        /// <summary>
        /// Wyłącz równoległe przetwarzanie pakietów dla tego polecenia.
        /// </summary>
        internal static string CommandDisableParallelProcessing_plk
        {
            get { return GetString("CommandDisableParallelProcessing_plk"); }
        }

        /// <summary>
        /// Wyłącz równoległe przetwarzanie pakietów dla tego polecenia.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_plk()
        {
            return GetString("CommandDisableParallelProcessing_plk");
        }

        /// <summary>
        /// Desativar processamento paralelo de pacotes para esse comando.
        /// </summary>
        internal static string CommandDisableParallelProcessing_ptb
        {
            get { return GetString("CommandDisableParallelProcessing_ptb"); }
        }

        /// <summary>
        /// Desativar processamento paralelo de pacotes para esse comando.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_ptb()
        {
            return GetString("CommandDisableParallelProcessing_ptb");
        }

        /// <summary>
        /// Отключает параллельную обработку пакетов для этой команды.
        /// </summary>
        internal static string CommandDisableParallelProcessing_rus
        {
            get { return GetString("CommandDisableParallelProcessing_rus"); }
        }

        /// <summary>
        /// Отключает параллельную обработку пакетов для этой команды.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_rus()
        {
            return GetString("CommandDisableParallelProcessing_rus");
        }

        /// <summary>
        /// Bu komut için paketlerin paralel işlenmesini devre dışı bırak.
        /// </summary>
        internal static string CommandDisableParallelProcessing_trk
        {
            get { return GetString("CommandDisableParallelProcessing_trk"); }
        }

        /// <summary>
        /// Bu komut için paketlerin paralel işlenmesini devre dışı bırak.
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_trk()
        {
            return GetString("CommandDisableParallelProcessing_trk");
        }

        /// <summary>
        /// 禁止为此命令并行处理程序包。
        /// </summary>
        internal static string CommandDisableParallelProcessing_chs
        {
            get { return GetString("CommandDisableParallelProcessing_chs"); }
        }

        /// <summary>
        /// 禁止为此命令并行处理程序包。
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_chs()
        {
            return GetString("CommandDisableParallelProcessing_chs");
        }

        /// <summary>
        /// 停用此項目的套件平行處理
        /// </summary>
        internal static string CommandDisableParallelProcessing_cht
        {
            get { return GetString("CommandDisableParallelProcessing_cht"); }
        }

        /// <summary>
        /// 停用此項目的套件平行處理
        /// </summary>
        internal static string FormatCommandDisableParallelProcessing_cht()
        {
            return GetString("CommandDisableParallelProcessing_cht");
        }

        /// <summary>
        /// Určuje typy souborů, které se mají po instalaci balíčku uložit: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_csy
        {
            get { return GetString("CommandPackageSaveMode_csy"); }
        }

        /// <summary>
        /// Určuje typy souborů, které se mají po instalaci balíčku uložit: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_csy()
        {
            return GetString("CommandPackageSaveMode_csy");
        }

        /// <summary>
        /// Angeben von Dateitypen, die nach der Paketinstallation gespeichert werden sollen: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_deu
        {
            get { return GetString("CommandPackageSaveMode_deu"); }
        }

        /// <summary>
        /// Angeben von Dateitypen, die nach der Paketinstallation gespeichert werden sollen: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_deu()
        {
            return GetString("CommandPackageSaveMode_deu");
        }

        /// <summary>
        /// Especifica los tipos de archivo que se guardarán después de la instalación del paquete: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_esp
        {
            get { return GetString("CommandPackageSaveMode_esp"); }
        }

        /// <summary>
        /// Especifica los tipos de archivo que se guardarán después de la instalación del paquete: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_esp()
        {
            return GetString("CommandPackageSaveMode_esp");
        }

        /// <summary>
        /// Spécifie les types de fichiers à enregistrer après l'installation du package : nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_fra
        {
            get { return GetString("CommandPackageSaveMode_fra"); }
        }

        /// <summary>
        /// Spécifie les types de fichiers à enregistrer après l'installation du package : nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_fra()
        {
            return GetString("CommandPackageSaveMode_fra");
        }

        /// <summary>
        /// Specifica i tipi di file per il salvataggio dopo l'installazione del pacchetto: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_ita
        {
            get { return GetString("CommandPackageSaveMode_ita"); }
        }

        /// <summary>
        /// Specifica i tipi di file per il salvataggio dopo l'installazione del pacchetto: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_ita()
        {
            return GetString("CommandPackageSaveMode_ita");
        }

        /// <summary>
        /// パッケージのインストール後に保存するファイルの種類を指定します: nuspec、nupkg、nuspec;nupkg。
        /// </summary>
        internal static string CommandPackageSaveMode_jpn
        {
            get { return GetString("CommandPackageSaveMode_jpn"); }
        }

        /// <summary>
        /// パッケージのインストール後に保存するファイルの種類を指定します: nuspec、nupkg、nuspec;nupkg。
        /// </summary>
        internal static string FormatCommandPackageSaveMode_jpn()
        {
            return GetString("CommandPackageSaveMode_jpn");
        }

        /// <summary>
        /// 패키지 설치 후에 저장할 파일 형식을 지정합니다. nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_kor
        {
            get { return GetString("CommandPackageSaveMode_kor"); }
        }

        /// <summary>
        /// 패키지 설치 후에 저장할 파일 형식을 지정합니다. nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_kor()
        {
            return GetString("CommandPackageSaveMode_kor");
        }

        /// <summary>
        /// Określa typy plików do zapisania po zainstalowaniu pakietów: nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_plk
        {
            get { return GetString("CommandPackageSaveMode_plk"); }
        }

        /// <summary>
        /// Określa typy plików do zapisania po zainstalowaniu pakietów: nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_plk()
        {
            return GetString("CommandPackageSaveMode_plk");
        }

        /// <summary>
        /// Especifica tipos de arquivos para salvar após instalação de pacote: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_ptb
        {
            get { return GetString("CommandPackageSaveMode_ptb"); }
        }

        /// <summary>
        /// Especifica tipos de arquivos para salvar após instalação de pacote: nuspec, nupkg, nuspec;nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_ptb()
        {
            return GetString("CommandPackageSaveMode_ptb");
        }

        /// <summary>
        /// Задает типы файлов, сохраняемых после установки пакета: nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string CommandPackageSaveMode_rus
        {
            get { return GetString("CommandPackageSaveMode_rus"); }
        }

        /// <summary>
        /// Задает типы файлов, сохраняемых после установки пакета: nuspec, nupkg, nuspec, nupkg.
        /// </summary>
        internal static string FormatCommandPackageSaveMode_rus()
        {
            return GetString("CommandPackageSaveMode_rus");
        }

        /// <summary>
        /// Paket kurulumundan sonra kaydedilecek dosya türlerini belirtir: nuspec, nupkg, nuspec;nupkg
        /// </summary>
        internal static string CommandPackageSaveMode_trk
        {
            get { return GetString("CommandPackageSaveMode_trk"); }
        }

        /// <summary>
        /// Paket kurulumundan sonra kaydedilecek dosya türlerini belirtir: nuspec, nupkg, nuspec;nupkg
        /// </summary>
        internal static string FormatCommandPackageSaveMode_trk()
        {
            return GetString("CommandPackageSaveMode_trk");
        }

        /// <summary>
        /// 指定要在安装程序包后保存的文件类型: nuspec、nupkg、nuspec;nupkg。
        /// </summary>
        internal static string CommandPackageSaveMode_chs
        {
            get { return GetString("CommandPackageSaveMode_chs"); }
        }

        /// <summary>
        /// 指定要在安装程序包后保存的文件类型: nuspec、nupkg、nuspec;nupkg。
        /// </summary>
        internal static string FormatCommandPackageSaveMode_chs()
        {
            return GetString("CommandPackageSaveMode_chs");
        }

        /// <summary>
        /// 指定套件安裝之後要儲存的檔案類型: nuspec, nupkg, nuspec;nupkg。
        /// </summary>
        internal static string CommandPackageSaveMode_cht
        {
            get { return GetString("CommandPackageSaveMode_cht"); }
        }

        /// <summary>
        /// 指定套件安裝之後要儲存的檔案類型: nuspec, nupkg, nuspec;nupkg。
        /// </summary>
        internal static string FormatCommandPackageSaveMode_cht()
        {
            return GetString("CommandPackageSaveMode_cht");
        }

        /// <summary>
        /// Disable buffering when pushing to an HTTP(S) server to decrease memory usage. Note that when this option is enabled, integrated windows authentication might not work.
        /// </summary>
        internal static string PushCommandDisableBufferingDescription
        {
            get { return GetString("PushCommandDisableBufferingDescription"); }
        }

        /// <summary>
        /// Disable buffering when pushing to an HTTP(S) server to decrease memory usage. Note that when this option is enabled, integrated windows authentication might not work.
        /// </summary>
        internal static string FormatPushCommandDisableBufferingDescription()
        {
            return GetString("PushCommandDisableBufferingDescription");
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
