steps:
- task: PowerShell@1
  displayName: "Official only branch checks"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      $needOfficialBuild = $Env:BUILD_SOURCEBRANCHNAME -eq 'dev' -or $Env:BUILD_SOURCEBRANCHNAME.StartsWith('release-')
      if ($needOfficialBuild)
      {
        throw [System.Exception] ($Env:BUILD_SOURCEBRANCHNAME + ' should only be built from the official build definition')
      }
  condition: " not(eq(variables['IsOfficialBuild'], 'true')) "

- task: PowerShell@1
  displayName: "Check VSTS Personal Access Token"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      CheckVstsPersonalAccessToken -VstsPersonalAccessToken $(VstsPersonalAccessToken)

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      InitializeAllTestsToPending -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -CommitSha $(Build.SourceVersion)
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PowerShell@1
  displayName: "Set Semantic Version"
  name: "setsemanticversion"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      try {
        $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
        $version = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetSemanticVersion
        $version = $version.Trim()
        Write-Host "##vso[task.setvariable variable=SemanticVersion;isOutput=true]$version"
        } catch {
        Write-Host "##vso[task.LogIssue type=error;]Unable to set product version"
        exit 1
      }

- task: PowerShell@2
  displayName: "Update Build Number"
  name: "updatebuildnumber"
  inputs:
    filePath: '$(System.DefaultWorkingDirectory)\scripts\\cibuild\\UpdateBuildNumber.ps1'
    arguments: >
      -sv $(SemanticVersion)
      -r $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 0)]
    failOnStderr: true

- task: PowerShell@1
  displayName: "Get SDK Version For Build"
  name: "getSDKVersionForBuild"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      $msbuildExe = 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Current\bin\msbuild.exe'
      $SDKVersionForBuild = & $msbuildExe $env:BUILD_REPOSITORY_LOCALPATH\build\config.props /v:m /nologo /t:GetCliVersionForBuilding
      Write-Host "##vso[task.setvariable variable=SDKVersionForBuild;isOutput=true]$SDKVersionForBuild"

- task: PowerShell@1
  displayName: "Add Build Tags"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEVERSIONAUTHOR}"
      Write-Host "##vso[build.addbuildtag]${env:BUILD_SOURCEBRANCHNAME}"
