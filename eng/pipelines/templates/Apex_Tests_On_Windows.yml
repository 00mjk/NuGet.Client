parameters:
- name: part
  type: string
- name: stageName
  type: string
- name: testMachineConfigurationJobName
  type: string
- name: testMachineDeploymentJobName
  type: string
- name: testExecutionJobName
  type: string
- name: testMachineCleanUpJobName
  type: string
- name: dependsOn
  type: object
- name: bootstrapperUrl
  type: string
- name: runSettingsURI
  type: string
- name: DartLabEnvironment
  type: string
- name: condition
  type: string
- name: variables
  type: object
- name: testExecutionJobTimeoutInMinutes
  type: number

- template: stages\visual-studio\base.yml@DartLabTemplates
  parameters:
    name: ${{parameters.stageName}}
    condition: ${{parameters.condition}}
    dependsOn: ${{parameters.dependsOn}}
    testMachineConfigurationJobName: ${{parameters.testMachineConfigurationJobName}}
    testMachineDeploymentJobName: ${{parameters.testMachineDeploymentJobName}}
    testExecutionJobName: ${{parameters.testExecutionJobName}}
    testExecutionJobTimeoutInMinutes: ${{parameters.testExecutionJobTimeoutInMinutes}}
    testMachineCleanUpJobName: ${{parameters.testMachineCleanUpJobName}}
    variables:
    - name: bootstrapperUrl
      value: ${{parameters.bootstrapperUrl}}
    - name: runSettingsURI
      value: ${{parameters.runSettingsURI}}
    - name: Part
      value: ${{parameters.part}}
    - ${{parameters.variables}}
    visualStudioBootstrapperURI: $(bootstrapperUrl)
    visualStudioInstallationParameters: $(VisualStudio.InstallationUnderTest.SetupParameters)
    testLabPoolName: VS-Platform
    dartLabEnvironment: ${{parameters.DartLabEnvironment}}
    visualStudioSigning: Test
    preTestMachineConfigurationStepList:
    - task: PowerShell@2
      displayName: Set 'VisualStudio.InstallationUnderTest.SetupParameters'
      inputs:
        filePath: $(DartLab.Path)\Scripts\VisualStudio\Installation\Get-VisualStudioSetupParameters.ps1
        arguments: -RunSettingsURI '$(runSettingsURI)' -InstallPath 'C:\Test\VisualStudio' -NoRestart -Quiet -Wait -OutVariableName 'VisualStudio.InstallationUnderTest.SetupParameters'

deployAndRunTestsStepList:
- checkout: self
  clean: true
  submodules: true

- task: PowerShell@1
  displayName: "Print Environment Variables"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      Get-ChildItem Env: | Sort-Object Name | Format-Table -Wrap -AutoSize

- task: DownloadBuildArtifacts@0
  displayName: "Download Build artifacts"
  inputs:
    artifactName: "VS15"
    downloadPath: "$(Build.Repository.LocalPath)/artifacts"

- task: MSBuild@1
  displayName: "Bootstrap NuGet packages"
  inputs:
    solution: "build\\bootstrap.proj"
    configuration: "$(BuildConfiguration)"
    msbuildArguments: "/t:Restore"

- task: PowerShell@1
  displayName: "Bootstrap.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/scripts/Bootstrap.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -verbose"

- task: PowerShell@1
  displayName: "SetupFunctionalTests.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/scripts/SetupFunctionalTests.ps1"

- task: PowerShell@1
  displayName: "InstallNuGetVSIX.ps1"
  inputs:
    scriptName: "$(System.DefaultWorkingDirectory)/artifacts/EndToEnd/scripts/InstallNuGetVSIX.ps1"
    arguments: "-NuGetDropPath $(Build.Repository.LocalPath)\\artifacts\\VS15 -FuncTestRoot $(System.DefaultWorkingDirectory)\\artifacts -ProcessExitTimeoutInSeconds 180"
    failOnStandardError: "false"

- task: NuGetCommand@2
  displayName: "Add Apex Feed Source"
  inputs:
    command: "custom"
    arguments: "sources add -Name ApexFeed -Source $(ApexPackageFeedUrl) -UserName $(ApexPackageFeedUsername) -Password $(ApexPackageFeedPassword) -ConfigFile $(System.DefaultWorkingDirectory)\\NuGet.config"

- task: MSBuild@1
  displayName: "Restore Apex Tests"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
    msbuildArguments: "/t:RestoreApex /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"

- task: MSBuild@1
  displayName: "Run Apex Tests (continue on error)"
  timeoutInMinutes: 120
  continueOnError: "true"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
    msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"
    maximumCpuCount: true
  condition: "and(succeeded(), eq(variables['IsOfficialBuild'], 'true'))"

- task: MSBuild@1
  displayName: "Run Apex Tests (stop on error)"
  timeoutInMinutes: 120
  continueOnError: "false"
  inputs:
    solution: "build\\build.proj"
    configuration: "$(BuildConfiguration)"
    # Set MSBuildEnableWorkloadResolver to work around https://github.com/dotnet/sdk/issues/17461
    msbuildArguments: "/t:ApexTestsStandalone /p:TestResultOutputFormat=xml /p:BuildNumber=$(BuildNumber) /p:MSBuildEnableWorkloadResolver=false"
    maximumCpuCount: true
  condition: "and(succeeded(), not(eq(variables['IsOfficialBuild'], 'true')))"

- task: PublishTestResults@2
  displayName: "Publish Test Results"
  inputs:
    testRunner: "XUnit"
    testResultsFiles: "*.xml"
    searchFolder: "$(System.DefaultWorkingDirectory)\\build\\TestResults"
    mergeTestResults: "true"
    testRunTitle: "NuGet.Client Apex Tests On Windows"
  condition: "succeededOrFailed()"

- task: PowerShell@1
  displayName: "Initialize Git Commit Status on GitHub"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\utils\\PostGitCommitStatus.ps1
      SetCommitStatusForTestResult -PersonalAccessToken $(NuGetLurkerPersonalAccessToken) -VstsPersonalAccessToken $(System.AccessToken) -CommitSha $(Build.SourceVersion) -TestName "Apex Tests On Windows"
  condition: "not(eq(variables['ManualGitHubChecks'], 'false'))"

- task: PowerShell@1
  displayName: "Kill running instances of DevEnv"
  inputs:
    scriptType: "inlineScript"
    inlineScript: |
      . $(Build.Repository.LocalPath)\\scripts\\e2etests\\VSUtils.ps1
      KillRunningInstancesOfVS (Get-LatestVSInstance -VersionRange (Get-VisualStudioVersionRangeFromConfig))
  condition: "always()"
